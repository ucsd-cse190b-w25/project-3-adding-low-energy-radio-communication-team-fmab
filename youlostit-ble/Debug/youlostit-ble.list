
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b7c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003d04  08003d04  00004d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d74  08003d74  00005198  2**0
                  CONTENTS
  4 .ARM          00000000  08003d74  08003d74  00005198  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d74  08003d74  00005198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d74  08003d74  00004d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d78  08003d78  00004d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08003d7c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000198  08003f14  00005198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08003f14  00005498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6a0  00000000  00000000  000051c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3a  00000000  00000000  0000f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  000117a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000727  00000000  00000000  00012150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277a0  00000000  00000000  00012877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afa8  00000000  00000000  0003a017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f15e9  00000000  00000000  00044fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001365a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000295c  00000000  00000000  001365ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00138f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000198 	.word	0x20000198
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cec 	.word	0x08003cec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000019c 	.word	0x2000019c
 80001c4:	08003cec 	.word	0x08003cec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2uiz>:
 8000540:	004a      	lsls	r2, r1, #1
 8000542:	d211      	bcs.n	8000568 <__aeabi_d2uiz+0x28>
 8000544:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000548:	d211      	bcs.n	800056e <__aeabi_d2uiz+0x2e>
 800054a:	d50d      	bpl.n	8000568 <__aeabi_d2uiz+0x28>
 800054c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000550:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000554:	d40e      	bmi.n	8000574 <__aeabi_d2uiz+0x34>
 8000556:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800055a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800055e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000562:	fa23 f002 	lsr.w	r0, r3, r2
 8000566:	4770      	bx	lr
 8000568:	f04f 0000 	mov.w	r0, #0
 800056c:	4770      	bx	lr
 800056e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000572:	d102      	bne.n	800057a <__aeabi_d2uiz+0x3a>
 8000574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000578:	4770      	bx	lr
 800057a:	f04f 0000 	mov.w	r0, #0
 800057e:	4770      	bx	lr

08000580 <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000586:	2006      	movs	r0, #6
 8000588:	f003 fa56 	bl	8003a38 <malloc>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b70      	ldr	r3, [pc, #448]	@ (8000754 <ble_init+0x1d4>)
 8000592:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000594:	bf00      	nop
 8000596:	4b70      	ldr	r3, [pc, #448]	@ (8000758 <ble_init+0x1d8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0fb      	beq.n	8000596 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800059e:	4b6d      	ldr	r3, [pc, #436]	@ (8000754 <ble_init+0x1d4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2106      	movs	r1, #6
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f905 	bl	80007b4 <fetchBleEvent>
 80005aa:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d111      	bne.n	80005d6 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80005b2:	4b68      	ldr	r3, [pc, #416]	@ (8000754 <ble_init+0x1d4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2206      	movs	r2, #6
 80005b8:	4968      	ldr	r1, [pc, #416]	@ (800075c <ble_init+0x1dc>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f984 	bl	80008c8 <checkEventResp>
 80005c0:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d106      	bne.n	80005d6 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80005c8:	4b65      	ldr	r3, [pc, #404]	@ (8000760 <ble_init+0x1e0>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	4b63      	ldr	r3, [pc, #396]	@ (8000760 <ble_init+0x1e0>)
 80005d4:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f001 fb30 	bl	8001c3c <HAL_Delay>
	free(rxEvent);
 80005dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000754 <ble_init+0x1d4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fa31 	bl	8003a48 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80005e6:	2300      	movs	r3, #0
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2307      	movs	r3, #7
 80005ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000764 <ble_init+0x1e4>)
 80005ee:	2104      	movs	r1, #4
 80005f0:	485d      	ldr	r0, [pc, #372]	@ (8000768 <ble_init+0x1e8>)
 80005f2:	f000 fa8f 	bl	8000b14 <BLE_command>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 80005fc:	4b58      	ldr	r3, [pc, #352]	@ (8000760 <ble_init+0x1e0>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b56      	ldr	r3, [pc, #344]	@ (8000760 <ble_init+0x1e0>)
 8000608:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800060a:	4b52      	ldr	r3, [pc, #328]	@ (8000754 <ble_init+0x1d4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fa1a 	bl	8003a48 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000614:	2303      	movs	r3, #3
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2307      	movs	r3, #7
 800061a:	4a54      	ldr	r2, [pc, #336]	@ (800076c <ble_init+0x1ec>)
 800061c:	2107      	movs	r1, #7
 800061e:	4854      	ldr	r0, [pc, #336]	@ (8000770 <ble_init+0x1f0>)
 8000620:	f000 fa78 	bl	8000b14 <BLE_command>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d11b      	bne.n	8000662 <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 800062a:	4b4d      	ldr	r3, [pc, #308]	@ (8000760 <ble_init+0x1e0>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b4a      	ldr	r3, [pc, #296]	@ (8000760 <ble_init+0x1e0>)
 8000636:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000638:	4b46      	ldr	r3, [pc, #280]	@ (8000754 <ble_init+0x1d4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3307      	adds	r3, #7
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b4c      	ldr	r3, [pc, #304]	@ (8000774 <ble_init+0x1f4>)
 8000644:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000646:	4b43      	ldr	r3, [pc, #268]	@ (8000754 <ble_init+0x1d4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3309      	adds	r3, #9
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b49      	ldr	r3, [pc, #292]	@ (8000778 <ble_init+0x1f8>)
 8000652:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000654:	4b3f      	ldr	r3, [pc, #252]	@ (8000754 <ble_init+0x1d4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	330b      	adds	r3, #11
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b47      	ldr	r3, [pc, #284]	@ (800077c <ble_init+0x1fc>)
 8000660:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000662:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <ble_init+0x1d4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f9ee 	bl	8003a48 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800066c:	4b44      	ldr	r3, [pc, #272]	@ (8000780 <ble_init+0x200>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2307      	movs	r3, #7
 8000672:	2200      	movs	r2, #0
 8000674:	4940      	ldr	r1, [pc, #256]	@ (8000778 <ble_init+0x1f8>)
 8000676:	483f      	ldr	r0, [pc, #252]	@ (8000774 <ble_init+0x1f4>)
 8000678:	f000 fb12 	bl	8000ca0 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 800067c:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <ble_init+0x1e0>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b36      	ldr	r3, [pc, #216]	@ (8000760 <ble_init+0x1e0>)
 8000688:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 800068a:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <ble_init+0x1d4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f9da 	bl	8003a48 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2307      	movs	r3, #7
 800069a:	4a3a      	ldr	r2, [pc, #232]	@ (8000784 <ble_init+0x204>)
 800069c:	2110      	movs	r1, #16
 800069e:	483a      	ldr	r0, [pc, #232]	@ (8000788 <ble_init+0x208>)
 80006a0:	f000 fa38 	bl	8000b14 <BLE_command>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d106      	bne.n	80006b8 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000760 <ble_init+0x1e0>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <ble_init+0x1e0>)
 80006b6:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <ble_init+0x1d4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 f9c3 	bl	8003a48 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80006c2:	2300      	movs	r3, #0
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2307      	movs	r3, #7
 80006c8:	4a30      	ldr	r2, [pc, #192]	@ (800078c <ble_init+0x20c>)
 80006ca:	2106      	movs	r1, #6
 80006cc:	4830      	ldr	r0, [pc, #192]	@ (8000790 <ble_init+0x210>)
 80006ce:	f000 fa21 	bl	8000b14 <BLE_command>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d106      	bne.n	80006e6 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80006d8:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <ble_init+0x1e0>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <ble_init+0x1e0>)
 80006e4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <ble_init+0x1d4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 f9ac 	bl	8003a48 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80006f0:	2300      	movs	r3, #0
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2307      	movs	r3, #7
 80006f6:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <ble_init+0x214>)
 80006f8:	2124      	movs	r1, #36	@ 0x24
 80006fa:	4827      	ldr	r0, [pc, #156]	@ (8000798 <ble_init+0x218>)
 80006fc:	f000 fa0a 	bl	8000b14 <BLE_command>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d106      	bne.n	8000714 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <ble_init+0x1e0>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <ble_init+0x1e0>)
 8000712:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <ble_init+0x1d4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f003 f995 	bl	8003a48 <free>

	//This will start the advertisment,
	setConnectable();
 800071e:	f000 f979 	bl	8000a14 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000722:	2207      	movs	r2, #7
 8000724:	491d      	ldr	r1, [pc, #116]	@ (800079c <ble_init+0x21c>)
 8000726:	481e      	ldr	r0, [pc, #120]	@ (80007a0 <ble_init+0x220>)
 8000728:	f000 fa40 	bl	8000bac <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800072c:	2310      	movs	r3, #16
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2314      	movs	r3, #20
 8000732:	4a1a      	ldr	r2, [pc, #104]	@ (800079c <ble_init+0x21c>)
 8000734:	491b      	ldr	r1, [pc, #108]	@ (80007a4 <ble_init+0x224>)
 8000736:	481c      	ldr	r0, [pc, #112]	@ (80007a8 <ble_init+0x228>)
 8000738:	f000 fa70 	bl	8000c1c <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800073c:	2304      	movs	r3, #4
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2314      	movs	r3, #20
 8000742:	4a16      	ldr	r2, [pc, #88]	@ (800079c <ble_init+0x21c>)
 8000744:	4919      	ldr	r1, [pc, #100]	@ (80007ac <ble_init+0x22c>)
 8000746:	481a      	ldr	r0, [pc, #104]	@ (80007b0 <ble_init+0x230>)
 8000748:	f000 fa68 	bl	8000c1c <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 800074c:	bf00      	nop
}
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200002cc 	.word	0x200002cc
 8000758:	200002e0 	.word	0x200002e0
 800075c:	20000000 	.word	0x20000000
 8000760:	200002ca 	.word	0x200002ca
 8000764:	2000000c 	.word	0x2000000c
 8000768:	20000008 	.word	0x20000008
 800076c:	2000001c 	.word	0x2000001c
 8000770:	20000014 	.word	0x20000014
 8000774:	200001b4 	.word	0x200001b4
 8000778:	200001b8 	.word	0x200001b8
 800077c:	200001bc 	.word	0x200001bc
 8000780:	200000f4 	.word	0x200000f4
 8000784:	20000034 	.word	0x20000034
 8000788:	20000024 	.word	0x20000024
 800078c:	20000044 	.word	0x20000044
 8000790:	2000003c 	.word	0x2000003c
 8000794:	20000070 	.word	0x20000070
 8000798:	2000004c 	.word	0x2000004c
 800079c:	200002c0 	.word	0x200002c0
 80007a0:	200000fc 	.word	0x200000fc
 80007a4:	200002c8 	.word	0x200002c8
 80007a8:	2000011c 	.word	0x2000011c
 80007ac:	200002c4 	.word	0x200002c4
 80007b0:	2000010c 	.word	0x2000010c

080007b4 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80007be:	4a3d      	ldr	r2, [pc, #244]	@ (80008b4 <fetchBleEvent+0x100>)
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007c8:	6018      	str	r0, [r3, #0]
 80007ca:	3304      	adds	r3, #4
 80007cc:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80007ce:	2140      	movs	r1, #64	@ 0x40
 80007d0:	4839      	ldr	r0, [pc, #228]	@ (80008b8 <fetchBleEvent+0x104>)
 80007d2:	f001 fd13 	bl	80021fc <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d065      	beq.n	80008a8 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 80007dc:	2005      	movs	r0, #5
 80007de:	f001 fa2d 	bl	8001c3c <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e8:	4834      	ldr	r0, [pc, #208]	@ (80008bc <fetchBleEvent+0x108>)
 80007ea:	f001 fd1f 	bl	800222c <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80007ee:	f107 0210 	add.w	r2, r7, #16
 80007f2:	f107 0118 	add.w	r1, r7, #24
 80007f6:	2301      	movs	r3, #1
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2305      	movs	r3, #5
 80007fc:	4830      	ldr	r0, [pc, #192]	@ (80008c0 <fetchBleEvent+0x10c>)
 80007fe:	f002 fd95 	bl	800332c <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000808:	482c      	ldr	r0, [pc, #176]	@ (80008bc <fetchBleEvent+0x108>)
 800080a:	f001 fd0f 	bl	800222c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f001 fa14 	bl	8001c3c <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081a:	4828      	ldr	r0, [pc, #160]	@ (80008bc <fetchBleEvent+0x108>)
 800081c:	f001 fd06 	bl	800222c <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000820:	f107 0210 	add.w	r2, r7, #16
 8000824:	f107 0118 	add.w	r1, r7, #24
 8000828:	2301      	movs	r3, #1
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2305      	movs	r3, #5
 800082e:	4824      	ldr	r0, [pc, #144]	@ (80008c0 <fetchBleEvent+0x10c>)
 8000830:	f002 fd7c 	bl	800332c <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	461a      	mov	r2, r3
 8000838:	7d3b      	ldrb	r3, [r7, #20]
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	4313      	orrs	r3, r2
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 8000840:	23ff      	movs	r3, #255	@ 0xff
 8000842:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	dd01      	ble.n	8000850 <fetchBleEvent+0x9c>
	  dataSize=size;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 8000850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000852:	2b00      	cmp	r3, #0
 8000854:	dd1f      	ble.n	8000896 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	e00d      	b.n	8000878 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	441a      	add	r2, r3
 8000862:	f107 010f 	add.w	r1, r7, #15
 8000866:	2301      	movs	r3, #1
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	4814      	ldr	r0, [pc, #80]	@ (80008c0 <fetchBleEvent+0x10c>)
 800086e:	f002 fd5d 	bl	800332c <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	3301      	adds	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
 8000878:	6a3a      	ldr	r2, [r7, #32]
 800087a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087c:	429a      	cmp	r2, r3
 800087e:	dbed      	blt.n	800085c <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000886:	480d      	ldr	r0, [pc, #52]	@ (80008bc <fetchBleEvent+0x108>)
 8000888:	f001 fcd0 	bl	800222c <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <fetchBleEvent+0x110>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000892:	2300      	movs	r3, #0
 8000894:	e00a      	b.n	80008ac <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089c:	4807      	ldr	r0, [pc, #28]	@ (80008bc <fetchBleEvent+0x108>)
 800089e:	f001 fcc5 	bl	800222c <HAL_GPIO_WritePin>
        return -1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008a6:	e001      	b.n	80008ac <fetchBleEvent+0xf8>
  }else{
  return -2;
 80008a8:	f06f 0301 	mvn.w	r3, #1
  }
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	08003d04 	.word	0x08003d04
 80008b8:	48001000 	.word	0x48001000
 80008bc:	48000c00 	.word	0x48000c00
 80008c0:	200002e4 	.word	0x200002e4
 80008c4:	200002e0 	.word	0x200002e0

080008c8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	int j=0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e00f      	b.n	80008fe <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	440b      	add	r3, r1
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d002      	beq.n	80008f8 <checkEventResp+0x30>
			return -1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008f6:	e007      	b.n	8000908 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	3301      	adds	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	dbeb      	blt.n	80008de <checkEventResp+0x16>
		}
	}

return BLE_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af02      	add	r7, sp, #8
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800091e:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <sendCommand+0x88>)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000928:	6018      	str	r0, [r3, #0]
 800092a:	3304      	adds	r3, #4
 800092c:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000934:	481a      	ldr	r0, [pc, #104]	@ (80009a0 <sendCommand+0x8c>)
 8000936:	f001 fc79 	bl	800222c <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800093a:	f107 0208 	add.w	r2, r7, #8
 800093e:	f107 0110 	add.w	r1, r7, #16
 8000942:	2301      	movs	r3, #1
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2305      	movs	r3, #5
 8000948:	4816      	ldr	r0, [pc, #88]	@ (80009a4 <sendCommand+0x90>)
 800094a:	f002 fcef 	bl	800332c <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800094e:	7abb      	ldrb	r3, [r7, #10]
 8000950:	021b      	lsls	r3, r3, #8
 8000952:	7a7a      	ldrb	r2, [r7, #9]
 8000954:	4313      	orrs	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	db09      	blt.n	8000974 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b29a      	uxth	r2, r3
 8000964:	2301      	movs	r3, #1
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <sendCommand+0x90>)
 800096a:	f002 fb6a 	bl	8003042 <HAL_SPI_Transmit>
		result=0;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	e002      	b.n	800097a <sendCommand+0x66>
	  }else{
		result=-1;
 8000974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000978:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000980:	4807      	ldr	r0, [pc, #28]	@ (80009a0 <sendCommand+0x8c>)
 8000982:	f001 fc53 	bl	800222c <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <sendCommand+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1cd      	bne.n	800092e <sendCommand+0x1a>

}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	08003d0c 	.word	0x08003d0c
 80009a0:	48000c00 	.word	0x48000c00
 80009a4:	200002e4 	.word	0x200002e4
 80009a8:	200002e0 	.word	0x200002e0

080009ac <catchBLE>:

void catchBLE(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80009b2:	217f      	movs	r1, #127	@ 0x7f
 80009b4:	4813      	ldr	r0, [pc, #76]	@ (8000a04 <catchBLE+0x58>)
 80009b6:	f7ff fefd 	bl	80007b4 <fetchBleEvent>
 80009ba:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d11b      	bne.n	80009fa <catchBLE+0x4e>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80009c2:	2203      	movs	r2, #3
 80009c4:	4910      	ldr	r1, [pc, #64]	@ (8000a08 <catchBLE+0x5c>)
 80009c6:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <catchBLE+0x58>)
 80009c8:	f7ff ff7e 	bl	80008c8 <checkEventResp>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <catchBLE+0x2a>
			  // This automatically sets your device to be discoverable
			  // as soon as it disconnects from a device
			  setConnectable();
 80009d2:	f000 f81f 	bl	8000a14 <setConnectable>
		  }
		  if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80009d6:	2205      	movs	r2, #5
 80009d8:	490c      	ldr	r1, [pc, #48]	@ (8000a0c <catchBLE+0x60>)
 80009da:	480a      	ldr	r0, [pc, #40]	@ (8000a04 <catchBLE+0x58>)
 80009dc:	f7ff ff74 	bl	80008c8 <checkEventResp>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d109      	bne.n	80009fa <catchBLE+0x4e>
			  // Little Endian Format
			  *(connectionHandler) = buffer[5];
 80009e6:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <catchBLE+0x58>)
 80009e8:	795b      	ldrb	r3, [r3, #5]
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <catchBLE+0x64>)
 80009ee:	801a      	strh	r2, [r3, #0]
			  *(connectionHandler + 1) = buffer[6];
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <catchBLE+0x58>)
 80009f2:	799b      	ldrb	r3, [r3, #6]
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <catchBLE+0x64>)
 80009f8:	805a      	strh	r2, [r3, #2]
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200001c0 	.word	0x200001c0
 8000a08:	200000e8 	.word	0x200000e8
 8000a0c:	200000ec 	.word	0x200000ec
 8000a10:	2000012c 	.word	0x2000012c

08000a14 <setConnectable>:

void setConnectable(){
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000a1a:	200c      	movs	r0, #12
 8000a1c:	f003 f80c 	bl	8003a38 <malloc>
 8000a20:	4603      	mov	r3, r0
 8000a22:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4a36      	ldr	r2, [pc, #216]	@ (8000b00 <setConnectable+0xec>)
 8000a28:	6810      	ldr	r0, [r2, #0]
 8000a2a:	6018      	str	r0, [r3, #0]
 8000a2c:	8891      	ldrh	r1, [r2, #4]
 8000a2e:	7992      	ldrb	r2, [r2, #6]
 8000a30:	8099      	strh	r1, [r3, #4]
 8000a32:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3309      	adds	r3, #9
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	330a      	adds	r3, #10
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	330b      	adds	r3, #11
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3307      	adds	r3, #7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000a5c:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <setConnectable+0xf0>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000a62:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <setConnectable+0xf0>)
 8000a64:	2215      	movs	r2, #21
 8000a66:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000a68:	2019      	movs	r0, #25
 8000a6a:	f002 ffe5 	bl	8003a38 <malloc>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	4a23      	ldr	r2, [pc, #140]	@ (8000b04 <setConnectable+0xf0>)
 8000a76:	461c      	mov	r4, r3
 8000a78:	4613      	mov	r3, r2
 8000a7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a7c:	6020      	str	r0, [r4, #0]
 8000a7e:	6061      	str	r1, [r4, #4]
 8000a80:	60a2      	str	r2, [r4, #8]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	330d      	adds	r3, #13
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	68f9      	ldr	r1, [r7, #12]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 f8d4 	bl	8003c3c <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000a94:	2119      	movs	r1, #25
 8000a96:	68b8      	ldr	r0, [r7, #8]
 8000a98:	f7ff ff3c 	bl	8000914 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000a9c:	2007      	movs	r0, #7
 8000a9e:	f002 ffcb 	bl	8003a38 <malloc>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 8000aa6:	bf00      	nop
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <setConnectable+0xf4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0fb      	beq.n	8000aa8 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fe7e 	bl	80007b4 <fetchBleEvent>
 8000ab8:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10f      	bne.n	8000ae0 <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	4912      	ldr	r1, [pc, #72]	@ (8000b0c <setConnectable+0xf8>)
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff feff 	bl	80008c8 <checkEventResp>
 8000aca:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d106      	bne.n	8000ae0 <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <setConnectable+0xfc>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <setConnectable+0xfc>)
 8000ade:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f002 ffb1 	bl	8003a48 <free>
	   free(discoverableCommand);
 8000ae6:	68b8      	ldr	r0, [r7, #8]
 8000ae8:	f002 ffae 	bl	8003a48 <free>
	   free(localname);
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f002 ffab 	bl	8003a48 <free>
	   HAL_Delay(10);
 8000af2:	200a      	movs	r0, #10
 8000af4:	f001 f8a2 	bl	8001c3c <HAL_Delay>
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	200000f4 	.word	0x200000f4
 8000b04:	20000078 	.word	0x20000078
 8000b08:	200002e0 	.word	0x200002e0
 8000b0c:	20000088 	.word	0x20000088
 8000b10:	200002ca 	.word	0x200002ca

08000b14 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
 8000b20:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 8000b22:	68b9      	ldr	r1, [r7, #8]
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f7ff fef5 	bl	8000914 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
 8000b2c:	005a      	lsls	r2, r3, #1
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 ff80 	bl	8003a38 <malloc>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <BLE_command+0x90>)
 8000b3e:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000b44:	e007      	b.n	8000b56 <BLE_command+0x42>
		   contatore++;
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000b52:	4293      	cmp	r3, r2
 8000b54:	dc07      	bgt.n	8000b66 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000b56:	2140      	movs	r1, #64	@ 0x40
 8000b58:	4813      	ldr	r0, [pc, #76]	@ (8000ba8 <BLE_command+0x94>)
 8000b5a:	f001 fb4f 	bl	80021fc <HAL_GPIO_ReadPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f0      	beq.n	8000b46 <BLE_command+0x32>
 8000b64:	e000      	b.n	8000b68 <BLE_command+0x54>
			   break;
 8000b66:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <BLE_command+0x90>)
 8000b6a:	6818      	ldr	r0, [r3, #0]
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	005a      	lsls	r2, r3, #1
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	f7ff fe1d 	bl	80007b4 <fetchBleEvent>
 8000b7a:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d107      	bne.n	8000b92 <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <BLE_command+0x90>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fe9c 	bl	80008c8 <checkEventResp>
 8000b90:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 8000b92:	200a      	movs	r0, #10
 8000b94:	f001 f852 	bl	8001c3c <HAL_Delay>


	return response;
 8000b98:	697b      	ldr	r3, [r7, #20]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200002cc 	.word	0x200002cc
 8000ba8:	48001000 	.word	0x48001000

08000bac <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <addService+0x60>)
 8000bba:	2210      	movs	r2, #16
 8000bbc:	68f9      	ldr	r1, [r7, #12]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 f83c 	bl	8003c3c <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <addService+0x64>)
 8000bca:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	4a10      	ldr	r2, [pc, #64]	@ (8000c14 <addService+0x68>)
 8000bd4:	2117      	movs	r1, #23
 8000bd6:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <addService+0x64>)
 8000bd8:	f7ff ff9c 	bl	8000b14 <BLE_command>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10a      	bne.n	8000bf8 <addService+0x4c>
		   handle[0]=rxEvent[7];
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <addService+0x6c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	79da      	ldrb	r2, [r3, #7]
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000bec:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <addService+0x6c>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	7a12      	ldrb	r2, [r2, #8]
 8000bf6:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <addService+0x6c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 ff23 	bl	8003a48 <free>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000095 	.word	0x20000095
 8000c10:	20000090 	.word	0x20000090
 8000c14:	200000a8 	.word	0x200000a8
 8000c18:	200002cc 	.word	0x200002cc

08000c1c <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <addCharacteristic+0x74>)
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	68f9      	ldr	r1, [r7, #12]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 f803 	bl	8003c3c <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <addCharacteristic+0x78>)
 8000c3c:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	785a      	ldrb	r2, [r3, #1]
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <addCharacteristic+0x78>)
 8000c44:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000c46:	4a13      	ldr	r2, [pc, #76]	@ (8000c94 <addCharacteristic+0x78>)
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000c4c:	4a11      	ldr	r2, [pc, #68]	@ (8000c94 <addCharacteristic+0x78>)
 8000c4e:	7e3b      	ldrb	r3, [r7, #24]
 8000c50:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000c52:	2301      	movs	r3, #1
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2307      	movs	r3, #7
 8000c58:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <addCharacteristic+0x7c>)
 8000c5a:	211e      	movs	r1, #30
 8000c5c:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <addCharacteristic+0x78>)
 8000c5e:	f7ff ff59 	bl	8000b14 <BLE_command>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10a      	bne.n	8000c7e <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <addCharacteristic+0x80>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	79da      	ldrb	r2, [r3, #7]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <addCharacteristic+0x80>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	7a12      	ldrb	r2, [r2, #8]
 8000c7c:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <addCharacteristic+0x80>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fee0 	bl	8003a48 <free>
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200000b7 	.word	0x200000b7
 8000c94:	200000b0 	.word	0x200000b0
 8000c98:	200000d0 	.word	0x200000d0
 8000c9c:	200002cc 	.word	0x200002cc

08000ca0 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3306      	adds	r3, #6
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <updateCharValue+0x9c>)
 8000cb8:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <updateCharValue+0x9c>)
 8000cc0:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	785a      	ldrb	r2, [r3, #1]
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <updateCharValue+0x9c>)
 8000cc8:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <updateCharValue+0x9c>)
 8000cd0:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	785a      	ldrb	r2, [r3, #1]
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <updateCharValue+0x9c>)
 8000cd8:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <updateCharValue+0x9c>)
 8000ce0:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <updateCharValue+0x9c>)
 8000ce8:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	330a      	adds	r3, #10
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fea2 	bl	8003a38 <malloc>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000cf8:	220a      	movs	r2, #10
 8000cfa:	4910      	ldr	r1, [pc, #64]	@ (8000d3c <updateCharValue+0x9c>)
 8000cfc:	6978      	ldr	r0, [r7, #20]
 8000cfe:	f002 ff9d 	bl	8003c3c <memcpy>
	memcpy(commandComplete+10,data,size);
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	330a      	adds	r3, #10
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	6a39      	ldr	r1, [r7, #32]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 ff96 	bl	8003c3c <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f103 010a 	add.w	r1, r3, #10
 8000d16:	2300      	movs	r3, #0
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <updateCharValue+0xa0>)
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff fef8 	bl	8000b14 <BLE_command>

	free(commandComplete);
 8000d24:	6978      	ldr	r0, [r7, #20]
 8000d26:	f002 fe8f 	bl	8003a48 <free>
	free(rxEvent);
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <updateCharValue+0xa4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 fe8a 	bl	8003a48 <free>
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000d8 	.word	0x200000d8
 8000d40:	200000d0 	.word	0x200000d0
 8000d44:	200002cc 	.word	0x200002cc

08000d48 <i2c_init>:
#include <stdint.h>
#include <stm32l475xx.h>
#include <stdio.h>
#include "i2c.h"

void i2c_init() {
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;   // Enable I2C2 clock
 8000d4c:	4b41      	ldr	r3, [pc, #260]	@ (8000e54 <i2c_init+0x10c>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d50:	4a40      	ldr	r2, [pc, #256]	@ (8000e54 <i2c_init+0x10c>)
 8000d52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d56:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;   //enable GPIOB clock
 8000d58:	4b3e      	ldr	r3, [pc, #248]	@ (8000e54 <i2c_init+0x10c>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5c:	4a3d      	ldr	r2, [pc, #244]	@ (8000e54 <i2c_init+0x10c>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	64d3      	str	r3, [r2, #76]	@ 0x4c

	I2C2->CR1 &= ~I2C_CR1_PE; // Disable the I2C2 peripheral for configuration
 8000d64:	4b3c      	ldr	r3, [pc, #240]	@ (8000e58 <i2c_init+0x110>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a3b      	ldr	r2, [pc, #236]	@ (8000e58 <i2c_init+0x110>)
 8000d6a:	f023 0301 	bic.w	r3, r3, #1
 8000d6e:	6013      	str	r3, [r2, #0]
	//repeat above for PB11 pin

	GPIOB->MODER &= ~(3 << (10 * 2));  // Clear PB10 mode
 8000d70:	4b3a      	ldr	r3, [pc, #232]	@ (8000e5c <i2c_init+0x114>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a39      	ldr	r2, [pc, #228]	@ (8000e5c <i2c_init+0x114>)
 8000d76:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000d7a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2 << (10 * 2));   // Set PB10 to Alternate Function mode (10)
 8000d7c:	4b37      	ldr	r3, [pc, #220]	@ (8000e5c <i2c_init+0x114>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a36      	ldr	r2, [pc, #216]	@ (8000e5c <i2c_init+0x114>)
 8000d82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d86:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(3 << (11 * 2));  // Clear PB11 mode
 8000d88:	4b34      	ldr	r3, [pc, #208]	@ (8000e5c <i2c_init+0x114>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a33      	ldr	r2, [pc, #204]	@ (8000e5c <i2c_init+0x114>)
 8000d8e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d92:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2 << (11 * 2)); 	//Set PB11 to Alternate Function mode (10)
 8000d94:	4b31      	ldr	r3, [pc, #196]	@ (8000e5c <i2c_init+0x114>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a30      	ldr	r2, [pc, #192]	@ (8000e5c <i2c_init+0x114>)
 8000d9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	6013      	str	r3, [r2, #0]

	 // setting to Open-Drain mode for PB10 and PB11

	GPIOB->OTYPER |= (1 << 10) | (1 << 11);   //set bit 10 and 11 to 1, which sets to open drain
 8000da0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e5c <i2c_init+0x114>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	4a2d      	ldr	r2, [pc, #180]	@ (8000e5c <i2c_init+0x114>)
 8000da6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000daa:	6053      	str	r3, [r2, #4]

	GPIOB->PUPDR &= ~(3 << (10 * 2));  // Clear PB10 PUPDR
 8000dac:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <i2c_init+0x114>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e5c <i2c_init+0x114>)
 8000db2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000db6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1 << (10 * 2));   // Set PB10 as Pull-up (01)
 8000db8:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <i2c_init+0x114>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4a27      	ldr	r2, [pc, #156]	@ (8000e5c <i2c_init+0x114>)
 8000dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dc2:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR &= ~(3 << (11 * 2));  // Clear PB11 PUPDR
 8000dc4:	4b25      	ldr	r3, [pc, #148]	@ (8000e5c <i2c_init+0x114>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	4a24      	ldr	r2, [pc, #144]	@ (8000e5c <i2c_init+0x114>)
 8000dca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000dce:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1 << (11 * 2));    //Set PB11 as Pull-up (01)
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <i2c_init+0x114>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	4a21      	ldr	r2, [pc, #132]	@ (8000e5c <i2c_init+0x114>)
 8000dd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dda:	60d3      	str	r3, [r2, #12]




	GPIOB->AFR[1] &= ~(0xF << GPIO_AFRH_AFSEL10_Pos);  //clear AF bits
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <i2c_init+0x114>)
 8000dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e5c <i2c_init+0x114>)
 8000de2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000de6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(0xF << GPIO_AFRH_AFSEL11_Pos);
 8000de8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <i2c_init+0x114>)
 8000dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dec:	4a1b      	ldr	r2, [pc, #108]	@ (8000e5c <i2c_init+0x114>)
 8000dee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000df2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0x4 << GPIO_AFRH_AFSEL10_Pos) | (0x4 << GPIO_AFRH_AFSEL11_Pos);
 8000df4:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <i2c_init+0x114>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df8:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <i2c_init+0x114>)
 8000dfa:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000dfe:	6253      	str	r3, [r2, #36]	@ 0x24



	I2C2->TIMINGR &= ~(I2C_TIMINGR_SCLL | I2C_TIMINGR_SCLH | I2C_TIMINGR_SCLDEL | I2C_TIMINGR_SDADEL | I2C_TIMINGR_PRESC);
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <i2c_init+0x110>)
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <i2c_init+0x110>)
 8000e06:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8000e0a:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR |= (0 << I2C_TIMINGR_PRESC_Pos);

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SCLL;
	I2C2->TIMINGR |= (0x13 << I2C_TIMINGR_SCLL_Pos);
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <i2c_init+0x110>)
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	4a11      	ldr	r2, [pc, #68]	@ (8000e58 <i2c_init+0x110>)
 8000e12:	f043 0313 	orr.w	r3, r3, #19
 8000e16:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SCLH;
	I2C2->TIMINGR |= (0xF << I2C_TIMINGR_SCLH_Pos);
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <i2c_init+0x110>)
 8000e1a:	691b      	ldr	r3, [r3, #16]
 8000e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e58 <i2c_init+0x110>)
 8000e1e:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000e22:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SDADEL;
	I2C2->TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL_Pos);
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <i2c_init+0x110>)
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <i2c_init+0x110>)
 8000e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e2e:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SCLDEL;
	I2C2->TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL_Pos);
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <i2c_init+0x110>)
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <i2c_init+0x110>)
 8000e36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e3a:	6113      	str	r3, [r2, #16]




	// Enable I2C2 peripheral
	I2C2->CR1 |= I2C_CR1_PE; // Enable the I2C2 peripheral
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <i2c_init+0x110>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <i2c_init+0x110>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6013      	str	r3, [r2, #0]



}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40005800 	.word	0x40005800
 8000e5c:	48000400 	.word	0x48000400

08000e60 <i2c_transaction>:
uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len){
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	603a      	str	r2, [r7, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	71bb      	strb	r3, [r7, #6]
 8000e72:	4613      	mov	r3, r2
 8000e74:	717b      	strb	r3, [r7, #5]

	while (I2C2->ISR & I2C_ISR_BUSY);
 8000e76:	bf00      	nop
 8000e78:	4b51      	ldr	r3, [pc, #324]	@ (8000fc0 <i2c_transaction+0x160>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f9      	bne.n	8000e78 <i2c_transaction+0x18>



	I2C2->CR2 &= ~I2C_CR2_NBYTES;
 8000e84:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc0 <i2c_transaction+0x160>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc0 <i2c_transaction+0x160>)
 8000e8a:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000e8e:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_SADD;
 8000e90:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc0 <i2c_transaction+0x160>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4a4a      	ldr	r2, [pc, #296]	@ (8000fc0 <i2c_transaction+0x160>)
 8000e96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000e9a:	f023 0303 	bic.w	r3, r3, #3
 8000e9e:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_START;
 8000ea0:	4b47      	ldr	r3, [pc, #284]	@ (8000fc0 <i2c_transaction+0x160>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a46      	ldr	r2, [pc, #280]	@ (8000fc0 <i2c_transaction+0x160>)
 8000ea6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000eaa:	6053      	str	r3, [r2, #4]


	if (dir == 0) {  // WRITE OPERATION
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d13c      	bne.n	8000f2c <i2c_transaction+0xcc>


		//I2C2->CR2 = 0;
		I2C2->CR2 |= (address << 1);
 8000eb2:	4b43      	ldr	r3, [pc, #268]	@ (8000fc0 <i2c_transaction+0x160>)
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4941      	ldr	r1, [pc, #260]	@ (8000fc0 <i2c_transaction+0x160>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]
		I2C2->CR2 |= (0 << I2C_CR2_RD_WRN_Pos);
 8000ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc0 <i2c_transaction+0x160>)
 8000ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8000fc0 <i2c_transaction+0x160>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos);
 8000ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc0 <i2c_transaction+0x160>)
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	797b      	ldrb	r3, [r7, #5]
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	493b      	ldr	r1, [pc, #236]	@ (8000fc0 <i2c_transaction+0x160>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	604b      	str	r3, [r1, #4]

		I2C2->CR2 |= I2C_CR2_START;
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc0 <i2c_transaction+0x160>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	4a39      	ldr	r2, [pc, #228]	@ (8000fc0 <i2c_transaction+0x160>)
 8000edc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ee0:	6053      	str	r3, [r2, #4]

		for (uint8_t i = 0; i < len; i++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e015      	b.n	8000f14 <i2c_transaction+0xb4>

			while ((I2C2->ISR & I2C_ISR_NACKF) || (!(I2C2->ISR & I2C_ISR_TXIS)));  // Wait until TX buffer is empty
 8000ee8:	bf00      	nop
 8000eea:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <i2c_transaction+0x160>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0310 	and.w	r3, r3, #16
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f9      	bne.n	8000eea <i2c_transaction+0x8a>
 8000ef6:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <i2c_transaction+0x160>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f3      	beq.n	8000eea <i2c_transaction+0x8a>

			I2C2->TXDR = data[i] & 0xFF;  // Send data byte
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
		for (uint8_t i = 0; i < len; i++) {
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	3301      	adds	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	797b      	ldrb	r3, [r7, #5]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d3e5      	bcc.n	8000ee8 <i2c_transaction+0x88>
			//printf("data ith elem w %x \n", data[i]);
		}
		while (!(I2C2->ISR & I2C_ISR_TC));  // Wait until transfer is complete
 8000f1c:	bf00      	nop
 8000f1e:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f9      	beq.n	8000f1e <i2c_transaction+0xbe>
 8000f2a:	e038      	b.n	8000f9e <i2c_transaction+0x13e>

	else {  // READ OPERATION



		I2C2->CR2 |= (address << 1);
 8000f2c:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4922      	ldr	r1, [pc, #136]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]
		I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos);
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	797b      	ldrb	r3, [r7, #5]
 8000f40:	041b      	lsls	r3, r3, #16
 8000f42:	491f      	ldr	r1, [pc, #124]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
		I2C2->CR2 |= (1 << I2C_CR2_RD_WRN_Pos);
 8000f48:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f52:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4a19      	ldr	r2, [pc, #100]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f5e:	6053      	str	r3, [r2, #4]

		for (uint8_t i = 0; i < len; i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	73bb      	strb	r3, [r7, #14]
 8000f64:	e010      	b.n	8000f88 <i2c_transaction+0x128>
			while (!(I2C2->ISR & I2C_ISR_RXNE));  // Wait until RX buffer is full
 8000f66:	bf00      	nop
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f9      	beq.n	8000f68 <i2c_transaction+0x108>
			data[i] = I2C2->RXDR & 0xFF;  // Read data byte
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f76:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) {
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	3301      	adds	r3, #1
 8000f86:	73bb      	strb	r3, [r7, #14]
 8000f88:	7bba      	ldrb	r2, [r7, #14]
 8000f8a:	797b      	ldrb	r3, [r7, #5]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3ea      	bcc.n	8000f66 <i2c_transaction+0x106>
			//printf("data ith elem r %x \n", data[i]);
		}
		while (!(I2C2->ISR & I2C_ISR_TC));  // Wait until transfer is complete
 8000f90:	bf00      	nop
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <i2c_transaction+0x160>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f9      	beq.n	8000f92 <i2c_transaction+0x132>

	}

	I2C2->CR2 |= I2C_CR2_STOP;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <i2c_transaction+0x160>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	4a07      	ldr	r2, [pc, #28]	@ (8000fc0 <i2c_transaction+0x160>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa8:	6053      	str	r3, [r2, #4]
	I2C2->CR2 = 0x0000;
 8000faa:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <i2c_transaction+0x160>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]

	return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40005800 	.word	0x40005800

08000fc4 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
	/* Configure PA5 as an output by clearing all bits and setting the mode */

	//setting clock thing
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000fc8:	4b32      	ldr	r3, [pc, #200]	@ (8001094 <leds_init+0xd0>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fcc:	4a31      	ldr	r2, [pc, #196]	@ (8001094 <leds_init+0xd0>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001094 <leds_init+0xd0>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8001094 <leds_init+0xd0>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000fe0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000fee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000ff0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ffe:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8001000:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800100a:	f023 0320 	bic.w	r3, r3, #32
 800100e:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8001010:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800101a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800101e:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use very high speed mode */
	GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8001020:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800102a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800102e:	6093      	str	r3, [r2, #8]

	/* Turn off the LED */
	GPIOA->ODR &= ~GPIO_ODR_OD5;
 8001030:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800103a:	f023 0320 	bic.w	r3, r3, #32
 800103e:	6153      	str	r3, [r2, #20]



	GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <leds_init+0xd4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <leds_init+0xd4>)
 8001046:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800104a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE14_0;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <leds_init+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <leds_init+0xd4>)
 8001052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001056:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <leds_init+0xd4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <leds_init+0xd4>)
 800105e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001062:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <leds_init+0xd4>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <leds_init+0xd4>)
 800106a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800106e:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use very high speed mode */
	GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8001070:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <leds_init+0xd4>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <leds_init+0xd4>)
 8001076:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 800107a:	6093      	str	r3, [r2, #8]

	/* Turn off the LED */
	GPIOB->ODR &= ~GPIO_ODR_OD14;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <leds_init+0xd4>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <leds_init+0xd4>)
 8001082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001086:	6153      	str	r3, [r2, #20]


}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	48000400 	.word	0x48000400

0800109c <leds_set>:

void leds_set(uint8_t led)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  // TODO implement this
	//passing in 0(0b00) means that both are off, 1(0b01) means led1 is on, 2(0b10) means led2 is on, 3(0b11) means both are on
	if (led == 0) {
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10d      	bne.n	80010c8 <leds_set+0x2c>
		//turn off both


		/* Turn off the LED */
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 80010ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80010b6:	f023 0320 	bic.w	r3, r3, #32
 80010ba:	6153      	str	r3, [r2, #20]

		//turn off led2 (PB14)
		GPIOB->ODR |= ~GPIO_ODR_OD14;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <leds_set+0xa0>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <leds_set+0xa0>)
 80010c2:	f463 4380 	orn	r3, r3, #16384	@ 0x4000
 80010c6:	6153      	str	r3, [r2, #20]
	}
	if (led == 1) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d10d      	bne.n	80010ea <leds_set+0x4e>
		//turn on led1 (PA5)


		/* Turn on the LED */
		GPIOA->ODR |= GPIO_ODR_OD5;
 80010ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80010d8:	f043 0320 	orr.w	r3, r3, #32
 80010dc:	6153      	str	r3, [r2, #20]

		//turn off led2 (PB14)
		GPIOB->ODR &= ~GPIO_ODR_OD14;
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <leds_set+0xa0>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a16      	ldr	r2, [pc, #88]	@ (800113c <leds_set+0xa0>)
 80010e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010e8:	6153      	str	r3, [r2, #20]
	}

	if (led == 2) {
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d10d      	bne.n	800110c <leds_set+0x70>
		//turn on led2 (PB14)


		/* Turn off the LED1 */
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 80010f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80010fa:	f023 0320 	bic.w	r3, r3, #32
 80010fe:	6153      	str	r3, [r2, #20]

		//turn on led2 (PB14)
		GPIOB->ODR |= GPIO_ODR_OD14;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <leds_set+0xa0>)
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <leds_set+0xa0>)
 8001106:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800110a:	6153      	str	r3, [r2, #20]
	}

	if (led == 3) {
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d10d      	bne.n	800112e <leds_set+0x92>
		//turn on both


		/* Turn on the LED1 */
		GPIOA->ODR |= GPIO_ODR_OD5;
 8001112:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800111c:	f043 0320 	orr.w	r3, r3, #32
 8001120:	6153      	str	r3, [r2, #20]

		//turn on led2 (PB14)
		GPIOB->ODR |= GPIO_ODR_OD14;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <leds_set+0xa0>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <leds_set+0xa0>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112c:	6153      	str	r3, [r2, #20]
	}

}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	48000400 	.word	0x48000400

08001140 <lsm6dsl_init>:
#include "lsm6dsl.h"
#include "i2c.h"
#include <stdio.h>
#include <stm32l475xx.h>

void lsm6dsl_init() {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0



	//write to CTRL_XL register
	uint8_t CTRL1_XL_read;
	uint8_t CTRL1_XL = 0x10;   //address of ctrlXL
 8001146:	2310      	movs	r3, #16
 8001148:	71fb      	strb	r3, [r7, #7]
	uint8_t CTRL1_XL_DATA[2] = {0x10, 0x60};
 800114a:	f246 0310 	movw	r3, #24592	@ 0x6010
 800114e:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(0x6A, 0, CTRL1_XL_DATA, 2);  //write
 8001150:	1d3a      	adds	r2, r7, #4
 8001152:	2302      	movs	r3, #2
 8001154:	2100      	movs	r1, #0
 8001156:	206a      	movs	r0, #106	@ 0x6a
 8001158:	f7ff fe82 	bl	8000e60 <i2c_transaction>


	//writing to INT1 CTRL register in the LSM6DSR to configure register (address 0x6A, dir = 0, data= 0x0D01, len =8)
	//printf("works here too\n");
	uint8_t INT1_CTRL_read;
	uint8_t INT1_CTRL = 0x0D;
 800115c:	230d      	movs	r3, #13
 800115e:	71bb      	strb	r3, [r7, #6]
	uint8_t INT1_CTRL_DATA[2] = {0x0D, 0x01};
 8001160:	f240 130d 	movw	r3, #269	@ 0x10d
 8001164:	803b      	strh	r3, [r7, #0]
	i2c_transaction(0x6A, 0, INT1_CTRL_DATA, 2);
 8001166:	463a      	mov	r2, r7
 8001168:	2302      	movs	r3, #2
 800116a:	2100      	movs	r1, #0
 800116c:	206a      	movs	r0, #106	@ 0x6a
 800116e:	f7ff fe77 	bl	8000e60 <i2c_transaction>

	//printf("INT1_CTRL is %x \n", INT1_CTRL_read);
	//i2c_transaction(0x6A, 0, &INT1_CTRL, 1);

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 800117a:	b580      	push	{r7, lr}
 800117c:	b088      	sub	sp, #32
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]

	//for x low and x high
	uint8_t reg_addyXL = 0x28;   //register address (x low)
 8001186:	2328      	movs	r3, #40	@ 0x28
 8001188:	77fb      	strb	r3, [r7, #31]
	uint8_t dataXL;   //declaring data array for the transaction function to read stuff into
	//repeat above for all register addresses

	i2c_transaction(0x6A, 0, &reg_addyXL, 1);
 800118a:	f107 021f 	add.w	r2, r7, #31
 800118e:	2301      	movs	r3, #1
 8001190:	2100      	movs	r1, #0
 8001192:	206a      	movs	r0, #106	@ 0x6a
 8001194:	f7ff fe64 	bl	8000e60 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataXL, 1);   //read in the 1 byte from x low
 8001198:	f107 021e 	add.w	r2, r7, #30
 800119c:	2301      	movs	r3, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	206a      	movs	r0, #106	@ 0x6a
 80011a2:	f7ff fe5d 	bl	8000e60 <i2c_transaction>

	uint8_t reg_addyXH = 0x29;   //register address (x high)
 80011a6:	2329      	movs	r3, #41	@ 0x29
 80011a8:	777b      	strb	r3, [r7, #29]
	uint8_t dataXH;   //declaring data array for the transaction function to read stuff into


	i2c_transaction(0x6A, 0, &reg_addyXH, 1);
 80011aa:	f107 021d 	add.w	r2, r7, #29
 80011ae:	2301      	movs	r3, #1
 80011b0:	2100      	movs	r1, #0
 80011b2:	206a      	movs	r0, #106	@ 0x6a
 80011b4:	f7ff fe54 	bl	8000e60 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataXH, 1);   //read in the 1 byte from x high
 80011b8:	f107 021c 	add.w	r2, r7, #28
 80011bc:	2301      	movs	r3, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	206a      	movs	r0, #106	@ 0x6a
 80011c2:	f7ff fe4d 	bl	8000e60 <i2c_transaction>


	//for y low and y high

	uint8_t reg_addyYL = 0x2A;   //register address (y low)
 80011c6:	232a      	movs	r3, #42	@ 0x2a
 80011c8:	76fb      	strb	r3, [r7, #27]
	uint8_t dataYL;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyYL, 1);
 80011ca:	f107 021b 	add.w	r2, r7, #27
 80011ce:	2301      	movs	r3, #1
 80011d0:	2100      	movs	r1, #0
 80011d2:	206a      	movs	r0, #106	@ 0x6a
 80011d4:	f7ff fe44 	bl	8000e60 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataYL, 1);   //read in the 1 byte from y low
 80011d8:	f107 021a 	add.w	r2, r7, #26
 80011dc:	2301      	movs	r3, #1
 80011de:	2101      	movs	r1, #1
 80011e0:	206a      	movs	r0, #106	@ 0x6a
 80011e2:	f7ff fe3d 	bl	8000e60 <i2c_transaction>


	uint8_t reg_addyYH = 0x2B;   //register address (y high)
 80011e6:	232b      	movs	r3, #43	@ 0x2b
 80011e8:	767b      	strb	r3, [r7, #25]
	uint8_t dataYH;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyYH, 1);
 80011ea:	f107 0219 	add.w	r2, r7, #25
 80011ee:	2301      	movs	r3, #1
 80011f0:	2100      	movs	r1, #0
 80011f2:	206a      	movs	r0, #106	@ 0x6a
 80011f4:	f7ff fe34 	bl	8000e60 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataYH, 1);   //read in the 1 byte from y high
 80011f8:	f107 0218 	add.w	r2, r7, #24
 80011fc:	2301      	movs	r3, #1
 80011fe:	2101      	movs	r1, #1
 8001200:	206a      	movs	r0, #106	@ 0x6a
 8001202:	f7ff fe2d 	bl	8000e60 <i2c_transaction>


	//for z low and z high
	uint8_t reg_addyZL = 0x2C;   //register address   (z low)
 8001206:	232c      	movs	r3, #44	@ 0x2c
 8001208:	75fb      	strb	r3, [r7, #23]
	uint8_t dataZL;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyZL, 1);
 800120a:	f107 0217 	add.w	r2, r7, #23
 800120e:	2301      	movs	r3, #1
 8001210:	2100      	movs	r1, #0
 8001212:	206a      	movs	r0, #106	@ 0x6a
 8001214:	f7ff fe24 	bl	8000e60 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataZL, 1);   //read in the 1 byte from z low
 8001218:	f107 0216 	add.w	r2, r7, #22
 800121c:	2301      	movs	r3, #1
 800121e:	2101      	movs	r1, #1
 8001220:	206a      	movs	r0, #106	@ 0x6a
 8001222:	f7ff fe1d 	bl	8000e60 <i2c_transaction>


	uint8_t reg_addyZH = 0x2D;   //register address (z high)
 8001226:	232d      	movs	r3, #45	@ 0x2d
 8001228:	757b      	strb	r3, [r7, #21]
	uint8_t dataZH;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyZH, 1);
 800122a:	f107 0215 	add.w	r2, r7, #21
 800122e:	2301      	movs	r3, #1
 8001230:	2100      	movs	r1, #0
 8001232:	206a      	movs	r0, #106	@ 0x6a
 8001234:	f7ff fe14 	bl	8000e60 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataZH, 1);   //read in the 1 byte from z high
 8001238:	f107 0214 	add.w	r2, r7, #20
 800123c:	2301      	movs	r3, #1
 800123e:	2101      	movs	r1, #1
 8001240:	206a      	movs	r0, #106	@ 0x6a
 8001242:	f7ff fe0d 	bl	8000e60 <i2c_transaction>



	*x = (dataXH << 8 | dataXL);
 8001246:	7f3b      	ldrb	r3, [r7, #28]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	7fbb      	ldrb	r3, [r7, #30]
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b21a      	sxth	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	801a      	strh	r2, [r3, #0]
	*y = (dataYH << 8 | dataYL);
 8001258:	7e3b      	ldrb	r3, [r7, #24]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	7ebb      	ldrb	r3, [r7, #26]
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21a      	sxth	r2, r3
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	801a      	strh	r2, [r3, #0]
	*z = (dataZH << 8 | dataZL);
 800126a:	7d3b      	ldrb	r3, [r7, #20]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	7dbb      	ldrb	r3, [r7, #22]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21a      	sxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	801a      	strh	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128a:	f000 fc62 	bl	8001b52 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800128e:	f000 f883 	bl	8001398 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001292:	f000 f905 	bl	80014a0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001296:	f000 f8c5 	bl	8001424 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f000 ffc2 	bl	800222c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80012a8:	200a      	movs	r0, #10
 80012aa:	f000 fcc7 	bl	8001c3c <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b8:	f000 ffb8 	bl	800222c <HAL_GPIO_WritePin>

  ble_init();
 80012bc:	f7ff f960 	bl	8000580 <ble_init>



  HAL_Delay(10);
 80012c0:	200a      	movs	r0, #10
 80012c2:	f000 fcbb 	bl	8001c3c <HAL_Delay>
  leds_init();
 80012c6:	f7ff fe7d 	bl	8000fc4 <leds_init>
  timer_init(TIM2);
 80012ca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012ce:	f000 fbb5 	bl	8001a3c <timer_init>
  i2c_init();
 80012d2:	f7ff fd39 	bl	8000d48 <i2c_init>
  lsm6dsl_init();
 80012d6:	f7ff ff33 	bl	8001140 <lsm6dsl_init>

	//put lost detection algorithm here
	//poll continuously the values of the output registers.

	// Loop forever
	int16_t prev_x = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	83bb      	strh	r3, [r7, #28]
	int16_t prev_y = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	83fb      	strh	r3, [r7, #30]
	int16_t prev_z = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	837b      	strh	r3, [r7, #26]
	for(;;) {
		int16_t x;
		int16_t y;
		int16_t z;
		lsm6dsl_read_xyz(&x,&y,&z);
 80012e6:	f107 0214 	add.w	r2, r7, #20
 80012ea:	f107 0116 	add.w	r1, r7, #22
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff41 	bl	800117a <lsm6dsl_read_xyz>

		if(!(prev_x == 0 && prev_y == 0 && prev_z == 0)) {
 80012f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <main+0x8c>
 8001300:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <main+0x8c>
 8001308:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d036      	beq.n	800137e <main+0xfa>
			if (abs(x - prev_x) >= threshold || abs(y - prev_y) >= threshold || abs(z - prev_z) >= threshold) {  //it is moving
 8001310:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001314:	461a      	mov	r2, r3
 8001316:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001320:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <main+0x108>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	da1b      	bge.n	8001364 <main+0xe0>
 800132c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001330:	461a      	mov	r2, r3
 8001332:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800133c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <main+0x108>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	da0d      	bge.n	8001364 <main+0xe0>
 8001348:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800134c:	461a      	mov	r2, r3
 800134e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001358:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <main+0x108>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	db09      	blt.n	8001378 <main+0xf4>
				lostFlag = 0;   //it is not lost
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <main+0x10c>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
				startTimer = 0;   //stop the 1min timer since its not lost
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <main+0x110>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
				leds_set(0);   //reset leds to off whenever it switches from lost to not lost
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fe93 	bl	800109c <leds_set>
 8001376:	e002      	b.n	800137e <main+0xfa>
			}
			else {  //it moved less than the threshold, so we say its lost
				startTimer = 1;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <main+0x110>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]
			}
		}
		prev_x = x;   //set prev to be equal to the current x
 800137e:	8b3b      	ldrh	r3, [r7, #24]
 8001380:	83bb      	strh	r3, [r7, #28]
		prev_y = y;
 8001382:	8afb      	ldrh	r3, [r7, #22]
 8001384:	83fb      	strh	r3, [r7, #30]
		prev_z = z;
 8001386:	8abb      	ldrh	r3, [r7, #20]
 8001388:	837b      	strh	r3, [r7, #26]
	for(;;) {
 800138a:	e7ac      	b.n	80012e6 <main+0x62>
 800138c:	20000134 	.word	0x20000134
 8001390:	200002d4 	.word	0x200002d4
 8001394:	200002d8 	.word	0x200002d8

08001398 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b096      	sub	sp, #88	@ 0x58
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2244      	movs	r2, #68	@ 0x44
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fc04 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013be:	f000 ff7f 	bl	80022c0 <HAL_PWREx_ControlVoltageScaling>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013c8:	f000 f902 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013cc:	2310      	movs	r3, #16
 80013ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80013d8:	2370      	movs	r3, #112	@ 0x70
 80013da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 ffc1 	bl	800236c <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80013f0:	f000 f8ee 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fb89 	bl	8002b24 <HAL_RCC_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001418:	f000 f8da 	bl	80015d0 <Error_Handler>
  }
}
 800141c:	bf00      	nop
 800141e:	3758      	adds	r7, #88	@ 0x58
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001428:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <MX_SPI3_Init+0x74>)
 800142a:	4a1c      	ldr	r2, [pc, #112]	@ (800149c <MX_SPI3_Init+0x78>)
 800142c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_SPI3_Init+0x74>)
 8001430:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001434:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <MX_SPI3_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_SPI3_Init+0x74>)
 800143e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001442:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_SPI3_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <MX_SPI3_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_SPI3_Init+0x74>)
 8001452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001456:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_SPI3_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_SPI3_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_SPI3_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <MX_SPI3_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_SPI3_Init+0x74>)
 8001472:	2207      	movs	r2, #7
 8001474:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <MX_SPI3_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_SPI3_Init+0x74>)
 800147e:	2208      	movs	r2, #8
 8001480:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_SPI3_Init+0x74>)
 8001484:	f001 fd3a 	bl	8002efc <HAL_SPI_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800148e:	f000 f89f 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200002e4 	.word	0x200002e4
 800149c:	40003c00 	.word	0x40003c00

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b6:	4b43      	ldr	r3, [pc, #268]	@ (80015c4 <MX_GPIO_Init+0x124>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a42      	ldr	r2, [pc, #264]	@ (80015c4 <MX_GPIO_Init+0x124>)
 80014bc:	f043 0310 	orr.w	r3, r3, #16
 80014c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c2:	4b40      	ldr	r3, [pc, #256]	@ (80015c4 <MX_GPIO_Init+0x124>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b3d      	ldr	r3, [pc, #244]	@ (80015c4 <MX_GPIO_Init+0x124>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a3c      	ldr	r2, [pc, #240]	@ (80015c4 <MX_GPIO_Init+0x124>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <MX_GPIO_Init+0x124>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b37      	ldr	r3, [pc, #220]	@ (80015c4 <MX_GPIO_Init+0x124>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a36      	ldr	r2, [pc, #216]	@ (80015c4 <MX_GPIO_Init+0x124>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b34      	ldr	r3, [pc, #208]	@ (80015c4 <MX_GPIO_Init+0x124>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	4b31      	ldr	r3, [pc, #196]	@ (80015c4 <MX_GPIO_Init+0x124>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a30      	ldr	r2, [pc, #192]	@ (80015c4 <MX_GPIO_Init+0x124>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b2e      	ldr	r3, [pc, #184]	@ (80015c4 <MX_GPIO_Init+0x124>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b2b      	ldr	r3, [pc, #172]	@ (80015c4 <MX_GPIO_Init+0x124>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a2a      	ldr	r2, [pc, #168]	@ (80015c4 <MX_GPIO_Init+0x124>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <MX_GPIO_Init+0x124>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2120      	movs	r1, #32
 8001532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001536:	f000 fe79 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001540:	4821      	ldr	r0, [pc, #132]	@ (80015c8 <MX_GPIO_Init+0x128>)
 8001542:	f000 fe73 	bl	800222c <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800154c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001550:	f000 fe6c 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001554:	2340      	movs	r3, #64	@ 0x40
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001558:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4818      	ldr	r0, [pc, #96]	@ (80015cc <MX_GPIO_Init+0x12c>)
 800156a:	f000 fc9d 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800156e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800158a:	f000 fc8d 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800158e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <MX_GPIO_Init+0x128>)
 80015a8:	f000 fc7e 	bl	8001ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2017      	movs	r0, #23
 80015b2:	f000 fc42 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015b6:	2017      	movs	r0, #23
 80015b8:	f000 fc5b 	bl	8001e72 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000c00 	.word	0x48000c00
 80015cc:	48001000 	.word	0x48001000

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <Error_Handler+0x8>

080015dc <TIM2_IRQHandler>:
  }
  /* USER CODE END Error_Handler_Debug */
}


void TIM2_IRQHandler() {
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b08c      	sub	sp, #48	@ 0x30
 80015e0:	af02      	add	r7, sp, #8

	  // Check if the interrupt was caused by the update event
	if (TIM2->SR & TIM_SR_UIF) {
 80015e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <TIM2_IRQHandler+0x24>
		//Clear the update interrupt flag
		TIM2->SR &= ~TIM_SR_UIF;
 80015f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6113      	str	r3, [r2, #16]

	/*have a counter that counts up every time we enter interrupt when its lost.
	 * Enters interrupt 20 times per second (20hz), so counterup = 1200 means its been 1 min
	 */

	if(startTimer == 1) {
 8001600:	4b5a      	ldr	r3, [pc, #360]	@ (800176c <TIM2_IRQHandler+0x190>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <TIM2_IRQHandler+0x38>
		counterup = counterup + 1;  //only start counting when the thing isn't moving
 8001608:	4b59      	ldr	r3, [pc, #356]	@ (8001770 <TIM2_IRQHandler+0x194>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a58      	ldr	r2, [pc, #352]	@ (8001770 <TIM2_IRQHandler+0x194>)
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e002      	b.n	800161a <TIM2_IRQHandler+0x3e>
	}
	else {
		counterup = 0;
 8001614:	4b56      	ldr	r3, [pc, #344]	@ (8001770 <TIM2_IRQHandler+0x194>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
	}

	if (counterup >= 1200) {
 800161a:	4b55      	ldr	r3, [pc, #340]	@ (8001770 <TIM2_IRQHandler+0x194>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001622:	f2c0 809f 	blt.w	8001764 <TIM2_IRQHandler+0x188>
		lostFlag = 1;   //it is lost
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <TIM2_IRQHandler+0x198>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]
		if((counterup % 200) == 0) {   //check if counterup is a multiple of 200 (multiple  of 200 marks 10 second intervals)
 800162c:	4b50      	ldr	r3, [pc, #320]	@ (8001770 <TIM2_IRQHandler+0x194>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b51      	ldr	r3, [pc, #324]	@ (8001778 <TIM2_IRQHandler+0x19c>)
 8001632:	fb83 1302 	smull	r1, r3, r3, r2
 8001636:	1199      	asrs	r1, r3, #6
 8001638:	17d3      	asrs	r3, r2, #31
 800163a:	1acb      	subs	r3, r1, r3
 800163c:	21c8      	movs	r1, #200	@ 0xc8
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d123      	bne.n	8001690 <TIM2_IRQHandler+0xb4>
			if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8001648:	4b4c      	ldr	r3, [pc, #304]	@ (800177c <TIM2_IRQHandler+0x1a0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <TIM2_IRQHandler+0x8a>
 8001652:	2140      	movs	r1, #64	@ 0x40
 8001654:	484a      	ldr	r0, [pc, #296]	@ (8001780 <TIM2_IRQHandler+0x1a4>)
 8001656:	f000 fdd1 	bl	80021fc <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <TIM2_IRQHandler+0x8a>
				catchBLE();
 8001660:	f7ff f9a4 	bl	80009ac <catchBLE>
 8001664:	e014      	b.n	8001690 <TIM2_IRQHandler+0xb4>
			}else{
				HAL_Delay(1000);
 8001666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800166a:	f000 fae7 	bl	8001c3c <HAL_Delay>
				// Send a string to the NORDIC UART service, remember to not include the newline
				unsigned char test_str[] = "FMABtag has been missing for";
 800166e:	4b45      	ldr	r3, [pc, #276]	@ (8001784 <TIM2_IRQHandler+0x1a8>)
 8001670:	1d3c      	adds	r4, r7, #4
 8001672:	461d      	mov	r5, r3
 8001674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001678:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800167c:	c407      	stmia	r4!, {r0, r1, r2}
 800167e:	7023      	strb	r3, [r4, #0]
				updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	231c      	movs	r3, #28
 8001686:	2200      	movs	r2, #0
 8001688:	493f      	ldr	r1, [pc, #252]	@ (8001788 <TIM2_IRQHandler+0x1ac>)
 800168a:	4840      	ldr	r0, [pc, #256]	@ (800178c <TIM2_IRQHandler+0x1b0>)
 800168c:	f7ff fb08 	bl	8000ca0 <updateCharValue>
			}
		}
		if(preamble != 0) {
 8001690:	4b3f      	ldr	r3, [pc, #252]	@ (8001790 <TIM2_IRQHandler+0x1b4>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <TIM2_IRQHandler+0xea>
			uint8_t bitmask1 = preamble;
 800169a:	4b3d      	ldr	r3, [pc, #244]	@ (8001790 <TIM2_IRQHandler+0x1b4>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			//push the left 2 bits all the way to the right
			//so if we have 10011001 as preamble, then I push the leftmost 2 bits all the way to the right to get 00000010
			//then I call leds_set using those 2 bits
			bitmask1 >>= 6;
 80016a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016a6:	099b      	lsrs	r3, r3, #6
 80016a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			leds_set(bitmask1);         //turn on the leds based on the 2 bits that I just pushed over
 80016ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fcf3 	bl	800109c <leds_set>
			//next I shift the preamble left by 2 bits so that I can repeat with the next 2 bits
			//so if I have preamble as 10011001, I end up with 01100100
			preamble <<= 2;        //left shift by 2 so i can read the next 2 bits
 80016b6:	4b36      	ldr	r3, [pc, #216]	@ (8001790 <TIM2_IRQHandler+0x1b4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b33      	ldr	r3, [pc, #204]	@ (8001790 <TIM2_IRQHandler+0x1b4>)
 80016c2:	701a      	strb	r2, [r3, #0]
			ID = 7663;      //Phils ID
			numMinutes = (uint8_t)(floor(counterup/1200));
			//every 1200 counts is 1min, floor function to make sure its always an integer
		}
	}
}
 80016c4:	e04e      	b.n	8001764 <TIM2_IRQHandler+0x188>
		else if (ID != 0) {
 80016c6:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <TIM2_IRQHandler+0x1b8>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d012      	beq.n	80016f6 <TIM2_IRQHandler+0x11a>
			uint16_t bitmask2 = ID;
 80016d0:	4b30      	ldr	r3, [pc, #192]	@ (8001794 <TIM2_IRQHandler+0x1b8>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			bitmask2 >>= 14;       //push leftmost 2 bits all the way to the right
 80016d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016d8:	0b9b      	lsrs	r3, r3, #14
 80016da:	84bb      	strh	r3, [r7, #36]	@ 0x24
			leds_set(bitmask2);      //call leds_set on the 2 bits
 80016dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fcdb 	bl	800109c <leds_set>
			ID <<= 2;      //shift left by 2 bits to read the next 2 bits
 80016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <TIM2_IRQHandler+0x1b8>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <TIM2_IRQHandler+0x1b8>)
 80016f2:	801a      	strh	r2, [r3, #0]
}
 80016f4:	e036      	b.n	8001764 <TIM2_IRQHandler+0x188>
		else if (numMinutes != 0) {
 80016f6:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <TIM2_IRQHandler+0x1bc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d015      	beq.n	800172c <TIM2_IRQHandler+0x150>
			uint8_t minutesLost = numMinutes;
 8001700:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <TIM2_IRQHandler+0x1bc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			minutesLost >>= 6;
 8001708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			leds_set(minutesLost);         //turn on the leds based on the 2 bits that I just pushed over
 8001712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fcc0 	bl	800109c <leds_set>
			numMinutes <<= 2;        //left shift by 2 so i can read the next 2 bits
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <TIM2_IRQHandler+0x1bc>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <TIM2_IRQHandler+0x1bc>)
 8001728:	701a      	strb	r2, [r3, #0]
}
 800172a:	e01b      	b.n	8001764 <TIM2_IRQHandler+0x188>
			preamble = 0x99;    //preamble in hex
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <TIM2_IRQHandler+0x1b4>)
 800172e:	2299      	movs	r2, #153	@ 0x99
 8001730:	701a      	strb	r2, [r3, #0]
			ID = 7663;      //Phils ID
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <TIM2_IRQHandler+0x1b8>)
 8001734:	f641 52ef 	movw	r2, #7663	@ 0x1def
 8001738:	801a      	strh	r2, [r3, #0]
			numMinutes = (uint8_t)(floor(counterup/1200));
 800173a:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <TIM2_IRQHandler+0x194>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a17      	ldr	r2, [pc, #92]	@ (800179c <TIM2_IRQHandler+0x1c0>)
 8001740:	fb82 1203 	smull	r1, r2, r2, r3
 8001744:	11d2      	asrs	r2, r2, #7
 8001746:	17db      	asrs	r3, r3, #31
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe8e 	bl	800046c <__aeabi_i2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7fe fef2 	bl	8000540 <__aeabi_d2uiz>
 800175c:	4603      	mov	r3, r0
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <TIM2_IRQHandler+0x1bc>)
 8001762:	701a      	strb	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	@ 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bdb0      	pop	{r4, r5, r7, pc}
 800176c:	200002d8 	.word	0x200002d8
 8001770:	200002d0 	.word	0x200002d0
 8001774:	200002d4 	.word	0x200002d4
 8001778:	51eb851f 	.word	0x51eb851f
 800177c:	200002dc 	.word	0x200002dc
 8001780:	48001000 	.word	0x48001000
 8001784:	08003d14 	.word	0x08003d14
 8001788:	200002c8 	.word	0x200002c8
 800178c:	200002c0 	.word	0x200002c0
 8001790:	20000130 	.word	0x20000130
 8001794:	20000132 	.word	0x20000132
 8001798:	20000138 	.word	0x20000138
 800179c:	1b4e81b5 	.word	0x1b4e81b5

080017a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_MspInit+0x44>)
 80017a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017aa:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <HAL_MspInit+0x44>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_MspInit+0x44>)
 80017b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <HAL_MspInit+0x44>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	4a08      	ldr	r2, [pc, #32]	@ (80017e4 <HAL_MspInit+0x44>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_MspInit+0x44>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a17      	ldr	r2, [pc, #92]	@ (8001864 <HAL_SPI_MspInit+0x7c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d128      	bne.n	800185c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001810:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001814:	6593      	str	r3, [r2, #88]	@ 0x58
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	4a10      	ldr	r2, [pc, #64]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800183a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800184c:	2306      	movs	r3, #6
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4805      	ldr	r0, [pc, #20]	@ (800186c <HAL_SPI_MspInit+0x84>)
 8001858:	f000 fb26 	bl	8001ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	@ 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40003c00 	.word	0x40003c00
 8001868:	40021000 	.word	0x40021000
 800186c:	48000800 	.word	0x48000800

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <NMI_Handler+0x4>

08001878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <MemManage_Handler+0x4>

08001888 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <UsageFault_Handler+0x4>

08001898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c6:	f000 f999 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <EXTI9_5_IRQHandler+0x14>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80018da:	2040      	movs	r0, #64	@ 0x40
 80018dc:	f000 fcbe 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200002e0 	.word	0x200002e0

080018e8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <_sbrk+0x50>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <_sbrk+0x16>
		heap_end = &end;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <_sbrk+0x50>)
 80018fa:	4a10      	ldr	r2, [pc, #64]	@ (800193c <_sbrk+0x54>)
 80018fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <_sbrk+0x50>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <_sbrk+0x50>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	466a      	mov	r2, sp
 800190e:	4293      	cmp	r3, r2
 8001910:	d907      	bls.n	8001922 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001912:	f002 f967 	bl	8003be4 <__errno>
 8001916:	4603      	mov	r3, r0
 8001918:	220c      	movs	r2, #12
 800191a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001920:	e006      	b.n	8001930 <_sbrk+0x48>
	}

	heap_end += incr;
 8001922:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <_sbrk+0x50>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <_sbrk+0x50>)
 800192c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000348 	.word	0x20000348
 800193c:	20000498 	.word	0x20000498

08001940 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <SystemInit+0x64>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194a:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <SystemInit+0x64>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001954:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <SystemInit+0x68>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <SystemInit+0x68>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <SystemInit+0x68>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <SystemInit+0x68>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <SystemInit+0x68>)
 800196c:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001970:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001974:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <SystemInit+0x68>)
 8001978:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800197c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <SystemInit+0x68>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <SystemInit+0x68>)
 8001984:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001988:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800198a:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <SystemInit+0x68>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <SystemInit+0x64>)
 8001992:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001996:	609a      	str	r2, [r3, #8]
#endif
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	40021000 	.word	0x40021000

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	@ (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	@ (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	@ (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  // TODO implement this
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;   // Enable TIM2 clock
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <timer_init+0x70>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a48:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <timer_init+0x70>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6593      	str	r3, [r2, #88]	@ 0x58
	timer_reset(timer);     //reset counter
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f82d 	bl	8001ab0 <timer_reset>

	timer->PSC = 7999;    //scales down to 1khz 3999
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001a5c:	629a      	str	r2, [r3, #40]	@ 0x28

	timer_set_ms(timer, 50);   //sets autoreload to 50, so that it reloads every 1/20th of a second, 20Hz
 8001a5e:	2132      	movs	r1, #50	@ 0x32
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f83b 	bl	8001adc <timer_set_ms>
	TIM2->CR1 &= ~TIM_CR1_DIR;    //set timer to up counting mode 50
 8001a66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a70:	f023 0310 	bic.w	r3, r3, #16
 8001a74:	6013      	str	r3, [r2, #0]



    // 6. Enable the timer interrupt for update events
    TIM2->DIER |= TIM_DIER_UIE;  // Enable update interrupt
 8001a76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	60d3      	str	r3, [r2, #12]


    // 7. Enable the timer interrupt in the NVIC
    NVIC_EnableIRQ(TIM2_IRQn);  // Enable TIM2 interrupt in NVIC
 8001a86:	201c      	movs	r0, #28
 8001a88:	f7ff ff90 	bl	80019ac <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 1);  // Set priority to 1 (lower number = higher priority)
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	201c      	movs	r0, #28
 8001a90:	f7ff ffaa 	bl	80019e8 <__NVIC_SetPriority>

    // 8. Start the timer
    TIM2->CR1 |= TIM_CR1_CEN;   // Enable the timer (start counting)
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6013      	str	r3, [r2, #0]



}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000

08001ab0 <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  // TODO implement this
	TIM2->CR1 &= ~TIM_CR1_CEN;  //stop the timer
 8001ab8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0x0000;  // Reset the counter to 0
 8001ac8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
  // TODO implement this

	timer->ARR = (period_ms) - 1;
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b04:	f7ff ff1c 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0a:	490d      	ldr	r1, [pc, #52]	@ (8001b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <LoopForever+0xe>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b20:	4c0a      	ldr	r4, [pc, #40]	@ (8001b4c <LoopForever+0x16>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f002 f85f 	bl	8003bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b32:	f7ff fba7 	bl	8001284 <main>

08001b36 <LoopForever>:

LoopForever:
    b LoopForever
 8001b36:	e7fe      	b.n	8001b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001b44:	08003d7c 	.word	0x08003d7c
  ldr r2, =_sbss
 8001b48:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001b4c:	20000498 	.word	0x20000498

08001b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_2_IRQHandler>

08001b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f961 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f80e 	bl	8001b84 <HAL_InitTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	71fb      	strb	r3, [r7, #7]
 8001b72:	e001      	b.n	8001b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b74:	f7ff fe14 	bl	80017a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b90:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_InitTick+0x6c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d023      	beq.n	8001be0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <HAL_InitTick+0x70>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <HAL_InitTick+0x6c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f96d 	bl	8001e8e <HAL_SYSTICK_Config>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10f      	bne.n	8001bda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d809      	bhi.n	8001bd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc8:	f000 f937 	bl	8001e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_InitTick+0x74>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e007      	b.n	8001be4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e004      	b.n	8001be4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e001      	b.n	8001be4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000144 	.word	0x20000144
 8001bf4:	2000013c 	.word	0x2000013c
 8001bf8:	20000140 	.word	0x20000140

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000144 	.word	0x20000144
 8001c20:	2000034c 	.word	0x2000034c

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000034c 	.word	0x2000034c

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <HAL_Delay+0x44>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000144 	.word	0x20000144

08001c84 <__NVIC_SetPriorityGrouping>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_GetPriorityGrouping>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f003 0307 	and.w	r3, r3, #7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_EnableIRQ>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0b      	blt.n	8001d12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4907      	ldr	r1, [pc, #28]	@ (8001d20 <__NVIC_EnableIRQ+0x38>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <__NVIC_SetPriority>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	@ (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	@ (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f1c3 0307 	rsb	r3, r3, #7
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	bf28      	it	cs
 8001d96:	2304      	movcs	r3, #4
 8001d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d902      	bls.n	8001da8 <NVIC_EncodePriority+0x30>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b03      	subs	r3, #3
 8001da6:	e000      	b.n	8001daa <NVIC_EncodePriority+0x32>
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	4313      	orrs	r3, r2
         );
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	@ 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df0:	d301      	bcc.n	8001df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <SysTick_Config+0x40>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfe:	210f      	movs	r1, #15
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e04:	f7ff ff8e 	bl	8001d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <SysTick_Config+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <SysTick_Config+0x40>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff29 	bl	8001c84 <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4c:	f7ff ff3e 	bl	8001ccc <__NVIC_GetPriorityGrouping>
 8001e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ff8e 	bl	8001d78 <NVIC_EncodePriority>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff5d 	bl	8001d24 <__NVIC_SetPriority>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff31 	bl	8001ce8 <__NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffa2 	bl	8001de0 <SysTick_Config>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb6:	e17f      	b.n	80021b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8171 	beq.w	80021b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d005      	beq.n	8001ee8 <HAL_GPIO_Init+0x40>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d130      	bne.n	8001f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f1e:	2201      	movs	r2, #1
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	091b      	lsrs	r3, r3, #4
 8001f34:	f003 0201 	and.w	r2, r3, #1
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d118      	bne.n	8001f88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	08db      	lsrs	r3, r3, #3
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d017      	beq.n	8001fc4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80ac 	beq.w	80021b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	4b5f      	ldr	r3, [pc, #380]	@ (80021d8 <HAL_GPIO_Init+0x330>)
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	4a5e      	ldr	r2, [pc, #376]	@ (80021d8 <HAL_GPIO_Init+0x330>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6613      	str	r3, [r2, #96]	@ 0x60
 8002066:	4b5c      	ldr	r3, [pc, #368]	@ (80021d8 <HAL_GPIO_Init+0x330>)
 8002068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002072:	4a5a      	ldr	r2, [pc, #360]	@ (80021dc <HAL_GPIO_Init+0x334>)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800209c:	d025      	beq.n	80020ea <HAL_GPIO_Init+0x242>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4f      	ldr	r2, [pc, #316]	@ (80021e0 <HAL_GPIO_Init+0x338>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01f      	beq.n	80020e6 <HAL_GPIO_Init+0x23e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4e      	ldr	r2, [pc, #312]	@ (80021e4 <HAL_GPIO_Init+0x33c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_GPIO_Init+0x23a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4d      	ldr	r2, [pc, #308]	@ (80021e8 <HAL_GPIO_Init+0x340>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0x236>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4c      	ldr	r2, [pc, #304]	@ (80021ec <HAL_GPIO_Init+0x344>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00d      	beq.n	80020da <HAL_GPIO_Init+0x232>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4b      	ldr	r2, [pc, #300]	@ (80021f0 <HAL_GPIO_Init+0x348>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <HAL_GPIO_Init+0x22e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4a      	ldr	r2, [pc, #296]	@ (80021f4 <HAL_GPIO_Init+0x34c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_GPIO_Init+0x22a>
 80020ce:	2306      	movs	r3, #6
 80020d0:	e00c      	b.n	80020ec <HAL_GPIO_Init+0x244>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00a      	b.n	80020ec <HAL_GPIO_Init+0x244>
 80020d6:	2305      	movs	r3, #5
 80020d8:	e008      	b.n	80020ec <HAL_GPIO_Init+0x244>
 80020da:	2304      	movs	r3, #4
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x244>
 80020de:	2303      	movs	r3, #3
 80020e0:	e004      	b.n	80020ec <HAL_GPIO_Init+0x244>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_Init+0x244>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_GPIO_Init+0x244>
 80020ea:	2300      	movs	r3, #0
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	f002 0203 	and.w	r2, r2, #3
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	4093      	lsls	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020fc:	4937      	ldr	r1, [pc, #220]	@ (80021dc <HAL_GPIO_Init+0x334>)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800210a:	4b3b      	ldr	r3, [pc, #236]	@ (80021f8 <HAL_GPIO_Init+0x350>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800212e:	4a32      	ldr	r2, [pc, #200]	@ (80021f8 <HAL_GPIO_Init+0x350>)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002134:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <HAL_GPIO_Init+0x350>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002158:	4a27      	ldr	r2, [pc, #156]	@ (80021f8 <HAL_GPIO_Init+0x350>)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800215e:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <HAL_GPIO_Init+0x350>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002182:	4a1d      	ldr	r2, [pc, #116]	@ (80021f8 <HAL_GPIO_Init+0x350>)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <HAL_GPIO_Init+0x350>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021ac:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <HAL_GPIO_Init+0x350>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3301      	adds	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f47f ae78 	bne.w	8001eb8 <HAL_GPIO_Init+0x10>
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010000 	.word	0x40010000
 80021e0:	48000400 	.word	0x48000400
 80021e4:	48000800 	.word	0x48000800
 80021e8:	48000c00 	.word	0x48000c00
 80021ec:	48001000 	.word	0x48001000
 80021f0:	48001400 	.word	0x48001400
 80021f4:	48001800 	.word	0x48001800
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e001      	b.n	800221e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
 8002238:	4613      	mov	r3, r2
 800223a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002248:	e002      	b.n	8002250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002272:	4a05      	ldr	r2, [pc, #20]	@ (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f806 	bl	800228c <HAL_GPIO_EXTI_Callback>
  }
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40010400 	.word	0x40010400

0800228c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022a8:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <HAL_PWREx_GetVoltageRange+0x18>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40007000 	.word	0x40007000

080022c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022ce:	d130      	bne.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d0:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022dc:	d038      	beq.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2232      	movs	r2, #50	@ 0x32
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9b      	lsrs	r3, r3, #18
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002304:	e002      	b.n	800230c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3b01      	subs	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002318:	d102      	bne.n	8002320 <HAL_PWREx_ControlVoltageScaling+0x60>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f2      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232c:	d110      	bne.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e00f      	b.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002332:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233e:	d007      	beq.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002340:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002348:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800234e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40007000 	.word	0x40007000
 8002364:	2000013c 	.word	0x2000013c
 8002368:	431bde83 	.word	0x431bde83

0800236c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e3ca      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237e:	4b97      	ldr	r3, [pc, #604]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002388:	4b94      	ldr	r3, [pc, #592]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80e4 	beq.w	8002568 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_RCC_OscConfig+0x4a>
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b0c      	cmp	r3, #12
 80023aa:	f040 808b 	bne.w	80024c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	f040 8087 	bne.w	80024c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b6:	4b89      	ldr	r3, [pc, #548]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x62>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e3a2      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1a      	ldr	r2, [r3, #32]
 80023d2:	4b82      	ldr	r3, [pc, #520]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <HAL_RCC_OscConfig+0x7c>
 80023de:	4b7f      	ldr	r3, [pc, #508]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_OscConfig+0x88>
 80023e8:	4b7c      	ldr	r3, [pc, #496]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80023ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d223      	bcs.n	8002440 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fd1d 	bl	8002e3c <RCC_SetFlashLatencyFromMSIRange>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e383      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800240c:	4b73      	ldr	r3, [pc, #460]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a72      	ldr	r2, [pc, #456]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002412:	f043 0308 	orr.w	r3, r3, #8
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b70      	ldr	r3, [pc, #448]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	496d      	ldr	r1, [pc, #436]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800242a:	4b6c      	ldr	r3, [pc, #432]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	4968      	ldr	r1, [pc, #416]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
 800243e:	e025      	b.n	800248c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002440:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a65      	ldr	r2, [pc, #404]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4960      	ldr	r1, [pc, #384]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245e:	4b5f      	ldr	r3, [pc, #380]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	495b      	ldr	r1, [pc, #364]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fcdd 	bl	8002e3c <RCC_SetFlashLatencyFromMSIRange>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e343      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800248c:	f000 fc4a 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b52      	ldr	r3, [pc, #328]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	4950      	ldr	r1, [pc, #320]	@ (80025e0 <HAL_RCC_OscConfig+0x274>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	4a4e      	ldr	r2, [pc, #312]	@ (80025e4 <HAL_RCC_OscConfig+0x278>)
 80024aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024ac:	4b4e      	ldr	r3, [pc, #312]	@ (80025e8 <HAL_RCC_OscConfig+0x27c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fb67 	bl	8001b84 <HAL_InitTick>
 80024b6:	4603      	mov	r3, r0
 80024b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d052      	beq.n	8002566 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	e327      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d032      	beq.n	8002532 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024cc:	4b43      	ldr	r3, [pc, #268]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a42      	ldr	r2, [pc, #264]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fba4 	bl	8001c24 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e0:	f7ff fba0 	bl	8001c24 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e310      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f2:	4b3a      	ldr	r3, [pc, #232]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fe:	4b37      	ldr	r3, [pc, #220]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a36      	ldr	r2, [pc, #216]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002504:	f043 0308 	orr.w	r3, r3, #8
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b34      	ldr	r3, [pc, #208]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4931      	ldr	r1, [pc, #196]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251c:	4b2f      	ldr	r3, [pc, #188]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	492c      	ldr	r1, [pc, #176]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	e01a      	b.n	8002568 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002532:	4b2a      	ldr	r3, [pc, #168]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a29      	ldr	r2, [pc, #164]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800253e:	f7ff fb71 	bl	8001c24 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002546:	f7ff fb6d 	bl	8001c24 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e2dd      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002558:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x1da>
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002566:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d074      	beq.n	800265e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b08      	cmp	r3, #8
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x21a>
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b0c      	cmp	r3, #12
 800257e:	d10e      	bne.n	800259e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d10b      	bne.n	800259e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d064      	beq.n	800265c <HAL_RCC_OscConfig+0x2f0>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d160      	bne.n	800265c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e2ba      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x24a>
 80025a8:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0b      	ldr	r2, [pc, #44]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e026      	b.n	8002604 <HAL_RCC_OscConfig+0x298>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025be:	d115      	bne.n	80025ec <HAL_RCC_OscConfig+0x280>
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a02      	ldr	r2, [pc, #8]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e014      	b.n	8002604 <HAL_RCC_OscConfig+0x298>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08003d34 	.word	0x08003d34
 80025e4:	2000013c 	.word	0x2000013c
 80025e8:	20000140 	.word	0x20000140
 80025ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a9f      	ldr	r2, [pc, #636]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a9c      	ldr	r2, [pc, #624]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff fb0a 	bl	8001c24 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7ff fb06 	bl	8001c24 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e276      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002626:	4b92      	ldr	r3, [pc, #584]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x2a8>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7ff faf6 	bl	8001c24 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7ff faf2 	bl	8001c24 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	@ 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e262      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264e:	4b88      	ldr	r3, [pc, #544]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x2d0>
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d060      	beq.n	800272c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d005      	beq.n	800267c <HAL_RCC_OscConfig+0x310>
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d119      	bne.n	80026aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d116      	bne.n	80026aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267c:	4b7c      	ldr	r3, [pc, #496]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x328>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e23f      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b76      	ldr	r3, [pc, #472]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	4973      	ldr	r1, [pc, #460]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a8:	e040      	b.n	800272c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d023      	beq.n	80026fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7ff fab1 	bl	8001c24 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c6:	f7ff faad 	bl	8001c24 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e21d      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d8:	4b65      	ldr	r3, [pc, #404]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b62      	ldr	r3, [pc, #392]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	495f      	ldr	r1, [pc, #380]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	e018      	b.n	800272c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff fa8d 	bl	8001c24 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270e:	f7ff fa89 	bl	8001c24 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1f9      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002720:	4b53      	ldr	r3, [pc, #332]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d03c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01c      	beq.n	800277a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002740:	4b4b      	ldr	r3, [pc, #300]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002746:	4a4a      	ldr	r2, [pc, #296]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7ff fa68 	bl	8001c24 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002758:	f7ff fa64 	bl	8001c24 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1d4      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276a:	4b41      	ldr	r3, [pc, #260]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800276c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ef      	beq.n	8002758 <HAL_RCC_OscConfig+0x3ec>
 8002778:	e01b      	b.n	80027b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277a:	4b3d      	ldr	r3, [pc, #244]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800277c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002780:	4a3b      	ldr	r2, [pc, #236]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7ff fa4b 	bl	8001c24 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002792:	f7ff fa47 	bl	8001c24 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e1b7      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a4:	4b32      	ldr	r3, [pc, #200]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ef      	bne.n	8002792 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80a6 	beq.w	800290c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	4a26      	ldr	r2, [pc, #152]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	@ 0x58
 80027dc:	4b24      	ldr	r3, [pc, #144]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ec:	4b21      	ldr	r3, [pc, #132]	@ (8002874 <HAL_RCC_OscConfig+0x508>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d118      	bne.n	800282a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_RCC_OscConfig+0x508>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_RCC_OscConfig+0x508>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002804:	f7ff fa0e 	bl	8001c24 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7ff fa0a 	bl	8001c24 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e17a      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_RCC_OscConfig+0x508>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d108      	bne.n	8002844 <HAL_RCC_OscConfig+0x4d8>
 8002832:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002838:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002842:	e029      	b.n	8002898 <HAL_RCC_OscConfig+0x52c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b05      	cmp	r3, #5
 800284a:	d115      	bne.n	8002878 <HAL_RCC_OscConfig+0x50c>
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002852:	4a07      	ldr	r2, [pc, #28]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800285c:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	4a03      	ldr	r2, [pc, #12]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800286c:	e014      	b.n	8002898 <HAL_RCC_OscConfig+0x52c>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	4b9c      	ldr	r3, [pc, #624]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	4a9b      	ldr	r2, [pc, #620]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002888:	4b98      	ldr	r3, [pc, #608]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	4a97      	ldr	r2, [pc, #604]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d016      	beq.n	80028ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff f9c0 	bl	8001c24 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a6:	e00a      	b.n	80028be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7ff f9bc 	bl	8001c24 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e12a      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028be:	4b8b      	ldr	r3, [pc, #556]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ed      	beq.n	80028a8 <HAL_RCC_OscConfig+0x53c>
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7ff f9a9 	bl	8001c24 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7ff f9a5 	bl	8001c24 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e113      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028ec:	4b7f      	ldr	r3, [pc, #508]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ed      	bne.n	80028d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fa:	7ffb      	ldrb	r3, [r7, #31]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b7a      	ldr	r3, [pc, #488]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002904:	4a79      	ldr	r2, [pc, #484]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800290a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80fe 	beq.w	8002b12 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	2b02      	cmp	r3, #2
 800291c:	f040 80d0 	bne.w	8002ac0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002920:	4b72      	ldr	r3, [pc, #456]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	429a      	cmp	r2, r3
 8002932:	d130      	bne.n	8002996 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	3b01      	subs	r3, #1
 8002940:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d127      	bne.n	8002996 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002950:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d11f      	bne.n	8002996 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002960:	2a07      	cmp	r2, #7
 8002962:	bf14      	ite	ne
 8002964:	2201      	movne	r2, #1
 8002966:	2200      	moveq	r2, #0
 8002968:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800296a:	4293      	cmp	r3, r2
 800296c:	d113      	bne.n	8002996 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	3b01      	subs	r3, #1
 800297c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d109      	bne.n	8002996 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d06e      	beq.n	8002a74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d069      	beq.n	8002a70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029a8:	4b50      	ldr	r3, [pc, #320]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0ad      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029b8:	4b4c      	ldr	r3, [pc, #304]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a4b      	ldr	r2, [pc, #300]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 80029be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029c4:	f7ff f92e 	bl	8001c24 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029cc:	f7ff f92a 	bl	8001c24 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e09a      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029de:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ea:	4b40      	ldr	r3, [pc, #256]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	4b40      	ldr	r3, [pc, #256]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029fa:	3a01      	subs	r2, #1
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a04:	0212      	lsls	r2, r2, #8
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a0c:	0852      	lsrs	r2, r2, #1
 8002a0e:	3a01      	subs	r2, #1
 8002a10:	0552      	lsls	r2, r2, #21
 8002a12:	4311      	orrs	r1, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a18:	0852      	lsrs	r2, r2, #1
 8002a1a:	3a01      	subs	r2, #1
 8002a1c:	0652      	lsls	r2, r2, #25
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a24:	0912      	lsrs	r2, r2, #4
 8002a26:	0452      	lsls	r2, r2, #17
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	4930      	ldr	r1, [pc, #192]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a30:	4b2e      	ldr	r3, [pc, #184]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2d      	ldr	r2, [pc, #180]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a2a      	ldr	r2, [pc, #168]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a48:	f7ff f8ec 	bl	8001c24 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7ff f8e8 	bl	8001c24 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e058      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a62:	4b22      	ldr	r3, [pc, #136]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a6e:	e050      	b.n	8002b12 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e04f      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a74:	4b1d      	ldr	r3, [pc, #116]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d148      	bne.n	8002b12 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a80:	4b1a      	ldr	r3, [pc, #104]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a19      	ldr	r2, [pc, #100]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a8c:	4b17      	ldr	r3, [pc, #92]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a16      	ldr	r2, [pc, #88]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a98:	f7ff f8c4 	bl	8001c24 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7ff f8c0 	bl	8001c24 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e030      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x734>
 8002abe:	e028      	b.n	8002b12 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d023      	beq.n	8002b0e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a08      	ldr	r2, [pc, #32]	@ (8002aec <HAL_RCC_OscConfig+0x780>)
 8002acc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7ff f8a7 	bl	8001c24 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad8:	e00c      	b.n	8002af4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ada:	f7ff f8a3 	bl	8001c24 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d905      	bls.n	8002af4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e013      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
 8002aec:	40021000 	.word	0x40021000
 8002af0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af4:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_RCC_OscConfig+0x7b0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ec      	bne.n	8002ada <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_OscConfig+0x7b0>)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	4905      	ldr	r1, [pc, #20]	@ (8002b1c <HAL_RCC_OscConfig+0x7b0>)
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_RCC_OscConfig+0x7b4>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60cb      	str	r3, [r1, #12]
 8002b0c:	e001      	b.n	8002b12 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3720      	adds	r7, #32
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	feeefffc 	.word	0xfeeefffc

08002b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0e7      	b.n	8002d08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b75      	ldr	r3, [pc, #468]	@ (8002d10 <HAL_RCC_ClockConfig+0x1ec>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b72      	ldr	r3, [pc, #456]	@ (8002d10 <HAL_RCC_ClockConfig+0x1ec>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4970      	ldr	r1, [pc, #448]	@ (8002d10 <HAL_RCC_ClockConfig+0x1ec>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b6e      	ldr	r3, [pc, #440]	@ (8002d10 <HAL_RCC_ClockConfig+0x1ec>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0cf      	b.n	8002d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d010      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	4b66      	ldr	r3, [pc, #408]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d908      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b63      	ldr	r3, [pc, #396]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4960      	ldr	r1, [pc, #384]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04c      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	4b5a      	ldr	r3, [pc, #360]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d121      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0a6      	b.n	8002d08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc2:	4b54      	ldr	r3, [pc, #336]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e09a      	b.n	8002d08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bda:	4b4e      	ldr	r3, [pc, #312]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e08e      	b.n	8002d08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bea:	4b4a      	ldr	r3, [pc, #296]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e086      	b.n	8002d08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b46      	ldr	r3, [pc, #280]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4943      	ldr	r1, [pc, #268]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7ff f80a 	bl	8001c24 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7ff f806 	bl	8001c24 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e06e      	b.n	8002d08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d010      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b31      	ldr	r3, [pc, #196]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d208      	bcs.n	8002c6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c58:	4b2e      	ldr	r3, [pc, #184]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	492b      	ldr	r1, [pc, #172]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6a:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <HAL_RCC_ClockConfig+0x1ec>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d210      	bcs.n	8002c9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <HAL_RCC_ClockConfig+0x1ec>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 0207 	bic.w	r2, r3, #7
 8002c80:	4923      	ldr	r1, [pc, #140]	@ (8002d10 <HAL_RCC_ClockConfig+0x1ec>)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c88:	4b21      	ldr	r3, [pc, #132]	@ (8002d10 <HAL_RCC_ClockConfig+0x1ec>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e036      	b.n	8002d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4918      	ldr	r1, [pc, #96]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4910      	ldr	r1, [pc, #64]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd8:	f000 f824 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	490b      	ldr	r1, [pc, #44]	@ (8002d18 <HAL_RCC_ClockConfig+0x1f4>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf4:	4a09      	ldr	r2, [pc, #36]	@ (8002d1c <HAL_RCC_ClockConfig+0x1f8>)
 8002cf6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <HAL_RCC_ClockConfig+0x1fc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe ff41 	bl	8001b84 <HAL_InitTick>
 8002d02:	4603      	mov	r3, r0
 8002d04:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d06:	7afb      	ldrb	r3, [r7, #11]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08003d34 	.word	0x08003d34
 8002d1c:	2000013c 	.word	0x2000013c
 8002d20:	20000140 	.word	0x20000140

08002d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	@ 0x24
 8002d28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d32:	4b3e      	ldr	r3, [pc, #248]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x34>
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d121      	bne.n	8002d96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d11e      	bne.n	8002d96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d58:	4b34      	ldr	r3, [pc, #208]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d64:	4b31      	ldr	r3, [pc, #196]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	e005      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d74:	4b2d      	ldr	r3, [pc, #180]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d80:	4a2b      	ldr	r2, [pc, #172]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d102      	bne.n	8002da2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d9c:	4b25      	ldr	r3, [pc, #148]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	e004      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002da8:	4b23      	ldr	r3, [pc, #140]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002daa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d134      	bne.n	8002e1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002db2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0xa6>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d003      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xac>
 8002dc8:	e005      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dca:	4b1a      	ldr	r3, [pc, #104]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dcc:	617b      	str	r3, [r7, #20]
      break;
 8002dce:	e005      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dd0:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dd2:	617b      	str	r3, [r7, #20]
      break;
 8002dd4:	e002      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	617b      	str	r3, [r7, #20]
      break;
 8002dda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ddc:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	3301      	adds	r3, #1
 8002de8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	fb03 f202 	mul.w	r2, r3, r2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e02:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	0e5b      	lsrs	r3, r3, #25
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08003d44 	.word	0x08003d44
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	007a1200 	.word	0x007a1200

08002e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e54:	f7ff fa26 	bl	80022a4 <HAL_PWREx_GetVoltageRange>
 8002e58:	6178      	str	r0, [r7, #20]
 8002e5a:	e014      	b.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	4a24      	ldr	r2, [pc, #144]	@ (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e68:	4b22      	ldr	r3, [pc, #136]	@ (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e74:	f7ff fa16 	bl	80022a4 <HAL_PWREx_GetVoltageRange>
 8002e78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e8c:	d10b      	bne.n	8002ea6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b80      	cmp	r3, #128	@ 0x80
 8002e92:	d919      	bls.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e98:	d902      	bls.n	8002ea0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	e013      	b.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	e010      	b.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b80      	cmp	r3, #128	@ 0x80
 8002eaa:	d902      	bls.n	8002eb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002eac:	2303      	movs	r3, #3
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	e00a      	b.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b80      	cmp	r3, #128	@ 0x80
 8002eb6:	d102      	bne.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eb8:	2302      	movs	r3, #2
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	e004      	b.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b70      	cmp	r3, #112	@ 0x70
 8002ec2:	d101      	bne.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 0207 	bic.w	r2, r3, #7
 8002ed0:	4909      	ldr	r1, [pc, #36]	@ (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ed8:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d001      	beq.n	8002eea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40022000 	.word	0x40022000

08002efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e095      	b.n	800303a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f1e:	d009      	beq.n	8002f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
 8002f26:	e005      	b.n	8002f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe fc4a 	bl	80017e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f74:	d902      	bls.n	8002f7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e002      	b.n	8002f82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f8a:	d007      	beq.n	8002f9c <HAL_SPI_Init+0xa0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f94:	d002      	beq.n	8002f9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fde:	ea42 0103 	orr.w	r1, r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	0c1b      	lsrs	r3, r3, #16
 8002ff8:	f003 0204 	and.w	r2, r3, #4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003018:	ea42 0103 	orr.w	r1, r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b088      	sub	sp, #32
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_SPI_Transmit+0x22>
 8003060:	2302      	movs	r3, #2
 8003062:	e15f      	b.n	8003324 <HAL_SPI_Transmit+0x2e2>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800306c:	f7fe fdda 	bl	8001c24 <HAL_GetTick>
 8003070:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d002      	beq.n	8003088 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003086:	e148      	b.n	800331a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_SPI_Transmit+0x52>
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003098:	e13f      	b.n	800331a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2203      	movs	r2, #3
 800309e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	88fa      	ldrh	r2, [r7, #6]
 80030b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030e4:	d10f      	bne.n	8003106 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003104:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	d007      	beq.n	8003124 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800312c:	d94f      	bls.n	80031ce <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_SPI_Transmit+0xfa>
 8003136:	8afb      	ldrh	r3, [r7, #22]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d142      	bne.n	80031c2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	881a      	ldrh	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	1c9a      	adds	r2, r3, #2
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003160:	e02f      	b.n	80031c2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b02      	cmp	r3, #2
 800316e:	d112      	bne.n	8003196 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	1c9a      	adds	r2, r3, #2
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003194:	e015      	b.n	80031c2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003196:	f7fe fd45 	bl	8001c24 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d803      	bhi.n	80031ae <HAL_SPI_Transmit+0x16c>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031ac:	d102      	bne.n	80031b4 <HAL_SPI_Transmit+0x172>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80031c0:	e0ab      	b.n	800331a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ca      	bne.n	8003162 <HAL_SPI_Transmit+0x120>
 80031cc:	e080      	b.n	80032d0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_SPI_Transmit+0x19a>
 80031d6:	8afb      	ldrh	r3, [r7, #22]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d174      	bne.n	80032c6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d912      	bls.n	800320c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ea:	881a      	ldrh	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f6:	1c9a      	adds	r2, r3, #2
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b02      	subs	r3, #2
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800320a:	e05c      	b.n	80032c6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	330c      	adds	r3, #12
 8003216:	7812      	ldrb	r2, [r2, #0]
 8003218:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003232:	e048      	b.n	80032c6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d12b      	bne.n	800329a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d912      	bls.n	8003272 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	1c9a      	adds	r2, r3, #2
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b02      	subs	r3, #2
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003270:	e029      	b.n	80032c6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	7812      	ldrb	r2, [r2, #0]
 800327e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003298:	e015      	b.n	80032c6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800329a:	f7fe fcc3 	bl	8001c24 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d803      	bhi.n	80032b2 <HAL_SPI_Transmit+0x270>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032b0:	d102      	bne.n	80032b8 <HAL_SPI_Transmit+0x276>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80032c4:	e029      	b.n	800331a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1b1      	bne.n	8003234 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	6839      	ldr	r1, [r7, #0]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fb69 	bl	80039ac <SPI_EndRxTxTransaction>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e003      	b.n	800331a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003322:	7ffb      	ldrb	r3, [r7, #31]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	@ 0x28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800333a:	2301      	movs	r3, #1
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_SPI_TransmitReceive+0x26>
 800334e:	2302      	movs	r3, #2
 8003350:	e20a      	b.n	8003768 <HAL_SPI_TransmitReceive+0x43c>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800335a:	f7fe fc63 	bl	8001c24 <HAL_GetTick>
 800335e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003366:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003372:	887b      	ldrh	r3, [r7, #2]
 8003374:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003376:	7efb      	ldrb	r3, [r7, #27]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d00e      	beq.n	800339a <HAL_SPI_TransmitReceive+0x6e>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003382:	d106      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x66>
 800338c:	7efb      	ldrb	r3, [r7, #27]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003398:	e1e0      	b.n	800375c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_SPI_TransmitReceive+0x80>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_SPI_TransmitReceive+0x80>
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80033b2:	e1d3      	b.n	800375c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d003      	beq.n	80033c8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2205      	movs	r2, #5
 80033c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	887a      	ldrh	r2, [r7, #2]
 80033ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800340a:	d802      	bhi.n	8003412 <HAL_SPI_TransmitReceive+0xe6>
 800340c:	8a3b      	ldrh	r3, [r7, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d908      	bls.n	8003424 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	e007      	b.n	8003434 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343e:	2b40      	cmp	r3, #64	@ 0x40
 8003440:	d007      	beq.n	8003452 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003450:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800345a:	f240 8081 	bls.w	8003560 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_SPI_TransmitReceive+0x140>
 8003466:	8a7b      	ldrh	r3, [r7, #18]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d16d      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	881a      	ldrh	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003490:	e05a      	b.n	8003548 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d11b      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x1ac>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d016      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x1ac>
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d113      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b4:	881a      	ldrh	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	1c9a      	adds	r2, r3, #2
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d11c      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x1f4>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	b292      	uxth	r2, r2
 80034fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	1c9a      	adds	r2, r3, #2
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800351c:	2301      	movs	r3, #1
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003520:	f7fe fb80 	bl	8001c24 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352c:	429a      	cmp	r2, r3
 800352e:	d80b      	bhi.n	8003548 <HAL_SPI_TransmitReceive+0x21c>
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003536:	d007      	beq.n	8003548 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003546:	e109      	b.n	800375c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d19f      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x166>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d199      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x166>
 800355e:	e0e3      	b.n	8003728 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x244>
 8003568:	8a7b      	ldrh	r3, [r7, #18]
 800356a:	2b01      	cmp	r3, #1
 800356c:	f040 80cf 	bne.w	800370e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d912      	bls.n	80035a0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	881a      	ldrh	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358a:	1c9a      	adds	r2, r3, #2
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b02      	subs	r3, #2
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800359e:	e0b6      	b.n	800370e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035c6:	e0a2      	b.n	800370e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d134      	bne.n	8003640 <HAL_SPI_TransmitReceive+0x314>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d02f      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x314>
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d12c      	bne.n	8003640 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d912      	bls.n	8003616 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b02      	subs	r3, #2
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003614:	e012      	b.n	800363c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d148      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x3b4>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d042      	beq.n	80036e0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d923      	bls.n	80036ae <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	b292      	uxth	r2, r2
 8003672:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	1c9a      	adds	r2, r3, #2
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b02      	subs	r3, #2
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d81f      	bhi.n	80036dc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	e016      	b.n	80036dc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f103 020c 	add.w	r2, r3, #12
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036dc:	2301      	movs	r3, #1
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036e0:	f7fe faa0 	bl	8001c24 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d803      	bhi.n	80036f8 <HAL_SPI_TransmitReceive+0x3cc>
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036f6:	d102      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x3d2>
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800370c:	e026      	b.n	800375c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	f47f af57 	bne.w	80035c8 <HAL_SPI_TransmitReceive+0x29c>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	f47f af50 	bne.w	80035c8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f93d 	bl	80039ac <SPI_EndRxTxTransaction>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003752:	e003      	b.n	800375c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003764:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003768:	4618      	mov	r0, r3
 800376a:	3728      	adds	r7, #40	@ 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003780:	f7fe fa50 	bl	8001c24 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	4413      	add	r3, r2
 800378e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003790:	f7fe fa48 	bl	8001c24 <HAL_GetTick>
 8003794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003796:	4b39      	ldr	r3, [pc, #228]	@ (800387c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	015b      	lsls	r3, r3, #5
 800379c:	0d1b      	lsrs	r3, r3, #20
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037a6:	e054      	b.n	8003852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037ae:	d050      	beq.n	8003852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037b0:	f7fe fa38 	bl	8001c24 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d902      	bls.n	80037c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d13d      	bne.n	8003842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037de:	d111      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037e8:	d004      	beq.n	80037f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f2:	d107      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800380c:	d10f      	bne.n	800382e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800382c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e017      	b.n	8003872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3b01      	subs	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	429a      	cmp	r2, r3
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	429a      	cmp	r2, r3
 800386e:	d19b      	bne.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	2000013c 	.word	0x2000013c

08003880 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	@ 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003892:	f7fe f9c7 	bl	8001c24 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	4413      	add	r3, r2
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80038a2:	f7fe f9bf 	bl	8001c24 <HAL_GetTick>
 80038a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038b0:	4b3d      	ldr	r3, [pc, #244]	@ (80039a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	00da      	lsls	r2, r3, #3
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	0d1b      	lsrs	r3, r3, #20
 80038c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80038c8:	e060      	b.n	800398c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80038d0:	d107      	bne.n	80038e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038e8:	d050      	beq.n	800398c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ea:	f7fe f99b 	bl	8001c24 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d902      	bls.n	8003900 <SPI_WaitFifoStateUntilTimeout+0x80>
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d13d      	bne.n	800397c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800390e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003918:	d111      	bne.n	800393e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003922:	d004      	beq.n	800392e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800392c:	d107      	bne.n	800393e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800393c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003946:	d10f      	bne.n	8003968 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003966:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e010      	b.n	800399e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	3b01      	subs	r3, #1
 800398a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d196      	bne.n	80038ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3728      	adds	r7, #40	@ 0x28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2000013c 	.word	0x2000013c

080039ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff ff5b 	bl	8003880 <SPI_WaitFifoStateUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e027      	b.n	8003a30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2200      	movs	r2, #0
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff fec0 	bl	8003770 <SPI_WaitFlagStateUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e014      	b.n	8003a30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff ff34 	bl	8003880 <SPI_WaitFifoStateUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e000      	b.n	8003a30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <malloc>:
 8003a38:	4b02      	ldr	r3, [pc, #8]	@ (8003a44 <malloc+0xc>)
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f000 b82d 	b.w	8003a9c <_malloc_r>
 8003a42:	bf00      	nop
 8003a44:	20000148 	.word	0x20000148

08003a48 <free>:
 8003a48:	4b02      	ldr	r3, [pc, #8]	@ (8003a54 <free+0xc>)
 8003a4a:	4601      	mov	r1, r0
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	f000 b903 	b.w	8003c58 <_free_r>
 8003a52:	bf00      	nop
 8003a54:	20000148 	.word	0x20000148

08003a58 <sbrk_aligned>:
 8003a58:	b570      	push	{r4, r5, r6, lr}
 8003a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8003a98 <sbrk_aligned+0x40>)
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	6831      	ldr	r1, [r6, #0]
 8003a60:	4605      	mov	r5, r0
 8003a62:	b911      	cbnz	r1, 8003a6a <sbrk_aligned+0x12>
 8003a64:	f000 f8ae 	bl	8003bc4 <_sbrk_r>
 8003a68:	6030      	str	r0, [r6, #0]
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f000 f8a9 	bl	8003bc4 <_sbrk_r>
 8003a72:	1c43      	adds	r3, r0, #1
 8003a74:	d103      	bne.n	8003a7e <sbrk_aligned+0x26>
 8003a76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	bd70      	pop	{r4, r5, r6, pc}
 8003a7e:	1cc4      	adds	r4, r0, #3
 8003a80:	f024 0403 	bic.w	r4, r4, #3
 8003a84:	42a0      	cmp	r0, r4
 8003a86:	d0f8      	beq.n	8003a7a <sbrk_aligned+0x22>
 8003a88:	1a21      	subs	r1, r4, r0
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f000 f89a 	bl	8003bc4 <_sbrk_r>
 8003a90:	3001      	adds	r0, #1
 8003a92:	d1f2      	bne.n	8003a7a <sbrk_aligned+0x22>
 8003a94:	e7ef      	b.n	8003a76 <sbrk_aligned+0x1e>
 8003a96:	bf00      	nop
 8003a98:	20000350 	.word	0x20000350

08003a9c <_malloc_r>:
 8003a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aa0:	1ccd      	adds	r5, r1, #3
 8003aa2:	f025 0503 	bic.w	r5, r5, #3
 8003aa6:	3508      	adds	r5, #8
 8003aa8:	2d0c      	cmp	r5, #12
 8003aaa:	bf38      	it	cc
 8003aac:	250c      	movcc	r5, #12
 8003aae:	2d00      	cmp	r5, #0
 8003ab0:	4606      	mov	r6, r0
 8003ab2:	db01      	blt.n	8003ab8 <_malloc_r+0x1c>
 8003ab4:	42a9      	cmp	r1, r5
 8003ab6:	d904      	bls.n	8003ac2 <_malloc_r+0x26>
 8003ab8:	230c      	movs	r3, #12
 8003aba:	6033      	str	r3, [r6, #0]
 8003abc:	2000      	movs	r0, #0
 8003abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b98 <_malloc_r+0xfc>
 8003ac6:	f000 f869 	bl	8003b9c <__malloc_lock>
 8003aca:	f8d8 3000 	ldr.w	r3, [r8]
 8003ace:	461c      	mov	r4, r3
 8003ad0:	bb44      	cbnz	r4, 8003b24 <_malloc_r+0x88>
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	f7ff ffbf 	bl	8003a58 <sbrk_aligned>
 8003ada:	1c43      	adds	r3, r0, #1
 8003adc:	4604      	mov	r4, r0
 8003ade:	d158      	bne.n	8003b92 <_malloc_r+0xf6>
 8003ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8003ae4:	4627      	mov	r7, r4
 8003ae6:	2f00      	cmp	r7, #0
 8003ae8:	d143      	bne.n	8003b72 <_malloc_r+0xd6>
 8003aea:	2c00      	cmp	r4, #0
 8003aec:	d04b      	beq.n	8003b86 <_malloc_r+0xea>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	4639      	mov	r1, r7
 8003af2:	4630      	mov	r0, r6
 8003af4:	eb04 0903 	add.w	r9, r4, r3
 8003af8:	f000 f864 	bl	8003bc4 <_sbrk_r>
 8003afc:	4581      	cmp	r9, r0
 8003afe:	d142      	bne.n	8003b86 <_malloc_r+0xea>
 8003b00:	6821      	ldr	r1, [r4, #0]
 8003b02:	1a6d      	subs	r5, r5, r1
 8003b04:	4629      	mov	r1, r5
 8003b06:	4630      	mov	r0, r6
 8003b08:	f7ff ffa6 	bl	8003a58 <sbrk_aligned>
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d03a      	beq.n	8003b86 <_malloc_r+0xea>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	442b      	add	r3, r5
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	f8d8 3000 	ldr.w	r3, [r8]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	bb62      	cbnz	r2, 8003b78 <_malloc_r+0xdc>
 8003b1e:	f8c8 7000 	str.w	r7, [r8]
 8003b22:	e00f      	b.n	8003b44 <_malloc_r+0xa8>
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	1b52      	subs	r2, r2, r5
 8003b28:	d420      	bmi.n	8003b6c <_malloc_r+0xd0>
 8003b2a:	2a0b      	cmp	r2, #11
 8003b2c:	d917      	bls.n	8003b5e <_malloc_r+0xc2>
 8003b2e:	1961      	adds	r1, r4, r5
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	6025      	str	r5, [r4, #0]
 8003b34:	bf18      	it	ne
 8003b36:	6059      	strne	r1, [r3, #4]
 8003b38:	6863      	ldr	r3, [r4, #4]
 8003b3a:	bf08      	it	eq
 8003b3c:	f8c8 1000 	streq.w	r1, [r8]
 8003b40:	5162      	str	r2, [r4, r5]
 8003b42:	604b      	str	r3, [r1, #4]
 8003b44:	4630      	mov	r0, r6
 8003b46:	f000 f82f 	bl	8003ba8 <__malloc_unlock>
 8003b4a:	f104 000b 	add.w	r0, r4, #11
 8003b4e:	1d23      	adds	r3, r4, #4
 8003b50:	f020 0007 	bic.w	r0, r0, #7
 8003b54:	1ac2      	subs	r2, r0, r3
 8003b56:	bf1c      	itt	ne
 8003b58:	1a1b      	subne	r3, r3, r0
 8003b5a:	50a3      	strne	r3, [r4, r2]
 8003b5c:	e7af      	b.n	8003abe <_malloc_r+0x22>
 8003b5e:	6862      	ldr	r2, [r4, #4]
 8003b60:	42a3      	cmp	r3, r4
 8003b62:	bf0c      	ite	eq
 8003b64:	f8c8 2000 	streq.w	r2, [r8]
 8003b68:	605a      	strne	r2, [r3, #4]
 8003b6a:	e7eb      	b.n	8003b44 <_malloc_r+0xa8>
 8003b6c:	4623      	mov	r3, r4
 8003b6e:	6864      	ldr	r4, [r4, #4]
 8003b70:	e7ae      	b.n	8003ad0 <_malloc_r+0x34>
 8003b72:	463c      	mov	r4, r7
 8003b74:	687f      	ldr	r7, [r7, #4]
 8003b76:	e7b6      	b.n	8003ae6 <_malloc_r+0x4a>
 8003b78:	461a      	mov	r2, r3
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	42a3      	cmp	r3, r4
 8003b7e:	d1fb      	bne.n	8003b78 <_malloc_r+0xdc>
 8003b80:	2300      	movs	r3, #0
 8003b82:	6053      	str	r3, [r2, #4]
 8003b84:	e7de      	b.n	8003b44 <_malloc_r+0xa8>
 8003b86:	230c      	movs	r3, #12
 8003b88:	6033      	str	r3, [r6, #0]
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f000 f80c 	bl	8003ba8 <__malloc_unlock>
 8003b90:	e794      	b.n	8003abc <_malloc_r+0x20>
 8003b92:	6005      	str	r5, [r0, #0]
 8003b94:	e7d6      	b.n	8003b44 <_malloc_r+0xa8>
 8003b96:	bf00      	nop
 8003b98:	20000354 	.word	0x20000354

08003b9c <__malloc_lock>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	@ (8003ba4 <__malloc_lock+0x8>)
 8003b9e:	f000 b84b 	b.w	8003c38 <__retarget_lock_acquire_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	20000490 	.word	0x20000490

08003ba8 <__malloc_unlock>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	@ (8003bb0 <__malloc_unlock+0x8>)
 8003baa:	f000 b846 	b.w	8003c3a <__retarget_lock_release_recursive>
 8003bae:	bf00      	nop
 8003bb0:	20000490 	.word	0x20000490

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <_sbrk_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4d06      	ldr	r5, [pc, #24]	@ (8003be0 <_sbrk_r+0x1c>)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fd fe8a 	bl	80018e8 <_sbrk>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_sbrk_r+0x1a>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_sbrk_r+0x1a>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	20000494 	.word	0x20000494

08003be4 <__errno>:
 8003be4:	4b01      	ldr	r3, [pc, #4]	@ (8003bec <__errno+0x8>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000148 	.word	0x20000148

08003bf0 <__libc_init_array>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8003c28 <__libc_init_array+0x38>)
 8003bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8003c2c <__libc_init_array+0x3c>)
 8003bf6:	1b64      	subs	r4, r4, r5
 8003bf8:	10a4      	asrs	r4, r4, #2
 8003bfa:	2600      	movs	r6, #0
 8003bfc:	42a6      	cmp	r6, r4
 8003bfe:	d109      	bne.n	8003c14 <__libc_init_array+0x24>
 8003c00:	4d0b      	ldr	r5, [pc, #44]	@ (8003c30 <__libc_init_array+0x40>)
 8003c02:	4c0c      	ldr	r4, [pc, #48]	@ (8003c34 <__libc_init_array+0x44>)
 8003c04:	f000 f872 	bl	8003cec <_init>
 8003c08:	1b64      	subs	r4, r4, r5
 8003c0a:	10a4      	asrs	r4, r4, #2
 8003c0c:	2600      	movs	r6, #0
 8003c0e:	42a6      	cmp	r6, r4
 8003c10:	d105      	bne.n	8003c1e <__libc_init_array+0x2e>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c18:	4798      	blx	r3
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7ee      	b.n	8003bfc <__libc_init_array+0xc>
 8003c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c22:	4798      	blx	r3
 8003c24:	3601      	adds	r6, #1
 8003c26:	e7f2      	b.n	8003c0e <__libc_init_array+0x1e>
 8003c28:	08003d74 	.word	0x08003d74
 8003c2c:	08003d74 	.word	0x08003d74
 8003c30:	08003d74 	.word	0x08003d74
 8003c34:	08003d78 	.word	0x08003d78

08003c38 <__retarget_lock_acquire_recursive>:
 8003c38:	4770      	bx	lr

08003c3a <__retarget_lock_release_recursive>:
 8003c3a:	4770      	bx	lr

08003c3c <memcpy>:
 8003c3c:	440a      	add	r2, r1
 8003c3e:	4291      	cmp	r1, r2
 8003c40:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003c44:	d100      	bne.n	8003c48 <memcpy+0xc>
 8003c46:	4770      	bx	lr
 8003c48:	b510      	push	{r4, lr}
 8003c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c52:	4291      	cmp	r1, r2
 8003c54:	d1f9      	bne.n	8003c4a <memcpy+0xe>
 8003c56:	bd10      	pop	{r4, pc}

08003c58 <_free_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4605      	mov	r5, r0
 8003c5c:	2900      	cmp	r1, #0
 8003c5e:	d041      	beq.n	8003ce4 <_free_r+0x8c>
 8003c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c64:	1f0c      	subs	r4, r1, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bfb8      	it	lt
 8003c6a:	18e4      	addlt	r4, r4, r3
 8003c6c:	f7ff ff96 	bl	8003b9c <__malloc_lock>
 8003c70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce8 <_free_r+0x90>)
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	b933      	cbnz	r3, 8003c84 <_free_r+0x2c>
 8003c76:	6063      	str	r3, [r4, #4]
 8003c78:	6014      	str	r4, [r2, #0]
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c80:	f7ff bf92 	b.w	8003ba8 <__malloc_unlock>
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d908      	bls.n	8003c9a <_free_r+0x42>
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	1821      	adds	r1, r4, r0
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf01      	itttt	eq
 8003c90:	6819      	ldreq	r1, [r3, #0]
 8003c92:	685b      	ldreq	r3, [r3, #4]
 8003c94:	1809      	addeq	r1, r1, r0
 8003c96:	6021      	streq	r1, [r4, #0]
 8003c98:	e7ed      	b.n	8003c76 <_free_r+0x1e>
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b10b      	cbz	r3, 8003ca4 <_free_r+0x4c>
 8003ca0:	42a3      	cmp	r3, r4
 8003ca2:	d9fa      	bls.n	8003c9a <_free_r+0x42>
 8003ca4:	6811      	ldr	r1, [r2, #0]
 8003ca6:	1850      	adds	r0, r2, r1
 8003ca8:	42a0      	cmp	r0, r4
 8003caa:	d10b      	bne.n	8003cc4 <_free_r+0x6c>
 8003cac:	6820      	ldr	r0, [r4, #0]
 8003cae:	4401      	add	r1, r0
 8003cb0:	1850      	adds	r0, r2, r1
 8003cb2:	4283      	cmp	r3, r0
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	d1e0      	bne.n	8003c7a <_free_r+0x22>
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	6053      	str	r3, [r2, #4]
 8003cbe:	4408      	add	r0, r1
 8003cc0:	6010      	str	r0, [r2, #0]
 8003cc2:	e7da      	b.n	8003c7a <_free_r+0x22>
 8003cc4:	d902      	bls.n	8003ccc <_free_r+0x74>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	602b      	str	r3, [r5, #0]
 8003cca:	e7d6      	b.n	8003c7a <_free_r+0x22>
 8003ccc:	6820      	ldr	r0, [r4, #0]
 8003cce:	1821      	adds	r1, r4, r0
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	bf04      	itt	eq
 8003cd4:	6819      	ldreq	r1, [r3, #0]
 8003cd6:	685b      	ldreq	r3, [r3, #4]
 8003cd8:	6063      	str	r3, [r4, #4]
 8003cda:	bf04      	itt	eq
 8003cdc:	1809      	addeq	r1, r1, r0
 8003cde:	6021      	streq	r1, [r4, #0]
 8003ce0:	6054      	str	r4, [r2, #4]
 8003ce2:	e7ca      	b.n	8003c7a <_free_r+0x22>
 8003ce4:	bd38      	pop	{r3, r4, r5, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000354 	.word	0x20000354

08003cec <_init>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr

08003cf8 <_fini>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr
