
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a90  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003c18  08003c18  00004c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c68  08003c68  00005188  2**0
                  CONTENTS
  4 .ARM          00000000  08003c68  08003c68  00005188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c68  08003c68  00005188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c68  08003c68  00004c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c6c  08003c6c  00004c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08003c70  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000188  08003df8  00005188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08003df8  00005384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5f4  00000000  00000000  000051b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f20  00000000  00000000  0000f7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  000116d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000727  00000000  00000000  00012078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277a0  00000000  00000000  0001279f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af89  00000000  00000000  00039f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f15e9  00000000  00000000  00044ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001364b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  001364f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00138e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c00 	.word	0x08003c00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	08003c00 	.word	0x08003c00

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2uiz>:
 8000540:	004a      	lsls	r2, r1, #1
 8000542:	d211      	bcs.n	8000568 <__aeabi_d2uiz+0x28>
 8000544:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000548:	d211      	bcs.n	800056e <__aeabi_d2uiz+0x2e>
 800054a:	d50d      	bpl.n	8000568 <__aeabi_d2uiz+0x28>
 800054c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000550:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000554:	d40e      	bmi.n	8000574 <__aeabi_d2uiz+0x34>
 8000556:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800055a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800055e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000562:	fa23 f002 	lsr.w	r0, r3, r2
 8000566:	4770      	bx	lr
 8000568:	f04f 0000 	mov.w	r0, #0
 800056c:	4770      	bx	lr
 800056e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000572:	d102      	bne.n	800057a <__aeabi_d2uiz+0x3a>
 8000574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000578:	4770      	bx	lr
 800057a:	f04f 0000 	mov.w	r0, #0
 800057e:	4770      	bx	lr

08000580 <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000586:	2006      	movs	r0, #6
 8000588:	f003 f9e0 	bl	800394c <malloc>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b70      	ldr	r3, [pc, #448]	@ (8000754 <ble_init+0x1d4>)
 8000592:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000594:	bf00      	nop
 8000596:	4b70      	ldr	r3, [pc, #448]	@ (8000758 <ble_init+0x1d8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0fb      	beq.n	8000596 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800059e:	4b6d      	ldr	r3, [pc, #436]	@ (8000754 <ble_init+0x1d4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2106      	movs	r1, #6
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f905 	bl	80007b4 <fetchBleEvent>
 80005aa:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d111      	bne.n	80005d6 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80005b2:	4b68      	ldr	r3, [pc, #416]	@ (8000754 <ble_init+0x1d4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2206      	movs	r2, #6
 80005b8:	4968      	ldr	r1, [pc, #416]	@ (800075c <ble_init+0x1dc>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f984 	bl	80008c8 <checkEventResp>
 80005c0:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d106      	bne.n	80005d6 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80005c8:	4b65      	ldr	r3, [pc, #404]	@ (8000760 <ble_init+0x1e0>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	4b63      	ldr	r3, [pc, #396]	@ (8000760 <ble_init+0x1e0>)
 80005d4:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f001 faba 	bl	8001b50 <HAL_Delay>
	free(rxEvent);
 80005dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000754 <ble_init+0x1d4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 f9bb 	bl	800395c <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80005e6:	2300      	movs	r3, #0
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2307      	movs	r3, #7
 80005ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000764 <ble_init+0x1e4>)
 80005ee:	2104      	movs	r1, #4
 80005f0:	485d      	ldr	r0, [pc, #372]	@ (8000768 <ble_init+0x1e8>)
 80005f2:	f000 fa5b 	bl	8000aac <BLE_command>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 80005fc:	4b58      	ldr	r3, [pc, #352]	@ (8000760 <ble_init+0x1e0>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b56      	ldr	r3, [pc, #344]	@ (8000760 <ble_init+0x1e0>)
 8000608:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800060a:	4b52      	ldr	r3, [pc, #328]	@ (8000754 <ble_init+0x1d4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f003 f9a4 	bl	800395c <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000614:	2303      	movs	r3, #3
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2307      	movs	r3, #7
 800061a:	4a54      	ldr	r2, [pc, #336]	@ (800076c <ble_init+0x1ec>)
 800061c:	2107      	movs	r1, #7
 800061e:	4854      	ldr	r0, [pc, #336]	@ (8000770 <ble_init+0x1f0>)
 8000620:	f000 fa44 	bl	8000aac <BLE_command>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d11b      	bne.n	8000662 <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 800062a:	4b4d      	ldr	r3, [pc, #308]	@ (8000760 <ble_init+0x1e0>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b4a      	ldr	r3, [pc, #296]	@ (8000760 <ble_init+0x1e0>)
 8000636:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000638:	4b46      	ldr	r3, [pc, #280]	@ (8000754 <ble_init+0x1d4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3307      	adds	r3, #7
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b4c      	ldr	r3, [pc, #304]	@ (8000774 <ble_init+0x1f4>)
 8000644:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000646:	4b43      	ldr	r3, [pc, #268]	@ (8000754 <ble_init+0x1d4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3309      	adds	r3, #9
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b49      	ldr	r3, [pc, #292]	@ (8000778 <ble_init+0x1f8>)
 8000652:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000654:	4b3f      	ldr	r3, [pc, #252]	@ (8000754 <ble_init+0x1d4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	330b      	adds	r3, #11
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b47      	ldr	r3, [pc, #284]	@ (800077c <ble_init+0x1fc>)
 8000660:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000662:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <ble_init+0x1d4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f978 	bl	800395c <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800066c:	4b44      	ldr	r3, [pc, #272]	@ (8000780 <ble_init+0x200>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2307      	movs	r3, #7
 8000672:	2200      	movs	r2, #0
 8000674:	4940      	ldr	r1, [pc, #256]	@ (8000778 <ble_init+0x1f8>)
 8000676:	483f      	ldr	r0, [pc, #252]	@ (8000774 <ble_init+0x1f4>)
 8000678:	f000 fade 	bl	8000c38 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 800067c:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <ble_init+0x1e0>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b36      	ldr	r3, [pc, #216]	@ (8000760 <ble_init+0x1e0>)
 8000688:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 800068a:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <ble_init+0x1d4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f964 	bl	800395c <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2307      	movs	r3, #7
 800069a:	4a3a      	ldr	r2, [pc, #232]	@ (8000784 <ble_init+0x204>)
 800069c:	2110      	movs	r1, #16
 800069e:	483a      	ldr	r0, [pc, #232]	@ (8000788 <ble_init+0x208>)
 80006a0:	f000 fa04 	bl	8000aac <BLE_command>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d106      	bne.n	80006b8 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000760 <ble_init+0x1e0>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <ble_init+0x1e0>)
 80006b6:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <ble_init+0x1d4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 f94d 	bl	800395c <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80006c2:	2300      	movs	r3, #0
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2307      	movs	r3, #7
 80006c8:	4a30      	ldr	r2, [pc, #192]	@ (800078c <ble_init+0x20c>)
 80006ca:	2106      	movs	r1, #6
 80006cc:	4830      	ldr	r0, [pc, #192]	@ (8000790 <ble_init+0x210>)
 80006ce:	f000 f9ed 	bl	8000aac <BLE_command>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d106      	bne.n	80006e6 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80006d8:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <ble_init+0x1e0>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <ble_init+0x1e0>)
 80006e4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <ble_init+0x1d4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 f936 	bl	800395c <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80006f0:	2300      	movs	r3, #0
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2307      	movs	r3, #7
 80006f6:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <ble_init+0x214>)
 80006f8:	2124      	movs	r1, #36	@ 0x24
 80006fa:	4827      	ldr	r0, [pc, #156]	@ (8000798 <ble_init+0x218>)
 80006fc:	f000 f9d6 	bl	8000aac <BLE_command>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d106      	bne.n	8000714 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <ble_init+0x1e0>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <ble_init+0x1e0>)
 8000712:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <ble_init+0x1d4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f003 f91f 	bl	800395c <free>

	//This will start the advertisment,
	setConnectable();
 800071e:	f000 f945 	bl	80009ac <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000722:	2207      	movs	r2, #7
 8000724:	491d      	ldr	r1, [pc, #116]	@ (800079c <ble_init+0x21c>)
 8000726:	481e      	ldr	r0, [pc, #120]	@ (80007a0 <ble_init+0x220>)
 8000728:	f000 fa0c 	bl	8000b44 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800072c:	2310      	movs	r3, #16
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2314      	movs	r3, #20
 8000732:	4a1a      	ldr	r2, [pc, #104]	@ (800079c <ble_init+0x21c>)
 8000734:	491b      	ldr	r1, [pc, #108]	@ (80007a4 <ble_init+0x224>)
 8000736:	481c      	ldr	r0, [pc, #112]	@ (80007a8 <ble_init+0x228>)
 8000738:	f000 fa3c 	bl	8000bb4 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800073c:	2304      	movs	r3, #4
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2314      	movs	r3, #20
 8000742:	4a16      	ldr	r2, [pc, #88]	@ (800079c <ble_init+0x21c>)
 8000744:	4919      	ldr	r1, [pc, #100]	@ (80007ac <ble_init+0x22c>)
 8000746:	481a      	ldr	r0, [pc, #104]	@ (80007b0 <ble_init+0x230>)
 8000748:	f000 fa34 	bl	8000bb4 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 800074c:	bf00      	nop
}
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200001bc 	.word	0x200001bc
 8000758:	200001cc 	.word	0x200001cc
 800075c:	20000000 	.word	0x20000000
 8000760:	200001ba 	.word	0x200001ba
 8000764:	2000000c 	.word	0x2000000c
 8000768:	20000008 	.word	0x20000008
 800076c:	2000001c 	.word	0x2000001c
 8000770:	20000014 	.word	0x20000014
 8000774:	200001a4 	.word	0x200001a4
 8000778:	200001a8 	.word	0x200001a8
 800077c:	200001ac 	.word	0x200001ac
 8000780:	200000e8 	.word	0x200000e8
 8000784:	20000034 	.word	0x20000034
 8000788:	20000024 	.word	0x20000024
 800078c:	20000044 	.word	0x20000044
 8000790:	2000003c 	.word	0x2000003c
 8000794:	20000070 	.word	0x20000070
 8000798:	2000004c 	.word	0x2000004c
 800079c:	200001b0 	.word	0x200001b0
 80007a0:	200000f0 	.word	0x200000f0
 80007a4:	200001b8 	.word	0x200001b8
 80007a8:	20000110 	.word	0x20000110
 80007ac:	200001b4 	.word	0x200001b4
 80007b0:	20000100 	.word	0x20000100

080007b4 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80007be:	4a3d      	ldr	r2, [pc, #244]	@ (80008b4 <fetchBleEvent+0x100>)
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007c8:	6018      	str	r0, [r3, #0]
 80007ca:	3304      	adds	r3, #4
 80007cc:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80007ce:	2140      	movs	r1, #64	@ 0x40
 80007d0:	4839      	ldr	r0, [pc, #228]	@ (80008b8 <fetchBleEvent+0x104>)
 80007d2:	f001 fc9d 	bl	8002110 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d065      	beq.n	80008a8 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 80007dc:	2005      	movs	r0, #5
 80007de:	f001 f9b7 	bl	8001b50 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e8:	4834      	ldr	r0, [pc, #208]	@ (80008bc <fetchBleEvent+0x108>)
 80007ea:	f001 fca9 	bl	8002140 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80007ee:	f107 0210 	add.w	r2, r7, #16
 80007f2:	f107 0118 	add.w	r1, r7, #24
 80007f6:	2301      	movs	r3, #1
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2305      	movs	r3, #5
 80007fc:	4830      	ldr	r0, [pc, #192]	@ (80008c0 <fetchBleEvent+0x10c>)
 80007fe:	f002 fd1f 	bl	8003240 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000808:	482c      	ldr	r0, [pc, #176]	@ (80008bc <fetchBleEvent+0x108>)
 800080a:	f001 fc99 	bl	8002140 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f001 f99e 	bl	8001b50 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081a:	4828      	ldr	r0, [pc, #160]	@ (80008bc <fetchBleEvent+0x108>)
 800081c:	f001 fc90 	bl	8002140 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000820:	f107 0210 	add.w	r2, r7, #16
 8000824:	f107 0118 	add.w	r1, r7, #24
 8000828:	2301      	movs	r3, #1
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2305      	movs	r3, #5
 800082e:	4824      	ldr	r0, [pc, #144]	@ (80008c0 <fetchBleEvent+0x10c>)
 8000830:	f002 fd06 	bl	8003240 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	461a      	mov	r2, r3
 8000838:	7d3b      	ldrb	r3, [r7, #20]
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	4313      	orrs	r3, r2
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 8000840:	23ff      	movs	r3, #255	@ 0xff
 8000842:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	dd01      	ble.n	8000850 <fetchBleEvent+0x9c>
	  dataSize=size;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 8000850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000852:	2b00      	cmp	r3, #0
 8000854:	dd1f      	ble.n	8000896 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	e00d      	b.n	8000878 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	441a      	add	r2, r3
 8000862:	f107 010f 	add.w	r1, r7, #15
 8000866:	2301      	movs	r3, #1
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	4814      	ldr	r0, [pc, #80]	@ (80008c0 <fetchBleEvent+0x10c>)
 800086e:	f002 fce7 	bl	8003240 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	3301      	adds	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
 8000878:	6a3a      	ldr	r2, [r7, #32]
 800087a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087c:	429a      	cmp	r2, r3
 800087e:	dbed      	blt.n	800085c <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000886:	480d      	ldr	r0, [pc, #52]	@ (80008bc <fetchBleEvent+0x108>)
 8000888:	f001 fc5a 	bl	8002140 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <fetchBleEvent+0x110>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000892:	2300      	movs	r3, #0
 8000894:	e00a      	b.n	80008ac <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089c:	4807      	ldr	r0, [pc, #28]	@ (80008bc <fetchBleEvent+0x108>)
 800089e:	f001 fc4f 	bl	8002140 <HAL_GPIO_WritePin>
        return -1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008a6:	e001      	b.n	80008ac <fetchBleEvent+0xf8>
  }else{
  return -2;
 80008a8:	f06f 0301 	mvn.w	r3, #1
  }
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	08003c18 	.word	0x08003c18
 80008b8:	48001000 	.word	0x48001000
 80008bc:	48000c00 	.word	0x48000c00
 80008c0:	200001d0 	.word	0x200001d0
 80008c4:	200001cc 	.word	0x200001cc

080008c8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	int j=0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e00f      	b.n	80008fe <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	440b      	add	r3, r1
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d002      	beq.n	80008f8 <checkEventResp+0x30>
			return -1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008f6:	e007      	b.n	8000908 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	3301      	adds	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	dbeb      	blt.n	80008de <checkEventResp+0x16>
		}
	}

return BLE_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af02      	add	r7, sp, #8
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800091e:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <sendCommand+0x88>)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000928:	6018      	str	r0, [r3, #0]
 800092a:	3304      	adds	r3, #4
 800092c:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000934:	481a      	ldr	r0, [pc, #104]	@ (80009a0 <sendCommand+0x8c>)
 8000936:	f001 fc03 	bl	8002140 <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800093a:	f107 0208 	add.w	r2, r7, #8
 800093e:	f107 0110 	add.w	r1, r7, #16
 8000942:	2301      	movs	r3, #1
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2305      	movs	r3, #5
 8000948:	4816      	ldr	r0, [pc, #88]	@ (80009a4 <sendCommand+0x90>)
 800094a:	f002 fc79 	bl	8003240 <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800094e:	7abb      	ldrb	r3, [r7, #10]
 8000950:	021b      	lsls	r3, r3, #8
 8000952:	7a7a      	ldrb	r2, [r7, #9]
 8000954:	4313      	orrs	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	db09      	blt.n	8000974 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b29a      	uxth	r2, r3
 8000964:	2301      	movs	r3, #1
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <sendCommand+0x90>)
 800096a:	f002 faf4 	bl	8002f56 <HAL_SPI_Transmit>
		result=0;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	e002      	b.n	800097a <sendCommand+0x66>
	  }else{
		result=-1;
 8000974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000978:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000980:	4807      	ldr	r0, [pc, #28]	@ (80009a0 <sendCommand+0x8c>)
 8000982:	f001 fbdd 	bl	8002140 <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <sendCommand+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1cd      	bne.n	800092e <sendCommand+0x1a>

}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	08003c20 	.word	0x08003c20
 80009a0:	48000c00 	.word	0x48000c00
 80009a4:	200001d0 	.word	0x200001d0
 80009a8:	200001cc 	.word	0x200001cc

080009ac <setConnectable>:
	  }else{
		  //something bad is happening if I am here
	  }
}

void setConnectable(){
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 80009b2:	200c      	movs	r0, #12
 80009b4:	f002 ffca 	bl	800394c <malloc>
 80009b8:	4603      	mov	r3, r0
 80009ba:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4a36      	ldr	r2, [pc, #216]	@ (8000a98 <setConnectable+0xec>)
 80009c0:	6810      	ldr	r0, [r2, #0]
 80009c2:	6018      	str	r0, [r3, #0]
 80009c4:	8891      	ldrh	r1, [r2, #4]
 80009c6:	7992      	ldrb	r2, [r2, #6]
 80009c8:	8099      	strh	r1, [r3, #4]
 80009ca:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3308      	adds	r3, #8
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3309      	adds	r3, #9
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	330a      	adds	r3, #10
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	330b      	adds	r3, #11
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3307      	adds	r3, #7
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80009f4:	4b29      	ldr	r3, [pc, #164]	@ (8000a9c <setConnectable+0xf0>)
 80009f6:	2208      	movs	r2, #8
 80009f8:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80009fa:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <setConnectable+0xf0>)
 80009fc:	2215      	movs	r2, #21
 80009fe:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000a00:	2019      	movs	r0, #25
 8000a02:	f002 ffa3 	bl	800394c <malloc>
 8000a06:	4603      	mov	r3, r0
 8000a08:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <setConnectable+0xf0>)
 8000a0e:	461c      	mov	r4, r3
 8000a10:	4613      	mov	r3, r2
 8000a12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a14:	6020      	str	r0, [r4, #0]
 8000a16:	6061      	str	r1, [r4, #4]
 8000a18:	60a2      	str	r2, [r4, #8]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	330d      	adds	r3, #13
 8000a22:	220c      	movs	r2, #12
 8000a24:	68f9      	ldr	r1, [r7, #12]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 f892 	bl	8003b50 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000a2c:	2119      	movs	r1, #25
 8000a2e:	68b8      	ldr	r0, [r7, #8]
 8000a30:	f7ff ff70 	bl	8000914 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000a34:	2007      	movs	r0, #7
 8000a36:	f002 ff89 	bl	800394c <malloc>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 8000a3e:	bf00      	nop
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <setConnectable+0xf4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0fb      	beq.n	8000a40 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 8000a48:	2107      	movs	r1, #7
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff feb2 	bl	80007b4 <fetchBleEvent>
 8000a50:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10f      	bne.n	8000a78 <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000a58:	2207      	movs	r2, #7
 8000a5a:	4912      	ldr	r1, [pc, #72]	@ (8000aa4 <setConnectable+0xf8>)
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff33 	bl	80008c8 <checkEventResp>
 8000a62:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d106      	bne.n	8000a78 <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <setConnectable+0xfc>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <setConnectable+0xfc>)
 8000a76:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f002 ff6f 	bl	800395c <free>
	   free(discoverableCommand);
 8000a7e:	68b8      	ldr	r0, [r7, #8]
 8000a80:	f002 ff6c 	bl	800395c <free>
	   free(localname);
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f002 ff69 	bl	800395c <free>
	   HAL_Delay(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f001 f860 	bl	8001b50 <HAL_Delay>
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	200000e8 	.word	0x200000e8
 8000a9c:	20000078 	.word	0x20000078
 8000aa0:	200001cc 	.word	0x200001cc
 8000aa4:	20000088 	.word	0x20000088
 8000aa8:	200001ba 	.word	0x200001ba

08000aac <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 8000aba:	68b9      	ldr	r1, [r7, #8]
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff ff29 	bl	8000914 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	005a      	lsls	r2, r3, #1
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 ff3e 	bl	800394c <malloc>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <BLE_command+0x90>)
 8000ad6:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000adc:	e007      	b.n	8000aee <BLE_command+0x42>
		   contatore++;
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000aea:	4293      	cmp	r3, r2
 8000aec:	dc07      	bgt.n	8000afe <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000aee:	2140      	movs	r1, #64	@ 0x40
 8000af0:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <BLE_command+0x94>)
 8000af2:	f001 fb0d 	bl	8002110 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f0      	beq.n	8000ade <BLE_command+0x32>
 8000afc:	e000      	b.n	8000b00 <BLE_command+0x54>
			   break;
 8000afe:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <BLE_command+0x90>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	005a      	lsls	r2, r3, #1
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f7ff fe51 	bl	80007b4 <fetchBleEvent>
 8000b12:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d107      	bne.n	8000b2a <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <BLE_command+0x90>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fed0 	bl	80008c8 <checkEventResp>
 8000b28:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 f810 	bl	8001b50 <HAL_Delay>


	return response;
 8000b30:	697b      	ldr	r3, [r7, #20]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200001bc 	.word	0x200001bc
 8000b40:	48001000 	.word	0x48001000

08000b44 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <addService+0x60>)
 8000b52:	2210      	movs	r2, #16
 8000b54:	68f9      	ldr	r1, [r7, #12]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fffa 	bl	8003b50 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <addService+0x64>)
 8000b62:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000b64:	2301      	movs	r3, #1
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2307      	movs	r3, #7
 8000b6a:	4a10      	ldr	r2, [pc, #64]	@ (8000bac <addService+0x68>)
 8000b6c:	2117      	movs	r1, #23
 8000b6e:	480e      	ldr	r0, [pc, #56]	@ (8000ba8 <addService+0x64>)
 8000b70:	f7ff ff9c 	bl	8000aac <BLE_command>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10a      	bne.n	8000b90 <addService+0x4c>
		   handle[0]=rxEvent[7];
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <addService+0x6c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	79da      	ldrb	r2, [r3, #7]
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000b84:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <addService+0x6c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	7a12      	ldrb	r2, [r2, #8]
 8000b8e:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <addService+0x6c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 fee1 	bl	800395c <free>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000095 	.word	0x20000095
 8000ba8:	20000090 	.word	0x20000090
 8000bac:	200000a8 	.word	0x200000a8
 8000bb0:	200001bc 	.word	0x200001bc

08000bb4 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <addCharacteristic+0x74>)
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	68f9      	ldr	r1, [r7, #12]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 ffc1 	bl	8003b50 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <addCharacteristic+0x78>)
 8000bd4:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	785a      	ldrb	r2, [r3, #1]
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <addCharacteristic+0x78>)
 8000bdc:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000bde:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <addCharacteristic+0x78>)
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000be4:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <addCharacteristic+0x78>)
 8000be6:	7e3b      	ldrb	r3, [r7, #24]
 8000be8:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000bea:	2301      	movs	r3, #1
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2307      	movs	r3, #7
 8000bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <addCharacteristic+0x7c>)
 8000bf2:	211e      	movs	r1, #30
 8000bf4:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <addCharacteristic+0x78>)
 8000bf6:	f7ff ff59 	bl	8000aac <BLE_command>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10a      	bne.n	8000c16 <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <addCharacteristic+0x80>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	79da      	ldrb	r2, [r3, #7]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <addCharacteristic+0x80>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	3301      	adds	r3, #1
 8000c12:	7a12      	ldrb	r2, [r2, #8]
 8000c14:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <addCharacteristic+0x80>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fe9e 	bl	800395c <free>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000b7 	.word	0x200000b7
 8000c2c:	200000b0 	.word	0x200000b0
 8000c30:	200000d0 	.word	0x200000d0
 8000c34:	200001bc 	.word	0x200001bc

08000c38 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	3306      	adds	r3, #6
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <updateCharValue+0x9c>)
 8000c50:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	781a      	ldrb	r2, [r3, #0]
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <updateCharValue+0x9c>)
 8000c58:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	785a      	ldrb	r2, [r3, #1]
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <updateCharValue+0x9c>)
 8000c60:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <updateCharValue+0x9c>)
 8000c68:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	785a      	ldrb	r2, [r3, #1]
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <updateCharValue+0x9c>)
 8000c70:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <updateCharValue+0x9c>)
 8000c78:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <updateCharValue+0x9c>)
 8000c80:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	330a      	adds	r3, #10
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fe60 	bl	800394c <malloc>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000c90:	220a      	movs	r2, #10
 8000c92:	4910      	ldr	r1, [pc, #64]	@ (8000cd4 <updateCharValue+0x9c>)
 8000c94:	6978      	ldr	r0, [r7, #20]
 8000c96:	f002 ff5b 	bl	8003b50 <memcpy>
	memcpy(commandComplete+10,data,size);
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	330a      	adds	r3, #10
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	6a39      	ldr	r1, [r7, #32]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 ff54 	bl	8003b50 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f103 010a 	add.w	r1, r3, #10
 8000cae:	2300      	movs	r3, #0
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <updateCharValue+0xa0>)
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff fef8 	bl	8000aac <BLE_command>

	free(commandComplete);
 8000cbc:	6978      	ldr	r0, [r7, #20]
 8000cbe:	f002 fe4d 	bl	800395c <free>
	free(rxEvent);
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <updateCharValue+0xa4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 fe48 	bl	800395c <free>
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000d8 	.word	0x200000d8
 8000cd8:	200000d0 	.word	0x200000d0
 8000cdc:	200001bc 	.word	0x200001bc

08000ce0 <i2c_init>:
#include <stdint.h>
#include <stm32l475xx.h>
#include <stdio.h>
#include "i2c.h"

void i2c_init() {
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;   // Enable I2C2 clock
 8000ce4:	4b41      	ldr	r3, [pc, #260]	@ (8000dec <i2c_init+0x10c>)
 8000ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce8:	4a40      	ldr	r2, [pc, #256]	@ (8000dec <i2c_init+0x10c>)
 8000cea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cee:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;   //enable GPIOB clock
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dec <i2c_init+0x10c>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	4a3d      	ldr	r2, [pc, #244]	@ (8000dec <i2c_init+0x10c>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c

	I2C2->CR1 &= ~I2C_CR1_PE; // Disable the I2C2 peripheral for configuration
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8000df0 <i2c_init+0x110>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a3b      	ldr	r2, [pc, #236]	@ (8000df0 <i2c_init+0x110>)
 8000d02:	f023 0301 	bic.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]
	//repeat above for PB11 pin

	GPIOB->MODER &= ~(3 << (10 * 2));  // Clear PB10 mode
 8000d08:	4b3a      	ldr	r3, [pc, #232]	@ (8000df4 <i2c_init+0x114>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a39      	ldr	r2, [pc, #228]	@ (8000df4 <i2c_init+0x114>)
 8000d0e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000d12:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2 << (10 * 2));   // Set PB10 to Alternate Function mode (10)
 8000d14:	4b37      	ldr	r3, [pc, #220]	@ (8000df4 <i2c_init+0x114>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a36      	ldr	r2, [pc, #216]	@ (8000df4 <i2c_init+0x114>)
 8000d1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d1e:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(3 << (11 * 2));  // Clear PB11 mode
 8000d20:	4b34      	ldr	r3, [pc, #208]	@ (8000df4 <i2c_init+0x114>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a33      	ldr	r2, [pc, #204]	@ (8000df4 <i2c_init+0x114>)
 8000d26:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d2a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2 << (11 * 2)); 	//Set PB11 to Alternate Function mode (10)
 8000d2c:	4b31      	ldr	r3, [pc, #196]	@ (8000df4 <i2c_init+0x114>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a30      	ldr	r2, [pc, #192]	@ (8000df4 <i2c_init+0x114>)
 8000d32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d36:	6013      	str	r3, [r2, #0]

	 // setting to Open-Drain mode for PB10 and PB11

	GPIOB->OTYPER |= (1 << 10) | (1 << 11);   //set bit 10 and 11 to 1, which sets to open drain
 8000d38:	4b2e      	ldr	r3, [pc, #184]	@ (8000df4 <i2c_init+0x114>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000df4 <i2c_init+0x114>)
 8000d3e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000d42:	6053      	str	r3, [r2, #4]

	GPIOB->PUPDR &= ~(3 << (10 * 2));  // Clear PB10 PUPDR
 8000d44:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <i2c_init+0x114>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	4a2a      	ldr	r2, [pc, #168]	@ (8000df4 <i2c_init+0x114>)
 8000d4a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000d4e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1 << (10 * 2));   // Set PB10 as Pull-up (01)
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <i2c_init+0x114>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	4a27      	ldr	r2, [pc, #156]	@ (8000df4 <i2c_init+0x114>)
 8000d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d5a:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR &= ~(3 << (11 * 2));  // Clear PB11 PUPDR
 8000d5c:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <i2c_init+0x114>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	4a24      	ldr	r2, [pc, #144]	@ (8000df4 <i2c_init+0x114>)
 8000d62:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d66:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1 << (11 * 2));    //Set PB11 as Pull-up (01)
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <i2c_init+0x114>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <i2c_init+0x114>)
 8000d6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d72:	60d3      	str	r3, [r2, #12]




	GPIOB->AFR[1] &= ~(0xF << GPIO_AFRH_AFSEL10_Pos);  //clear AF bits
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <i2c_init+0x114>)
 8000d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d78:	4a1e      	ldr	r2, [pc, #120]	@ (8000df4 <i2c_init+0x114>)
 8000d7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d7e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(0xF << GPIO_AFRH_AFSEL11_Pos);
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <i2c_init+0x114>)
 8000d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d84:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <i2c_init+0x114>)
 8000d86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000d8a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0x4 << GPIO_AFRH_AFSEL10_Pos) | (0x4 << GPIO_AFRH_AFSEL11_Pos);
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <i2c_init+0x114>)
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d90:	4a18      	ldr	r2, [pc, #96]	@ (8000df4 <i2c_init+0x114>)
 8000d92:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000d96:	6253      	str	r3, [r2, #36]	@ 0x24



	I2C2->TIMINGR &= ~(I2C_TIMINGR_SCLL | I2C_TIMINGR_SCLH | I2C_TIMINGR_SCLDEL | I2C_TIMINGR_SDADEL | I2C_TIMINGR_PRESC);
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <i2c_init+0x110>)
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <i2c_init+0x110>)
 8000d9e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8000da2:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR |= (0 << I2C_TIMINGR_PRESC_Pos);

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SCLL;
	I2C2->TIMINGR |= (0x13 << I2C_TIMINGR_SCLL_Pos);
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <i2c_init+0x110>)
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	4a11      	ldr	r2, [pc, #68]	@ (8000df0 <i2c_init+0x110>)
 8000daa:	f043 0313 	orr.w	r3, r3, #19
 8000dae:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SCLH;
	I2C2->TIMINGR |= (0xF << I2C_TIMINGR_SCLH_Pos);
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <i2c_init+0x110>)
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	4a0e      	ldr	r2, [pc, #56]	@ (8000df0 <i2c_init+0x110>)
 8000db6:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000dba:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SDADEL;
	I2C2->TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL_Pos);
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <i2c_init+0x110>)
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <i2c_init+0x110>)
 8000dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc6:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SCLDEL;
	I2C2->TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL_Pos);
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <i2c_init+0x110>)
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	4a08      	ldr	r2, [pc, #32]	@ (8000df0 <i2c_init+0x110>)
 8000dce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dd2:	6113      	str	r3, [r2, #16]




	// Enable I2C2 peripheral
	I2C2->CR1 |= I2C_CR1_PE; // Enable the I2C2 peripheral
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <i2c_init+0x110>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <i2c_init+0x110>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]



}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40005800 	.word	0x40005800
 8000df4:	48000400 	.word	0x48000400

08000df8 <i2c_transaction>:
uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len){
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	603a      	str	r2, [r7, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	460b      	mov	r3, r1
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	717b      	strb	r3, [r7, #5]

	while (I2C2->ISR & I2C_ISR_BUSY);
 8000e0e:	bf00      	nop
 8000e10:	4b51      	ldr	r3, [pc, #324]	@ (8000f58 <i2c_transaction+0x160>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f9      	bne.n	8000e10 <i2c_transaction+0x18>



	I2C2->CR2 &= ~I2C_CR2_NBYTES;
 8000e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8000f58 <i2c_transaction+0x160>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a4d      	ldr	r2, [pc, #308]	@ (8000f58 <i2c_transaction+0x160>)
 8000e22:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000e26:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_SADD;
 8000e28:	4b4b      	ldr	r3, [pc, #300]	@ (8000f58 <i2c_transaction+0x160>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8000f58 <i2c_transaction+0x160>)
 8000e2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000e32:	f023 0303 	bic.w	r3, r3, #3
 8000e36:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_START;
 8000e38:	4b47      	ldr	r3, [pc, #284]	@ (8000f58 <i2c_transaction+0x160>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4a46      	ldr	r2, [pc, #280]	@ (8000f58 <i2c_transaction+0x160>)
 8000e3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000e42:	6053      	str	r3, [r2, #4]


	if (dir == 0) {  // WRITE OPERATION
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d13c      	bne.n	8000ec4 <i2c_transaction+0xcc>


		//I2C2->CR2 = 0;
		I2C2->CR2 |= (address << 1);
 8000e4a:	4b43      	ldr	r3, [pc, #268]	@ (8000f58 <i2c_transaction+0x160>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4941      	ldr	r1, [pc, #260]	@ (8000f58 <i2c_transaction+0x160>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
		I2C2->CR2 |= (0 << I2C_CR2_RD_WRN_Pos);
 8000e58:	4b3f      	ldr	r3, [pc, #252]	@ (8000f58 <i2c_transaction+0x160>)
 8000e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f58 <i2c_transaction+0x160>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos);
 8000e60:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <i2c_transaction+0x160>)
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	797b      	ldrb	r3, [r7, #5]
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	493b      	ldr	r1, [pc, #236]	@ (8000f58 <i2c_transaction+0x160>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	604b      	str	r3, [r1, #4]

		I2C2->CR2 |= I2C_CR2_START;
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f58 <i2c_transaction+0x160>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	4a39      	ldr	r2, [pc, #228]	@ (8000f58 <i2c_transaction+0x160>)
 8000e74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e78:	6053      	str	r3, [r2, #4]

		for (uint8_t i = 0; i < len; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e015      	b.n	8000eac <i2c_transaction+0xb4>

			while ((I2C2->ISR & I2C_ISR_NACKF) || (!(I2C2->ISR & I2C_ISR_TXIS)));  // Wait until TX buffer is empty
 8000e80:	bf00      	nop
 8000e82:	4b35      	ldr	r3, [pc, #212]	@ (8000f58 <i2c_transaction+0x160>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f9      	bne.n	8000e82 <i2c_transaction+0x8a>
 8000e8e:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <i2c_transaction+0x160>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f3      	beq.n	8000e82 <i2c_transaction+0x8a>

			I2C2->TXDR = data[i] & 0xFF;  // Send data byte
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f58 <i2c_transaction+0x160>)
 8000ea4:	629a      	str	r2, [r3, #40]	@ 0x28
		for (uint8_t i = 0; i < len; i++) {
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	7bfa      	ldrb	r2, [r7, #15]
 8000eae:	797b      	ldrb	r3, [r7, #5]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d3e5      	bcc.n	8000e80 <i2c_transaction+0x88>
			//printf("data ith elem w %x \n", data[i]);
		}
		while (!(I2C2->ISR & I2C_ISR_TC));  // Wait until transfer is complete
 8000eb4:	bf00      	nop
 8000eb6:	4b28      	ldr	r3, [pc, #160]	@ (8000f58 <i2c_transaction+0x160>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f9      	beq.n	8000eb6 <i2c_transaction+0xbe>
 8000ec2:	e038      	b.n	8000f36 <i2c_transaction+0x13e>

	else {  // READ OPERATION



		I2C2->CR2 |= (address << 1);
 8000ec4:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <i2c_transaction+0x160>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4922      	ldr	r1, [pc, #136]	@ (8000f58 <i2c_transaction+0x160>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	604b      	str	r3, [r1, #4]
		I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos);
 8000ed2:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <i2c_transaction+0x160>)
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	797b      	ldrb	r3, [r7, #5]
 8000ed8:	041b      	lsls	r3, r3, #16
 8000eda:	491f      	ldr	r1, [pc, #124]	@ (8000f58 <i2c_transaction+0x160>)
 8000edc:	4313      	orrs	r3, r2
 8000ede:	604b      	str	r3, [r1, #4]
		I2C2->CR2 |= (1 << I2C_CR2_RD_WRN_Pos);
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <i2c_transaction+0x160>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f58 <i2c_transaction+0x160>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eea:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <i2c_transaction+0x160>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <i2c_transaction+0x160>)
 8000ef2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ef6:	6053      	str	r3, [r2, #4]

		for (uint8_t i = 0; i < len; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73bb      	strb	r3, [r7, #14]
 8000efc:	e010      	b.n	8000f20 <i2c_transaction+0x128>
			while (!(I2C2->ISR & I2C_ISR_RXNE));  // Wait until RX buffer is full
 8000efe:	bf00      	nop
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <i2c_transaction+0x160>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f9      	beq.n	8000f00 <i2c_transaction+0x108>
			data[i] = I2C2->RXDR & 0xFF;  // Read data byte
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <i2c_transaction+0x160>)
 8000f0e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) {
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	73bb      	strb	r3, [r7, #14]
 8000f20:	7bba      	ldrb	r2, [r7, #14]
 8000f22:	797b      	ldrb	r3, [r7, #5]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3ea      	bcc.n	8000efe <i2c_transaction+0x106>
			//printf("data ith elem r %x \n", data[i]);
		}
		while (!(I2C2->ISR & I2C_ISR_TC));  // Wait until transfer is complete
 8000f28:	bf00      	nop
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <i2c_transaction+0x160>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f9      	beq.n	8000f2a <i2c_transaction+0x132>

	}

	I2C2->CR2 |= I2C_CR2_STOP;
 8000f36:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <i2c_transaction+0x160>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <i2c_transaction+0x160>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f40:	6053      	str	r3, [r2, #4]
	I2C2->CR2 = 0x0000;
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <i2c_transaction+0x160>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]

	return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40005800 	.word	0x40005800

08000f5c <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	/* Configure PA5 as an output by clearing all bits and setting the mode */

	//setting clock thing
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000f60:	4b32      	ldr	r3, [pc, #200]	@ (800102c <leds_init+0xd0>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f64:	4a31      	ldr	r2, [pc, #196]	@ (800102c <leds_init+0xd0>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <leds_init+0xd0>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f70:	4a2e      	ldr	r2, [pc, #184]	@ (800102c <leds_init+0xd0>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000f78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f82:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000f86:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000f88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f96:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000f98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fa2:	f023 0320 	bic.w	r3, r3, #32
 8000fa6:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000fa8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fb2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000fb6:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use very high speed mode */
	GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000fb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fc2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000fc6:	6093      	str	r3, [r2, #8]

	/* Turn off the LED */
	GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000fc8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fd2:	f023 0320 	bic.w	r3, r3, #32
 8000fd6:	6153      	str	r3, [r2, #20]



	GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <leds_init+0xd4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <leds_init+0xd4>)
 8000fde:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000fe2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <leds_init+0xd4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a11      	ldr	r2, [pc, #68]	@ (8001030 <leds_init+0xd4>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <leds_init+0xd4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <leds_init+0xd4>)
 8000ff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ffa:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <leds_init+0xd4>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <leds_init+0xd4>)
 8001002:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001006:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use very high speed mode */
	GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <leds_init+0xd4>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <leds_init+0xd4>)
 800100e:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8001012:	6093      	str	r3, [r2, #8]

	/* Turn off the LED */
	GPIOB->ODR &= ~GPIO_ODR_OD14;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <leds_init+0xd4>)
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <leds_init+0xd4>)
 800101a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800101e:	6153      	str	r3, [r2, #20]


}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	48000400 	.word	0x48000400

08001034 <leds_set>:

void leds_set(uint8_t led)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  // TODO implement this
	//passing in 0(0b00) means that both are off, 1(0b01) means led1 is on, 2(0b10) means led2 is on, 3(0b11) means both are on
	if (led == 0) {
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10d      	bne.n	8001060 <leds_set+0x2c>
		//turn off both


		/* Turn off the LED */
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 8001044:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800104e:	f023 0320 	bic.w	r3, r3, #32
 8001052:	6153      	str	r3, [r2, #20]

		//turn off led2 (PB14)
		GPIOB->ODR |= ~GPIO_ODR_OD14;
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <leds_set+0xa0>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	4a1e      	ldr	r2, [pc, #120]	@ (80010d4 <leds_set+0xa0>)
 800105a:	f463 4380 	orn	r3, r3, #16384	@ 0x4000
 800105e:	6153      	str	r3, [r2, #20]
	}
	if (led == 1) {
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d10d      	bne.n	8001082 <leds_set+0x4e>
		//turn on led1 (PA5)


		/* Turn on the LED */
		GPIOA->ODR |= GPIO_ODR_OD5;
 8001066:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001070:	f043 0320 	orr.w	r3, r3, #32
 8001074:	6153      	str	r3, [r2, #20]

		//turn off led2 (PB14)
		GPIOB->ODR &= ~GPIO_ODR_OD14;
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <leds_set+0xa0>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a16      	ldr	r2, [pc, #88]	@ (80010d4 <leds_set+0xa0>)
 800107c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001080:	6153      	str	r3, [r2, #20]
	}

	if (led == 2) {
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d10d      	bne.n	80010a4 <leds_set+0x70>
		//turn on led2 (PB14)


		/* Turn off the LED1 */
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 8001088:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001092:	f023 0320 	bic.w	r3, r3, #32
 8001096:	6153      	str	r3, [r2, #20]

		//turn on led2 (PB14)
		GPIOB->ODR |= GPIO_ODR_OD14;
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <leds_set+0xa0>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <leds_set+0xa0>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a2:	6153      	str	r3, [r2, #20]
	}

	if (led == 3) {
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d10d      	bne.n	80010c6 <leds_set+0x92>
		//turn on both


		/* Turn on the LED1 */
		GPIOA->ODR |= GPIO_ODR_OD5;
 80010aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	6153      	str	r3, [r2, #20]

		//turn on led2 (PB14)
		GPIOB->ODR |= GPIO_ODR_OD14;
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <leds_set+0xa0>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <leds_set+0xa0>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6153      	str	r3, [r2, #20]
	}

}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	48000400 	.word	0x48000400

080010d8 <lsm6dsl_init>:
#include "lsm6dsl.h"
#include "i2c.h"
#include <stdio.h>
#include <stm32l475xx.h>

void lsm6dsl_init() {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0



	//write to CTRL_XL register
	uint8_t CTRL1_XL_read;
	uint8_t CTRL1_XL = 0x10;   //address of ctrlXL
 80010de:	2310      	movs	r3, #16
 80010e0:	71fb      	strb	r3, [r7, #7]
	uint8_t CTRL1_XL_DATA[2] = {0x10, 0x60};
 80010e2:	f246 0310 	movw	r3, #24592	@ 0x6010
 80010e6:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(0x6A, 0, CTRL1_XL_DATA, 2);  //write
 80010e8:	1d3a      	adds	r2, r7, #4
 80010ea:	2302      	movs	r3, #2
 80010ec:	2100      	movs	r1, #0
 80010ee:	206a      	movs	r0, #106	@ 0x6a
 80010f0:	f7ff fe82 	bl	8000df8 <i2c_transaction>


	//writing to INT1 CTRL register in the LSM6DSR to configure register (address 0x6A, dir = 0, data= 0x0D01, len =8)
	//printf("works here too\n");
	uint8_t INT1_CTRL_read;
	uint8_t INT1_CTRL = 0x0D;
 80010f4:	230d      	movs	r3, #13
 80010f6:	71bb      	strb	r3, [r7, #6]
	uint8_t INT1_CTRL_DATA[2] = {0x0D, 0x01};
 80010f8:	f240 130d 	movw	r3, #269	@ 0x10d
 80010fc:	803b      	strh	r3, [r7, #0]
	i2c_transaction(0x6A, 0, INT1_CTRL_DATA, 2);
 80010fe:	463a      	mov	r2, r7
 8001100:	2302      	movs	r3, #2
 8001102:	2100      	movs	r1, #0
 8001104:	206a      	movs	r0, #106	@ 0x6a
 8001106:	f7ff fe77 	bl	8000df8 <i2c_transaction>

	//printf("INT1_CTRL is %x \n", INT1_CTRL_read);
	//i2c_transaction(0x6A, 0, &INT1_CTRL, 1);

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 8001112:	b580      	push	{r7, lr}
 8001114:	b088      	sub	sp, #32
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]

	//for x low and x high
	uint8_t reg_addyXL = 0x28;   //register address (x low)
 800111e:	2328      	movs	r3, #40	@ 0x28
 8001120:	77fb      	strb	r3, [r7, #31]
	uint8_t dataXL;   //declaring data array for the transaction function to read stuff into
	//repeat above for all register addresses

	i2c_transaction(0x6A, 0, &reg_addyXL, 1);
 8001122:	f107 021f 	add.w	r2, r7, #31
 8001126:	2301      	movs	r3, #1
 8001128:	2100      	movs	r1, #0
 800112a:	206a      	movs	r0, #106	@ 0x6a
 800112c:	f7ff fe64 	bl	8000df8 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataXL, 1);   //read in the 1 byte from x low
 8001130:	f107 021e 	add.w	r2, r7, #30
 8001134:	2301      	movs	r3, #1
 8001136:	2101      	movs	r1, #1
 8001138:	206a      	movs	r0, #106	@ 0x6a
 800113a:	f7ff fe5d 	bl	8000df8 <i2c_transaction>

	uint8_t reg_addyXH = 0x29;   //register address (x high)
 800113e:	2329      	movs	r3, #41	@ 0x29
 8001140:	777b      	strb	r3, [r7, #29]
	uint8_t dataXH;   //declaring data array for the transaction function to read stuff into


	i2c_transaction(0x6A, 0, &reg_addyXH, 1);
 8001142:	f107 021d 	add.w	r2, r7, #29
 8001146:	2301      	movs	r3, #1
 8001148:	2100      	movs	r1, #0
 800114a:	206a      	movs	r0, #106	@ 0x6a
 800114c:	f7ff fe54 	bl	8000df8 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataXH, 1);   //read in the 1 byte from x high
 8001150:	f107 021c 	add.w	r2, r7, #28
 8001154:	2301      	movs	r3, #1
 8001156:	2101      	movs	r1, #1
 8001158:	206a      	movs	r0, #106	@ 0x6a
 800115a:	f7ff fe4d 	bl	8000df8 <i2c_transaction>


	//for y low and y high

	uint8_t reg_addyYL = 0x2A;   //register address (y low)
 800115e:	232a      	movs	r3, #42	@ 0x2a
 8001160:	76fb      	strb	r3, [r7, #27]
	uint8_t dataYL;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyYL, 1);
 8001162:	f107 021b 	add.w	r2, r7, #27
 8001166:	2301      	movs	r3, #1
 8001168:	2100      	movs	r1, #0
 800116a:	206a      	movs	r0, #106	@ 0x6a
 800116c:	f7ff fe44 	bl	8000df8 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataYL, 1);   //read in the 1 byte from y low
 8001170:	f107 021a 	add.w	r2, r7, #26
 8001174:	2301      	movs	r3, #1
 8001176:	2101      	movs	r1, #1
 8001178:	206a      	movs	r0, #106	@ 0x6a
 800117a:	f7ff fe3d 	bl	8000df8 <i2c_transaction>


	uint8_t reg_addyYH = 0x2B;   //register address (y high)
 800117e:	232b      	movs	r3, #43	@ 0x2b
 8001180:	767b      	strb	r3, [r7, #25]
	uint8_t dataYH;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyYH, 1);
 8001182:	f107 0219 	add.w	r2, r7, #25
 8001186:	2301      	movs	r3, #1
 8001188:	2100      	movs	r1, #0
 800118a:	206a      	movs	r0, #106	@ 0x6a
 800118c:	f7ff fe34 	bl	8000df8 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataYH, 1);   //read in the 1 byte from y high
 8001190:	f107 0218 	add.w	r2, r7, #24
 8001194:	2301      	movs	r3, #1
 8001196:	2101      	movs	r1, #1
 8001198:	206a      	movs	r0, #106	@ 0x6a
 800119a:	f7ff fe2d 	bl	8000df8 <i2c_transaction>


	//for z low and z high
	uint8_t reg_addyZL = 0x2C;   //register address   (z low)
 800119e:	232c      	movs	r3, #44	@ 0x2c
 80011a0:	75fb      	strb	r3, [r7, #23]
	uint8_t dataZL;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyZL, 1);
 80011a2:	f107 0217 	add.w	r2, r7, #23
 80011a6:	2301      	movs	r3, #1
 80011a8:	2100      	movs	r1, #0
 80011aa:	206a      	movs	r0, #106	@ 0x6a
 80011ac:	f7ff fe24 	bl	8000df8 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataZL, 1);   //read in the 1 byte from z low
 80011b0:	f107 0216 	add.w	r2, r7, #22
 80011b4:	2301      	movs	r3, #1
 80011b6:	2101      	movs	r1, #1
 80011b8:	206a      	movs	r0, #106	@ 0x6a
 80011ba:	f7ff fe1d 	bl	8000df8 <i2c_transaction>


	uint8_t reg_addyZH = 0x2D;   //register address (z high)
 80011be:	232d      	movs	r3, #45	@ 0x2d
 80011c0:	757b      	strb	r3, [r7, #21]
	uint8_t dataZH;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyZH, 1);
 80011c2:	f107 0215 	add.w	r2, r7, #21
 80011c6:	2301      	movs	r3, #1
 80011c8:	2100      	movs	r1, #0
 80011ca:	206a      	movs	r0, #106	@ 0x6a
 80011cc:	f7ff fe14 	bl	8000df8 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataZH, 1);   //read in the 1 byte from z high
 80011d0:	f107 0214 	add.w	r2, r7, #20
 80011d4:	2301      	movs	r3, #1
 80011d6:	2101      	movs	r1, #1
 80011d8:	206a      	movs	r0, #106	@ 0x6a
 80011da:	f7ff fe0d 	bl	8000df8 <i2c_transaction>



	*x = (dataXH << 8 | dataXL);
 80011de:	7f3b      	ldrb	r3, [r7, #28]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7fbb      	ldrb	r3, [r7, #30]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	801a      	strh	r2, [r3, #0]
	*y = (dataYH << 8 | dataYL);
 80011f0:	7e3b      	ldrb	r3, [r7, #24]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7ebb      	ldrb	r3, [r7, #26]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	801a      	strh	r2, [r3, #0]
	*z = (dataZH << 8 | dataZL);
 8001202:	7d3b      	ldrb	r3, [r7, #20]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	7dbb      	ldrb	r3, [r7, #22]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	801a      	strh	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001222:	f000 fc20 	bl	8001a66 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001226:	f000 f887 	bl	8001338 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f000 f909 	bl	8001440 <MX_GPIO_Init>
  MX_SPI3_Init();
 800122e:	f000 f8c9 	bl	80013c4 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123c:	f000 ff80 	bl	8002140 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001240:	200a      	movs	r0, #10
 8001242:	f000 fc85 	bl	8001b50 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800124c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001250:	f000 ff76 	bl	8002140 <HAL_GPIO_WritePin>

  ble_init();
 8001254:	f7ff f994 	bl	8000580 <ble_init>

  leds_init();
 8001258:	f7ff fe80 	bl	8000f5c <leds_init>
	timer_init(TIM2);
 800125c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001260:	f000 fb76 	bl	8001950 <timer_init>
	i2c_init();
 8001264:	f7ff fd3c 	bl	8000ce0 <i2c_init>
	lsm6dsl_init();
 8001268:	f7ff ff36 	bl	80010d8 <lsm6dsl_init>

  HAL_Delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f000 fc6f 	bl	8001b50 <HAL_Delay>

  uint8_t nonDiscoverable = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	//put lost detection algorithm here
	//poll continuously the values of the output registers.

	// Loop forever
	int16_t prev_x = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t prev_y = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t prev_z = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	847b      	strh	r3, [r7, #34]	@ 0x22
	for(;;) {
		int16_t x;
		int16_t y;
		int16_t z;
		lsm6dsl_read_xyz(&x,&y,&z);
 8001284:	f107 021a 	add.w	r2, r7, #26
 8001288:	f107 011c 	add.w	r1, r7, #28
 800128c:	f107 031e 	add.w	r3, r7, #30
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff3e 	bl	8001112 <lsm6dsl_read_xyz>

		if(!(prev_x == 0 && prev_y == 0 && prev_z == 0)) {
 8001296:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <main+0x92>
 800129e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <main+0x92>
 80012a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d036      	beq.n	800131c <main+0x100>
			if (abs(x - prev_x) >= threshold || abs(y - prev_y) >= threshold || abs(z - prev_z) >= threshold) {  //it is moving
 80012ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012b2:	461a      	mov	r2, r3
 80012b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012be:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012c2:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <main+0x110>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	da1b      	bge.n	8001302 <main+0xe6>
 80012ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012ce:	461a      	mov	r2, r3
 80012d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012da:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012de:	4b13      	ldr	r3, [pc, #76]	@ (800132c <main+0x110>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	da0d      	bge.n	8001302 <main+0xe6>
 80012e6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012ea:	461a      	mov	r2, r3
 80012ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012f6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <main+0x110>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	db09      	blt.n	8001316 <main+0xfa>
				lostFlag = 0;   //it is not lost
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <main+0x114>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
				startTimer = 0;   //stop the 1min timer since its not lost
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <main+0x118>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
				leds_set(0);   //reset leds to off whenever it switches from lost to not lost
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fe90 	bl	8001034 <leds_set>
 8001314:	e002      	b.n	800131c <main+0x100>
			}
			else {  //it moved less than the threshold, so we say its lost
				startTimer = 1;
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <main+0x118>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
			}
		}
		prev_x = x;   //set prev to be equal to the current x
 800131c:	8bfb      	ldrh	r3, [r7, #30]
 800131e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		prev_y = y;
 8001320:	8bbb      	ldrh	r3, [r7, #28]
 8001322:	84bb      	strh	r3, [r7, #36]	@ 0x24
		prev_z = z;
 8001324:	8b7b      	ldrh	r3, [r7, #26]
 8001326:	847b      	strh	r3, [r7, #34]	@ 0x22
	for(;;) {
 8001328:	e7ac      	b.n	8001284 <main+0x68>
 800132a:	bf00      	nop
 800132c:	20000124 	.word	0x20000124
 8001330:	200001c4 	.word	0x200001c4
 8001334:	200001c8 	.word	0x200001c8

08001338 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b096      	sub	sp, #88	@ 0x58
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2244      	movs	r2, #68	@ 0x44
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fbbe 	bl	8003ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800135a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800135e:	f000 ff39 	bl	80021d4 <HAL_PWREx_ControlVoltageScaling>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001368:	f000 f902 	bl	8001570 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800136c:	2310      	movs	r3, #16
 800136e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001378:	2370      	movs	r3, #112	@ 0x70
 800137a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800137c:	2300      	movs	r3, #0
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4618      	mov	r0, r3
 8001386:	f000 ff7b 	bl	8002280 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001390:	f000 f8ee 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fb43 	bl	8002a38 <HAL_RCC_ClockConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013b8:	f000 f8da 	bl	8001570 <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3758      	adds	r7, #88	@ 0x58
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <MX_SPI3_Init+0x74>)
 80013ca:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <MX_SPI3_Init+0x78>)
 80013cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <MX_SPI3_Init+0x74>)
 80013d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <MX_SPI3_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013dc:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <MX_SPI3_Init+0x74>)
 80013de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <MX_SPI3_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <MX_SPI3_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_SPI3_Init+0x74>)
 80013f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <MX_SPI3_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_SPI3_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_SPI3_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <MX_SPI3_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_SPI3_Init+0x74>)
 8001412:	2207      	movs	r2, #7
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <MX_SPI3_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_SPI3_Init+0x74>)
 800141e:	2208      	movs	r2, #8
 8001420:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_SPI3_Init+0x74>)
 8001424:	f001 fcf4 	bl	8002e10 <HAL_SPI_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800142e:	f000 f89f 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200001d0 	.word	0x200001d0
 800143c:	40003c00 	.word	0x40003c00

08001440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	@ 0x28
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001456:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <MX_GPIO_Init+0x124>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a42      	ldr	r2, [pc, #264]	@ (8001564 <MX_GPIO_Init+0x124>)
 800145c:	f043 0310 	orr.w	r3, r3, #16
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <MX_GPIO_Init+0x124>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b3d      	ldr	r3, [pc, #244]	@ (8001564 <MX_GPIO_Init+0x124>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a3c      	ldr	r2, [pc, #240]	@ (8001564 <MX_GPIO_Init+0x124>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b3a      	ldr	r3, [pc, #232]	@ (8001564 <MX_GPIO_Init+0x124>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <MX_GPIO_Init+0x124>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a36      	ldr	r2, [pc, #216]	@ (8001564 <MX_GPIO_Init+0x124>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <MX_GPIO_Init+0x124>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <MX_GPIO_Init+0x124>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a30      	ldr	r2, [pc, #192]	@ (8001564 <MX_GPIO_Init+0x124>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <MX_GPIO_Init+0x124>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <MX_GPIO_Init+0x124>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001564 <MX_GPIO_Init+0x124>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c2:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <MX_GPIO_Init+0x124>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2120      	movs	r1, #32
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d6:	f000 fe33 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e0:	4821      	ldr	r0, [pc, #132]	@ (8001568 <MX_GPIO_Init+0x128>)
 80014e2:	f000 fe2d 	bl	8002140 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f0:	f000 fe26 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80014f4:	2340      	movs	r3, #64	@ 0x40
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4818      	ldr	r0, [pc, #96]	@ (800156c <MX_GPIO_Init+0x12c>)
 800150a:	f000 fc57 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800150e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152a:	f000 fc47 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800152e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4808      	ldr	r0, [pc, #32]	@ (8001568 <MX_GPIO_Init+0x128>)
 8001548:	f000 fc38 	bl	8001dbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2017      	movs	r0, #23
 8001552:	f000 fbfc 	bl	8001d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001556:	2017      	movs	r0, #23
 8001558:	f000 fc15 	bl	8001d86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	@ 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	48000c00 	.word	0x48000c00
 800156c:	48001000 	.word	0x48001000

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <Error_Handler+0x8>

0800157c <TIM2_IRQHandler>:
  }
  /* USER CODE END Error_Handler_Debug */
}


void TIM2_IRQHandler() {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

	  // Check if the interrupt was caused by the update event
	if (TIM2->SR & TIM_SR_UIF) {
 8001582:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <TIM2_IRQHandler+0x24>
		//Clear the update interrupt flag
		TIM2->SR &= ~TIM_SR_UIF;
 8001590:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6113      	str	r3, [r2, #16]

	/*have a counter that counts up every time we enter interrupt when its lost.
	 * Enters interrupt 20 times per second (20hz), so counterup = 1200 means its been 1 min
	 */

	if(startTimer == 1) {
 80015a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001698 <TIM2_IRQHandler+0x11c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <TIM2_IRQHandler+0x38>
		counterup = counterup + 1;  //only start counting when the thing isn't moving
 80015a8:	4b3c      	ldr	r3, [pc, #240]	@ (800169c <TIM2_IRQHandler+0x120>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a3b      	ldr	r2, [pc, #236]	@ (800169c <TIM2_IRQHandler+0x120>)
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e002      	b.n	80015ba <TIM2_IRQHandler+0x3e>
	}
	else {
		counterup = 0;
 80015b4:	4b39      	ldr	r3, [pc, #228]	@ (800169c <TIM2_IRQHandler+0x120>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
	}

	if (counterup >= 1200) {
 80015ba:	4b38      	ldr	r3, [pc, #224]	@ (800169c <TIM2_IRQHandler+0x120>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80015c2:	db64      	blt.n	800168e <TIM2_IRQHandler+0x112>
		lostFlag = 1;   //it is lost
 80015c4:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <TIM2_IRQHandler+0x124>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
		if(preamble != 0) {
 80015ca:	4b36      	ldr	r3, [pc, #216]	@ (80016a4 <TIM2_IRQHandler+0x128>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d011      	beq.n	80015f8 <TIM2_IRQHandler+0x7c>
			uint8_t bitmask1 = preamble;
 80015d4:	4b33      	ldr	r3, [pc, #204]	@ (80016a4 <TIM2_IRQHandler+0x128>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	70fb      	strb	r3, [r7, #3]
			//push the left 2 bits all the way to the right
			//so if we have 10011001 as preamble, then I push the leftmost 2 bits all the way to the right to get 00000010
			//then I call leds_set using those 2 bits
			bitmask1 >>= 6;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	70fb      	strb	r3, [r7, #3]
			leds_set(bitmask1);         //turn on the leds based on the 2 bits that I just pushed over
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fd26 	bl	8001034 <leds_set>
			//next I shift the preamble left by 2 bits so that I can repeat with the next 2 bits
			//so if I have preamble as 10011001, I end up with 01100100
			preamble <<= 2;        //left shift by 2 so i can read the next 2 bits
 80015e8:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <TIM2_IRQHandler+0x128>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b2c      	ldr	r3, [pc, #176]	@ (80016a4 <TIM2_IRQHandler+0x128>)
 80015f4:	701a      	strb	r2, [r3, #0]
			ID = 7663;      //Phils ID
			numMinutes = (uint8_t)(floor(counterup/1200));
			//every 1200 counts is 1min, floor function to make sure its always an integer
		}
	}
}
 80015f6:	e04a      	b.n	800168e <TIM2_IRQHandler+0x112>
		else if (ID != 0) {
 80015f8:	4b2b      	ldr	r3, [pc, #172]	@ (80016a8 <TIM2_IRQHandler+0x12c>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d012      	beq.n	8001628 <TIM2_IRQHandler+0xac>
			uint16_t bitmask2 = ID;
 8001602:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <TIM2_IRQHandler+0x12c>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	80bb      	strh	r3, [r7, #4]
			bitmask2 >>= 14;       //push leftmost 2 bits all the way to the right
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	0b9b      	lsrs	r3, r3, #14
 800160c:	80bb      	strh	r3, [r7, #4]
			leds_set(bitmask2);      //call leds_set on the 2 bits
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd0e 	bl	8001034 <leds_set>
			ID <<= 2;      //shift left by 2 bits to read the next 2 bits
 8001618:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <TIM2_IRQHandler+0x12c>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <TIM2_IRQHandler+0x12c>)
 8001624:	801a      	strh	r2, [r3, #0]
}
 8001626:	e032      	b.n	800168e <TIM2_IRQHandler+0x112>
		else if (numMinutes != 0) {
 8001628:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <TIM2_IRQHandler+0x130>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d011      	beq.n	8001656 <TIM2_IRQHandler+0xda>
			uint8_t minutesLost = numMinutes;
 8001632:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <TIM2_IRQHandler+0x130>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
			minutesLost >>= 6;
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	099b      	lsrs	r3, r3, #6
 800163c:	71fb      	strb	r3, [r7, #7]
			leds_set(minutesLost);         //turn on the leds based on the 2 bits that I just pushed over
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fcf7 	bl	8001034 <leds_set>
			numMinutes <<= 2;        //left shift by 2 so i can read the next 2 bits
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <TIM2_IRQHandler+0x130>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <TIM2_IRQHandler+0x130>)
 8001652:	701a      	strb	r2, [r3, #0]
}
 8001654:	e01b      	b.n	800168e <TIM2_IRQHandler+0x112>
			preamble = 0x99;    //preamble in hex
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <TIM2_IRQHandler+0x128>)
 8001658:	2299      	movs	r2, #153	@ 0x99
 800165a:	701a      	strb	r2, [r3, #0]
			ID = 7663;      //Phils ID
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <TIM2_IRQHandler+0x12c>)
 800165e:	f641 52ef 	movw	r2, #7663	@ 0x1def
 8001662:	801a      	strh	r2, [r3, #0]
			numMinutes = (uint8_t)(floor(counterup/1200));
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <TIM2_IRQHandler+0x120>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a11      	ldr	r2, [pc, #68]	@ (80016b0 <TIM2_IRQHandler+0x134>)
 800166a:	fb82 1203 	smull	r1, r2, r2, r3
 800166e:	11d2      	asrs	r2, r2, #7
 8001670:	17db      	asrs	r3, r3, #31
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe fef9 	bl	800046c <__aeabi_i2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7fe ff5d 	bl	8000540 <__aeabi_d2uiz>
 8001686:	4603      	mov	r3, r0
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <TIM2_IRQHandler+0x130>)
 800168c:	701a      	strb	r2, [r3, #0]
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200001c8 	.word	0x200001c8
 800169c:	200001c0 	.word	0x200001c0
 80016a0:	200001c4 	.word	0x200001c4
 80016a4:	20000120 	.word	0x20000120
 80016a8:	20000122 	.word	0x20000122
 80016ac:	20000128 	.word	0x20000128
 80016b0:	1b4e81b5 	.word	0x1b4e81b5

080016b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <HAL_MspInit+0x44>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016be:	4a0e      	ldr	r2, [pc, #56]	@ (80016f8 <HAL_MspInit+0x44>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <HAL_MspInit+0x44>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_MspInit+0x44>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	4a08      	ldr	r2, [pc, #32]	@ (80016f8 <HAL_MspInit+0x44>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_MspInit+0x44>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000

080016fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a17      	ldr	r2, [pc, #92]	@ (8001778 <HAL_SPI_MspInit+0x7c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d128      	bne.n	8001770 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_SPI_MspInit+0x80>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	4a16      	ldr	r2, [pc, #88]	@ (800177c <HAL_SPI_MspInit+0x80>)
 8001724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001728:	6593      	str	r3, [r2, #88]	@ 0x58
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_SPI_MspInit+0x80>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_SPI_MspInit+0x80>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4a10      	ldr	r2, [pc, #64]	@ (800177c <HAL_SPI_MspInit+0x80>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_SPI_MspInit+0x80>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800174e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001760:	2306      	movs	r3, #6
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <HAL_SPI_MspInit+0x84>)
 800176c:	f000 fb26 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40003c00 	.word	0x40003c00
 800177c:	40021000 	.word	0x40021000
 8001780:	48000800 	.word	0x48000800

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <NMI_Handler+0x4>

0800178c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <MemManage_Handler+0x4>

0800179c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <UsageFault_Handler+0x4>

080017ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017da:	f000 f999 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <EXTI9_5_IRQHandler+0x14>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80017ee:	2040      	movs	r0, #64	@ 0x40
 80017f0:	f000 fcbe 	bl	8002170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200001cc 	.word	0x200001cc

080017fc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <_sbrk+0x50>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <_sbrk+0x16>
		heap_end = &end;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <_sbrk+0x50>)
 800180e:	4a10      	ldr	r2, [pc, #64]	@ (8001850 <_sbrk+0x54>)
 8001810:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <_sbrk+0x50>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <_sbrk+0x50>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	466a      	mov	r2, sp
 8001822:	4293      	cmp	r3, r2
 8001824:	d907      	bls.n	8001836 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001826:	f002 f967 	bl	8003af8 <__errno>
 800182a:	4603      	mov	r3, r0
 800182c:	220c      	movs	r2, #12
 800182e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001834:	e006      	b.n	8001844 <_sbrk+0x48>
	}

	heap_end += incr;
 8001836:	4b05      	ldr	r3, [pc, #20]	@ (800184c <_sbrk+0x50>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	4a03      	ldr	r2, [pc, #12]	@ (800184c <_sbrk+0x50>)
 8001840:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000234 	.word	0x20000234
 8001850:	20000388 	.word	0x20000388

08001854 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <SystemInit+0x64>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800185e:	4a16      	ldr	r2, [pc, #88]	@ (80018b8 <SystemInit+0x64>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <SystemInit+0x68>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a13      	ldr	r2, [pc, #76]	@ (80018bc <SystemInit+0x68>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <SystemInit+0x68>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <SystemInit+0x68>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0f      	ldr	r2, [pc, #60]	@ (80018bc <SystemInit+0x68>)
 8001880:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001884:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001888:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <SystemInit+0x68>)
 800188c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001890:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <SystemInit+0x68>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a09      	ldr	r2, [pc, #36]	@ (80018bc <SystemInit+0x68>)
 8001898:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800189c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800189e:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <SystemInit+0x68>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <SystemInit+0x64>)
 80018a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018aa:	609a      	str	r2, [r3, #8]
#endif
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	40021000 	.word	0x40021000

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	@ (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	@ (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	@ (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  // TODO implement this
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;   // Enable TIM2 clock
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <timer_init+0x70>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	4a18      	ldr	r2, [pc, #96]	@ (80019c0 <timer_init+0x70>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6593      	str	r3, [r2, #88]	@ 0x58
	timer_reset(timer);     //reset counter
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f82d 	bl	80019c4 <timer_reset>

	timer->PSC = 7999;    //scales down to 1khz 3999
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001970:	629a      	str	r2, [r3, #40]	@ 0x28

	timer_set_ms(timer, 50);   //sets autoreload to 50, so that it reloads every 1/20th of a second, 20Hz
 8001972:	2132      	movs	r1, #50	@ 0x32
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f83b 	bl	80019f0 <timer_set_ms>
	TIM2->CR1 &= ~TIM_CR1_DIR;    //set timer to up counting mode 50
 800197a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001984:	f023 0310 	bic.w	r3, r3, #16
 8001988:	6013      	str	r3, [r2, #0]



    // 6. Enable the timer interrupt for update events
    TIM2->DIER |= TIM_DIER_UIE;  // Enable update interrupt
 800198a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	60d3      	str	r3, [r2, #12]


    // 7. Enable the timer interrupt in the NVIC
    NVIC_EnableIRQ(TIM2_IRQn);  // Enable TIM2 interrupt in NVIC
 800199a:	201c      	movs	r0, #28
 800199c:	f7ff ff90 	bl	80018c0 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 1);  // Set priority to 1 (lower number = higher priority)
 80019a0:	2101      	movs	r1, #1
 80019a2:	201c      	movs	r0, #28
 80019a4:	f7ff ffaa 	bl	80018fc <__NVIC_SetPriority>

    // 8. Start the timer
    TIM2->CR1 |= TIM_CR1_CEN;   // Enable the timer (start counting)
 80019a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6013      	str	r3, [r2, #0]



}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000

080019c4 <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  // TODO implement this
	TIM2->CR1 &= ~TIM_CR1_CEN;  //stop the timer
 80019cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0x0000;  // Reset the counter to 0
 80019dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  // TODO implement this

	timer->ARR = (period_ms) - 1;
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a18:	f7ff ff1c 	bl	8001854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a1e:	490d      	ldr	r1, [pc, #52]	@ (8001a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <LoopForever+0xe>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a34:	4c0a      	ldr	r4, [pc, #40]	@ (8001a60 <LoopForever+0x16>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a42:	f002 f85f 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a46:	f7ff fbe9 	bl	800121c <main>

08001a4a <LoopForever>:

LoopForever:
    b LoopForever
 8001a4a:	e7fe      	b.n	8001a4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001a58:	08003c70 	.word	0x08003c70
  ldr r2, =_sbss
 8001a5c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001a60:	20000384 	.word	0x20000384

08001a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC1_2_IRQHandler>

08001a66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 f961 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a76:	2000      	movs	r0, #0
 8001a78:	f000 f80e 	bl	8001a98 <HAL_InitTick>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	71fb      	strb	r3, [r7, #7]
 8001a86:	e001      	b.n	8001a8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a88:	f7ff fe14 	bl	80016b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_InitTick+0x6c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d023      	beq.n	8001af4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_InitTick+0x70>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_InitTick+0x6c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f96d 	bl	8001da2 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d809      	bhi.n	8001ae8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001adc:	f000 f937 	bl	8001d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <HAL_InitTick+0x74>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e007      	b.n	8001af8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	e004      	b.n	8001af8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e001      	b.n	8001af8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000134 	.word	0x20000134
 8001b08:	2000012c 	.word	0x2000012c
 8001b0c:	20000130 	.word	0x20000130

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000134 	.word	0x20000134
 8001b34:	20000238 	.word	0x20000238

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000238 	.word	0x20000238

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff ffee 	bl	8001b38 <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_Delay+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffde 	bl	8001b38 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000134 	.word	0x20000134

08001b98 <__NVIC_SetPriorityGrouping>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	@ (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	@ (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	@ (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	@ 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff29 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff3e 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff8e 	bl	8001c8c <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5d 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff31 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dca:	e17f      	b.n	80020cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8171 	beq.w	80020c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d005      	beq.n	8001dfc <HAL_GPIO_Init+0x40>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d130      	bne.n	8001e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e32:	2201      	movs	r2, #1
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	f003 0201 	and.w	r2, r3, #1
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d118      	bne.n	8001e9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e70:	2201      	movs	r2, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d017      	beq.n	8001ed8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d123      	bne.n	8001f2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	08da      	lsrs	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3208      	adds	r2, #8
 8001f26:	6939      	ldr	r1, [r7, #16]
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80ac 	beq.w	80020c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80020ec <HAL_GPIO_Init+0x330>)
 8001f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f72:	4a5e      	ldr	r2, [pc, #376]	@ (80020ec <HAL_GPIO_Init+0x330>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80020ec <HAL_GPIO_Init+0x330>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f86:	4a5a      	ldr	r2, [pc, #360]	@ (80020f0 <HAL_GPIO_Init+0x334>)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fb0:	d025      	beq.n	8001ffe <HAL_GPIO_Init+0x242>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80020f4 <HAL_GPIO_Init+0x338>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01f      	beq.n	8001ffa <HAL_GPIO_Init+0x23e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4e      	ldr	r2, [pc, #312]	@ (80020f8 <HAL_GPIO_Init+0x33c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d019      	beq.n	8001ff6 <HAL_GPIO_Init+0x23a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4d      	ldr	r2, [pc, #308]	@ (80020fc <HAL_GPIO_Init+0x340>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <HAL_GPIO_Init+0x236>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002100 <HAL_GPIO_Init+0x344>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00d      	beq.n	8001fee <HAL_GPIO_Init+0x232>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002104 <HAL_GPIO_Init+0x348>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <HAL_GPIO_Init+0x22e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	@ (8002108 <HAL_GPIO_Init+0x34c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d101      	bne.n	8001fe6 <HAL_GPIO_Init+0x22a>
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	e00c      	b.n	8002000 <HAL_GPIO_Init+0x244>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00a      	b.n	8002000 <HAL_GPIO_Init+0x244>
 8001fea:	2305      	movs	r3, #5
 8001fec:	e008      	b.n	8002000 <HAL_GPIO_Init+0x244>
 8001fee:	2304      	movs	r3, #4
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x244>
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e004      	b.n	8002000 <HAL_GPIO_Init+0x244>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e002      	b.n	8002000 <HAL_GPIO_Init+0x244>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_GPIO_Init+0x244>
 8001ffe:	2300      	movs	r3, #0
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	f002 0203 	and.w	r2, r2, #3
 8002006:	0092      	lsls	r2, r2, #2
 8002008:	4093      	lsls	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002010:	4937      	ldr	r1, [pc, #220]	@ (80020f0 <HAL_GPIO_Init+0x334>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800201e:	4b3b      	ldr	r3, [pc, #236]	@ (800210c <HAL_GPIO_Init+0x350>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002042:	4a32      	ldr	r2, [pc, #200]	@ (800210c <HAL_GPIO_Init+0x350>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002048:	4b30      	ldr	r3, [pc, #192]	@ (800210c <HAL_GPIO_Init+0x350>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800206c:	4a27      	ldr	r2, [pc, #156]	@ (800210c <HAL_GPIO_Init+0x350>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002072:	4b26      	ldr	r3, [pc, #152]	@ (800210c <HAL_GPIO_Init+0x350>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002096:	4a1d      	ldr	r2, [pc, #116]	@ (800210c <HAL_GPIO_Init+0x350>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800209c:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_GPIO_Init+0x350>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020c0:	4a12      	ldr	r2, [pc, #72]	@ (800210c <HAL_GPIO_Init+0x350>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f47f ae78 	bne.w	8001dcc <HAL_GPIO_Init+0x10>
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010000 	.word	0x40010000
 80020f4:	48000400 	.word	0x48000400
 80020f8:	48000800 	.word	0x48000800
 80020fc:	48000c00 	.word	0x48000c00
 8002100:	48001000 	.word	0x48001000
 8002104:	48001400 	.word	0x48001400
 8002108:	48001800 	.word	0x48001800
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	e001      	b.n	8002132 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800215c:	e002      	b.n	8002164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002186:	4a05      	ldr	r2, [pc, #20]	@ (800219c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f806 	bl	80021a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021bc:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40007000 	.word	0x40007000

080021d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e2:	d130      	bne.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e4:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021f0:	d038      	beq.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f2:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2232      	movs	r2, #50	@ 0x32
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	4a1b      	ldr	r2, [pc, #108]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0c9b      	lsrs	r3, r3, #18
 8002214:	3301      	adds	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002218:	e002      	b.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3b01      	subs	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002220:	4b14      	ldr	r3, [pc, #80]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800222c:	d102      	bne.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x60>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f2      	bne.n	800221a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002234:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002240:	d110      	bne.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e00f      	b.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002246:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002252:	d007      	beq.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002254:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800225c:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002262:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40007000 	.word	0x40007000
 8002278:	2000012c 	.word	0x2000012c
 800227c:	431bde83 	.word	0x431bde83

08002280 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e3ca      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002292:	4b97      	ldr	r3, [pc, #604]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800229c:	4b94      	ldr	r3, [pc, #592]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80e4 	beq.w	800247c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_RCC_OscConfig+0x4a>
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	f040 808b 	bne.w	80023d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	f040 8087 	bne.w	80023d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ca:	4b89      	ldr	r3, [pc, #548]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x62>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e3a2      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	4b82      	ldr	r3, [pc, #520]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d004      	beq.n	80022fc <HAL_RCC_OscConfig+0x7c>
 80022f2:	4b7f      	ldr	r3, [pc, #508]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022fa:	e005      	b.n	8002308 <HAL_RCC_OscConfig+0x88>
 80022fc:	4b7c      	ldr	r3, [pc, #496]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002308:	4293      	cmp	r3, r2
 800230a:	d223      	bcs.n	8002354 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fd1d 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e383      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002320:	4b73      	ldr	r3, [pc, #460]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a72      	ldr	r2, [pc, #456]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002326:	f043 0308 	orr.w	r3, r3, #8
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b70      	ldr	r3, [pc, #448]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	496d      	ldr	r1, [pc, #436]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233e:	4b6c      	ldr	r3, [pc, #432]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	4968      	ldr	r1, [pc, #416]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
 8002352:	e025      	b.n	80023a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002354:	4b66      	ldr	r3, [pc, #408]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a65      	ldr	r2, [pc, #404]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800235a:	f043 0308 	orr.w	r3, r3, #8
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b63      	ldr	r3, [pc, #396]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4960      	ldr	r1, [pc, #384]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002372:	4b5f      	ldr	r3, [pc, #380]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	495b      	ldr	r1, [pc, #364]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fcdd 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e343      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a0:	f000 fc4a 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b52      	ldr	r3, [pc, #328]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	4950      	ldr	r1, [pc, #320]	@ (80024f4 <HAL_RCC_OscConfig+0x274>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	4a4e      	ldr	r2, [pc, #312]	@ (80024f8 <HAL_RCC_OscConfig+0x278>)
 80023be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023c0:	4b4e      	ldr	r3, [pc, #312]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fb67 	bl	8001a98 <HAL_InitTick>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d052      	beq.n	800247a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	e327      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d032      	beq.n	8002446 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023e0:	4b43      	ldr	r3, [pc, #268]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a42      	ldr	r2, [pc, #264]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ec:	f7ff fba4 	bl	8001b38 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f4:	f7ff fba0 	bl	8001b38 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e310      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002406:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002412:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a36      	ldr	r2, [pc, #216]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b34      	ldr	r3, [pc, #208]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4931      	ldr	r1, [pc, #196]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002430:	4b2f      	ldr	r3, [pc, #188]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	492c      	ldr	r1, [pc, #176]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
 8002444:	e01a      	b.n	800247c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002446:	4b2a      	ldr	r3, [pc, #168]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a29      	ldr	r2, [pc, #164]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002452:	f7ff fb71 	bl	8001b38 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800245a:	f7ff fb6d 	bl	8001b38 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e2dd      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800246c:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x1da>
 8002478:	e000      	b.n	800247c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800247a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d074      	beq.n	8002572 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b08      	cmp	r3, #8
 800248c:	d005      	beq.n	800249a <HAL_RCC_OscConfig+0x21a>
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b0c      	cmp	r3, #12
 8002492:	d10e      	bne.n	80024b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d10b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d064      	beq.n	8002570 <HAL_RCC_OscConfig+0x2f0>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d160      	bne.n	8002570 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e2ba      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x24a>
 80024bc:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0b      	ldr	r2, [pc, #44]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e026      	b.n	8002518 <HAL_RCC_OscConfig+0x298>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d2:	d115      	bne.n	8002500 <HAL_RCC_OscConfig+0x280>
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a05      	ldr	r2, [pc, #20]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80024da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a02      	ldr	r2, [pc, #8]	@ (80024f0 <HAL_RCC_OscConfig+0x270>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e014      	b.n	8002518 <HAL_RCC_OscConfig+0x298>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08003c28 	.word	0x08003c28
 80024f8:	2000012c 	.word	0x2000012c
 80024fc:	20000130 	.word	0x20000130
 8002500:	4ba0      	ldr	r3, [pc, #640]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a9f      	ldr	r2, [pc, #636]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b9d      	ldr	r3, [pc, #628]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a9c      	ldr	r2, [pc, #624]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7ff fb0a 	bl	8001b38 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff fb06 	bl	8001b38 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e276      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	4b92      	ldr	r3, [pc, #584]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x2a8>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7ff faf6 	bl	8001b38 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff faf2 	bl	8001b38 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e262      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002562:	4b88      	ldr	r3, [pc, #544]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x2d0>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d060      	beq.n	8002640 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d005      	beq.n	8002590 <HAL_RCC_OscConfig+0x310>
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d119      	bne.n	80025be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d116      	bne.n	80025be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002590:	4b7c      	ldr	r3, [pc, #496]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_OscConfig+0x328>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e23f      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b76      	ldr	r3, [pc, #472]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	4973      	ldr	r1, [pc, #460]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025bc:	e040      	b.n	8002640 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d023      	beq.n	800260e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7ff fab1 	bl	8001b38 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025da:	f7ff faad 	bl	8001b38 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e21d      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ec:	4b65      	ldr	r3, [pc, #404]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f8:	4b62      	ldr	r3, [pc, #392]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	495f      	ldr	r1, [pc, #380]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
 800260c:	e018      	b.n	8002640 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260e:	4b5d      	ldr	r3, [pc, #372]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5c      	ldr	r2, [pc, #368]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7ff fa8d 	bl	8001b38 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002622:	f7ff fa89 	bl	8001b38 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e1f9      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002634:	4b53      	ldr	r3, [pc, #332]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f0      	bne.n	8002622 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d03c      	beq.n	80026c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01c      	beq.n	800268e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002654:	4b4b      	ldr	r3, [pc, #300]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800265a:	4a4a      	ldr	r2, [pc, #296]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7ff fa68 	bl	8001b38 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266c:	f7ff fa64 	bl	8001b38 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1d4      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267e:	4b41      	ldr	r3, [pc, #260]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002680:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ef      	beq.n	800266c <HAL_RCC_OscConfig+0x3ec>
 800268c:	e01b      	b.n	80026c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268e:	4b3d      	ldr	r3, [pc, #244]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002694:	4a3b      	ldr	r2, [pc, #236]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7ff fa4b 	bl	8001b38 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a6:	f7ff fa47 	bl	8001b38 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e1b7      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b8:	4b32      	ldr	r3, [pc, #200]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80026ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ef      	bne.n	80026a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80a6 	beq.w	8002820 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10d      	bne.n	8002700 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b27      	ldr	r3, [pc, #156]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	4a26      	ldr	r2, [pc, #152]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f0:	4b24      	ldr	r3, [pc, #144]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fc:	2301      	movs	r3, #1
 80026fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002700:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <HAL_RCC_OscConfig+0x508>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d118      	bne.n	800273e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800270c:	4b1e      	ldr	r3, [pc, #120]	@ (8002788 <HAL_RCC_OscConfig+0x508>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <HAL_RCC_OscConfig+0x508>)
 8002712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002716:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002718:	f7ff fa0e 	bl	8001b38 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002720:	f7ff fa0a 	bl	8001b38 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e17a      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <HAL_RCC_OscConfig+0x508>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d108      	bne.n	8002758 <HAL_RCC_OscConfig+0x4d8>
 8002746:	4b0f      	ldr	r3, [pc, #60]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274c:	4a0d      	ldr	r2, [pc, #52]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002756:	e029      	b.n	80027ac <HAL_RCC_OscConfig+0x52c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d115      	bne.n	800278c <HAL_RCC_OscConfig+0x50c>
 8002760:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002766:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002776:	4a03      	ldr	r2, [pc, #12]	@ (8002784 <HAL_RCC_OscConfig+0x504>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002780:	e014      	b.n	80027ac <HAL_RCC_OscConfig+0x52c>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
 800278c:	4b9c      	ldr	r3, [pc, #624]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	4a9b      	ldr	r2, [pc, #620]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800279c:	4b98      	ldr	r3, [pc, #608]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	4a97      	ldr	r2, [pc, #604]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d016      	beq.n	80027e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7ff f9c0 	bl	8001b38 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7ff f9bc 	bl	8001b38 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e12a      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ed      	beq.n	80027bc <HAL_RCC_OscConfig+0x53c>
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7ff f9a9 	bl	8001b38 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7ff f9a5 	bl	8001b38 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e113      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002800:	4b7f      	ldr	r3, [pc, #508]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1ed      	bne.n	80027ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800280e:	7ffb      	ldrb	r3, [r7, #31]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002814:	4b7a      	ldr	r3, [pc, #488]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002818:	4a79      	ldr	r2, [pc, #484]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 800281a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80fe 	beq.w	8002a26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282e:	2b02      	cmp	r3, #2
 8002830:	f040 80d0 	bne.w	80029d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002834:	4b72      	ldr	r3, [pc, #456]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	429a      	cmp	r2, r3
 8002846:	d130      	bne.n	80028aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	3b01      	subs	r3, #1
 8002854:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d127      	bne.n	80028aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002864:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d11f      	bne.n	80028aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002874:	2a07      	cmp	r2, #7
 8002876:	bf14      	ite	ne
 8002878:	2201      	movne	r2, #1
 800287a:	2200      	moveq	r2, #0
 800287c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800287e:	4293      	cmp	r3, r2
 8002880:	d113      	bne.n	80028aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	3b01      	subs	r3, #1
 8002890:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d109      	bne.n	80028aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	3b01      	subs	r3, #1
 80028a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d06e      	beq.n	8002988 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d069      	beq.n	8002984 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028b0:	4b53      	ldr	r3, [pc, #332]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028bc:	4b50      	ldr	r3, [pc, #320]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0ad      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80028d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028d8:	f7ff f92e 	bl	8001b38 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff f92a 	bl	8001b38 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e09a      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f2:	4b43      	ldr	r3, [pc, #268]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fe:	4b40      	ldr	r3, [pc, #256]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	4b40      	ldr	r3, [pc, #256]	@ (8002a04 <HAL_RCC_OscConfig+0x784>)
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800290e:	3a01      	subs	r2, #1
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002918:	0212      	lsls	r2, r2, #8
 800291a:	4311      	orrs	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002920:	0852      	lsrs	r2, r2, #1
 8002922:	3a01      	subs	r2, #1
 8002924:	0552      	lsls	r2, r2, #21
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800292c:	0852      	lsrs	r2, r2, #1
 800292e:	3a01      	subs	r2, #1
 8002930:	0652      	lsls	r2, r2, #25
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002938:	0912      	lsrs	r2, r2, #4
 800293a:	0452      	lsls	r2, r2, #17
 800293c:	430a      	orrs	r2, r1
 800293e:	4930      	ldr	r1, [pc, #192]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002940:	4313      	orrs	r3, r2
 8002942:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002944:	4b2e      	ldr	r3, [pc, #184]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2d      	ldr	r2, [pc, #180]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800295a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800295c:	f7ff f8ec 	bl	8001b38 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7ff f8e8 	bl	8001b38 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e058      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002976:	4b22      	ldr	r3, [pc, #136]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002982:	e050      	b.n	8002a26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e04f      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002988:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d148      	bne.n	8002a26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002994:	4b1a      	ldr	r3, [pc, #104]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a19      	ldr	r2, [pc, #100]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029a0:	4b17      	ldr	r3, [pc, #92]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a16      	ldr	r2, [pc, #88]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029ac:	f7ff f8c4 	bl	8001b38 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7ff f8c0 	bl	8001b38 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e030      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x734>
 80029d2:	e028      	b.n	8002a26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d023      	beq.n	8002a22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a08      	ldr	r2, [pc, #32]	@ (8002a00 <HAL_RCC_OscConfig+0x780>)
 80029e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7ff f8a7 	bl	8001b38 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ec:	e00c      	b.n	8002a08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ee:	f7ff f8a3 	bl	8001b38 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d905      	bls.n	8002a08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e013      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_RCC_OscConfig+0x7b0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ec      	bne.n	80029ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_RCC_OscConfig+0x7b0>)
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	4905      	ldr	r1, [pc, #20]	@ (8002a30 <HAL_RCC_OscConfig+0x7b0>)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_RCC_OscConfig+0x7b4>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
 8002a20:	e001      	b.n	8002a26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	feeefffc 	.word	0xfeeefffc

08002a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0e7      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b75      	ldr	r3, [pc, #468]	@ (8002c24 <HAL_RCC_ClockConfig+0x1ec>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d910      	bls.n	8002a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b72      	ldr	r3, [pc, #456]	@ (8002c24 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 0207 	bic.w	r2, r3, #7
 8002a62:	4970      	ldr	r1, [pc, #448]	@ (8002c24 <HAL_RCC_ClockConfig+0x1ec>)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002c24 <HAL_RCC_ClockConfig+0x1ec>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0cf      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d010      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b66      	ldr	r3, [pc, #408]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d908      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b63      	ldr	r3, [pc, #396]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4960      	ldr	r1, [pc, #384]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d04c      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abe:	4b5a      	ldr	r3, [pc, #360]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d121      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0a6      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad6:	4b54      	ldr	r3, [pc, #336]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e09a      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aee:	4b4e      	ldr	r3, [pc, #312]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e08e      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afe:	4b4a      	ldr	r3, [pc, #296]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e086      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b46      	ldr	r3, [pc, #280]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4943      	ldr	r1, [pc, #268]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7ff f80a 	bl	8001b38 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7ff f806 	bl	8001b38 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e06e      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d010      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	4b31      	ldr	r3, [pc, #196]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d208      	bcs.n	8002b7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	492b      	ldr	r1, [pc, #172]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7e:	4b29      	ldr	r3, [pc, #164]	@ (8002c24 <HAL_RCC_ClockConfig+0x1ec>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d210      	bcs.n	8002bae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8c:	4b25      	ldr	r3, [pc, #148]	@ (8002c24 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 0207 	bic.w	r2, r3, #7
 8002b94:	4923      	ldr	r1, [pc, #140]	@ (8002c24 <HAL_RCC_ClockConfig+0x1ec>)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9c:	4b21      	ldr	r3, [pc, #132]	@ (8002c24 <HAL_RCC_ClockConfig+0x1ec>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e036      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bba:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4918      	ldr	r1, [pc, #96]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd8:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4910      	ldr	r1, [pc, #64]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bec:	f000 f824 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	490b      	ldr	r1, [pc, #44]	@ (8002c2c <HAL_RCC_ClockConfig+0x1f4>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
 8002c08:	4a09      	ldr	r2, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1f8>)
 8002c0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c0c:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <HAL_RCC_ClockConfig+0x1fc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe ff41 	bl	8001a98 <HAL_InitTick>
 8002c16:	4603      	mov	r3, r0
 8002c18:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	08003c28 	.word	0x08003c28
 8002c30:	2000012c 	.word	0x2000012c
 8002c34:	20000130 	.word	0x20000130

08002c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	@ 0x24
 8002c3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c46:	4b3e      	ldr	r3, [pc, #248]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c50:	4b3b      	ldr	r3, [pc, #236]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x34>
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d121      	bne.n	8002caa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d11e      	bne.n	8002caa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c6c:	4b34      	ldr	r3, [pc, #208]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c78:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	e005      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c88:	4b2d      	ldr	r3, [pc, #180]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c94:	4a2b      	ldr	r2, [pc, #172]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d102      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cb0:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	e004      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cbc:	4b23      	ldr	r3, [pc, #140]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d134      	bne.n	8002d30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0xa6>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d003      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xac>
 8002cdc:	e005      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cde:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ce0:	617b      	str	r3, [r7, #20]
      break;
 8002ce2:	e005      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ce6:	617b      	str	r3, [r7, #20]
      break;
 8002ce8:	e002      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	617b      	str	r3, [r7, #20]
      break;
 8002cee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf0:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cfe:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	fb03 f202 	mul.w	r2, r3, r2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d16:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	0e5b      	lsrs	r3, r3, #25
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	3301      	adds	r3, #1
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d30:	69bb      	ldr	r3, [r7, #24]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	@ 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08003c38 	.word	0x08003c38
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	007a1200 	.word	0x007a1200

08002d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d68:	f7ff fa26 	bl	80021b8 <HAL_PWREx_GetVoltageRange>
 8002d6c:	6178      	str	r0, [r7, #20]
 8002d6e:	e014      	b.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d7c:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d88:	f7ff fa16 	bl	80021b8 <HAL_PWREx_GetVoltageRange>
 8002d8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	4a1d      	ldr	r2, [pc, #116]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da0:	d10b      	bne.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b80      	cmp	r3, #128	@ 0x80
 8002da6:	d919      	bls.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dac:	d902      	bls.n	8002db4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dae:	2302      	movs	r3, #2
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	e013      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002db4:	2301      	movs	r3, #1
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	e010      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b80      	cmp	r3, #128	@ 0x80
 8002dbe:	d902      	bls.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	e00a      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b80      	cmp	r3, #128	@ 0x80
 8002dca:	d102      	bne.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dcc:	2302      	movs	r3, #2
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	e004      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b70      	cmp	r3, #112	@ 0x70
 8002dd6:	d101      	bne.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dd8:	2301      	movs	r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 0207 	bic.w	r2, r3, #7
 8002de4:	4909      	ldr	r1, [pc, #36]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dec:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d001      	beq.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40022000 	.word	0x40022000

08002e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e095      	b.n	8002f4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e32:	d009      	beq.n	8002e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
 8002e3a:	e005      	b.n	8002e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe fc4a 	bl	80016fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e88:	d902      	bls.n	8002e90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	e002      	b.n	8002e96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e9e:	d007      	beq.n	8002eb0 <HAL_SPI_Init+0xa0>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ea8:	d002      	beq.n	8002eb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef2:	ea42 0103 	orr.w	r1, r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	f003 0204 	and.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f2c:	ea42 0103 	orr.w	r1, r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b088      	sub	sp, #32
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_SPI_Transmit+0x22>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e15f      	b.n	8003238 <HAL_SPI_Transmit+0x2e2>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f80:	f7fe fdda 	bl	8001b38 <HAL_GetTick>
 8002f84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d002      	beq.n	8002f9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
 8002f98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f9a:	e148      	b.n	800322e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_SPI_Transmit+0x52>
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fac:	e13f      	b.n	800322e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ff8:	d10f      	bne.n	800301a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003024:	2b40      	cmp	r3, #64	@ 0x40
 8003026:	d007      	beq.n	8003038 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003040:	d94f      	bls.n	80030e2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_SPI_Transmit+0xfa>
 800304a:	8afb      	ldrh	r3, [r7, #22]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d142      	bne.n	80030d6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	881a      	ldrh	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003060:	1c9a      	adds	r2, r3, #2
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003074:	e02f      	b.n	80030d6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d112      	bne.n	80030aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	881a      	ldrh	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	1c9a      	adds	r2, r3, #2
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030a8:	e015      	b.n	80030d6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030aa:	f7fe fd45 	bl	8001b38 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d803      	bhi.n	80030c2 <HAL_SPI_Transmit+0x16c>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030c0:	d102      	bne.n	80030c8 <HAL_SPI_Transmit+0x172>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d106      	bne.n	80030d6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80030d4:	e0ab      	b.n	800322e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ca      	bne.n	8003076 <HAL_SPI_Transmit+0x120>
 80030e0:	e080      	b.n	80031e4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_SPI_Transmit+0x19a>
 80030ea:	8afb      	ldrh	r3, [r7, #22]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d174      	bne.n	80031da <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d912      	bls.n	8003120 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fe:	881a      	ldrh	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310a:	1c9a      	adds	r2, r3, #2
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b02      	subs	r3, #2
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800311e:	e05c      	b.n	80031da <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003146:	e048      	b.n	80031da <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d12b      	bne.n	80031ae <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d912      	bls.n	8003186 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	1c9a      	adds	r2, r3, #2
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b02      	subs	r3, #2
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003184:	e029      	b.n	80031da <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	7812      	ldrb	r2, [r2, #0]
 8003192:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031ac:	e015      	b.n	80031da <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ae:	f7fe fcc3 	bl	8001b38 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d803      	bhi.n	80031c6 <HAL_SPI_Transmit+0x270>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031c4:	d102      	bne.n	80031cc <HAL_SPI_Transmit+0x276>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80031d8:	e029      	b.n	800322e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1b1      	bne.n	8003148 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	6839      	ldr	r1, [r7, #0]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fb69 	bl	80038c0 <SPI_EndRxTxTransaction>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e003      	b.n	800322e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003236:	7ffb      	ldrb	r3, [r7, #31]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	@ 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800324e:	2301      	movs	r3, #1
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x26>
 8003262:	2302      	movs	r3, #2
 8003264:	e20a      	b.n	800367c <HAL_SPI_TransmitReceive+0x43c>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800326e:	f7fe fc63 	bl	8001b38 <HAL_GetTick>
 8003272:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800327a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800328a:	7efb      	ldrb	r3, [r7, #27]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d00e      	beq.n	80032ae <HAL_SPI_TransmitReceive+0x6e>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003296:	d106      	bne.n	80032a6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <HAL_SPI_TransmitReceive+0x66>
 80032a0:	7efb      	ldrb	r3, [r7, #27]
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d003      	beq.n	80032ae <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80032ac:	e1e0      	b.n	8003670 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x80>
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d103      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80032c6:	e1d3      	b.n	8003670 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d003      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2205      	movs	r2, #5
 80032d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	887a      	ldrh	r2, [r7, #2]
 8003302:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800331e:	d802      	bhi.n	8003326 <HAL_SPI_TransmitReceive+0xe6>
 8003320:	8a3b      	ldrh	r3, [r7, #16]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d908      	bls.n	8003338 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	e007      	b.n	8003348 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003346:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003352:	2b40      	cmp	r3, #64	@ 0x40
 8003354:	d007      	beq.n	8003366 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003364:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800336e:	f240 8081 	bls.w	8003474 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_SPI_TransmitReceive+0x140>
 800337a:	8a7b      	ldrh	r3, [r7, #18]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d16d      	bne.n	800345c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a4:	e05a      	b.n	800345c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d11b      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x1ac>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x1ac>
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d113      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	881a      	ldrh	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d4:	1c9a      	adds	r2, r3, #2
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d11c      	bne.n	8003434 <HAL_SPI_TransmitReceive+0x1f4>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	b292      	uxth	r2, r2
 8003412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003430:	2301      	movs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003434:	f7fe fb80 	bl	8001b38 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003440:	429a      	cmp	r2, r3
 8003442:	d80b      	bhi.n	800345c <HAL_SPI_TransmitReceive+0x21c>
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800344a:	d007      	beq.n	800345c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800345a:	e109      	b.n	8003670 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d19f      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x166>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d199      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x166>
 8003472:	e0e3      	b.n	800363c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x244>
 800347c:	8a7b      	ldrh	r3, [r7, #18]
 800347e:	2b01      	cmp	r3, #1
 8003480:	f040 80cf 	bne.w	8003622 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d912      	bls.n	80034b4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003492:	881a      	ldrh	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	1c9a      	adds	r2, r3, #2
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b02      	subs	r3, #2
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034b2:	e0b6      	b.n	8003622 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034da:	e0a2      	b.n	8003622 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d134      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x314>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d02f      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x314>
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d12c      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d912      	bls.n	800352a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	881a      	ldrh	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003514:	1c9a      	adds	r2, r3, #2
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b02      	subs	r3, #2
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003528:	e012      	b.n	8003550 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	7812      	ldrb	r2, [r2, #0]
 8003536:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d148      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x3b4>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d042      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d923      	bls.n	80035c2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	b292      	uxth	r2, r2
 8003586:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b02      	subs	r3, #2
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d81f      	bhi.n	80035f0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	e016      	b.n	80035f0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f103 020c 	add.w	r2, r3, #12
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035f0:	2301      	movs	r3, #1
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035f4:	f7fe faa0 	bl	8001b38 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003600:	429a      	cmp	r2, r3
 8003602:	d803      	bhi.n	800360c <HAL_SPI_TransmitReceive+0x3cc>
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800360a:	d102      	bne.n	8003612 <HAL_SPI_TransmitReceive+0x3d2>
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003620:	e026      	b.n	8003670 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f47f af57 	bne.w	80034dc <HAL_SPI_TransmitReceive+0x29c>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	f47f af50 	bne.w	80034dc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f93d 	bl	80038c0 <SPI_EndRxTxTransaction>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003666:	e003      	b.n	8003670 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003678:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800367c:	4618      	mov	r0, r3
 800367e:	3728      	adds	r7, #40	@ 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003694:	f7fe fa50 	bl	8001b38 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036a4:	f7fe fa48 	bl	8001b38 <HAL_GetTick>
 80036a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036aa:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	015b      	lsls	r3, r3, #5
 80036b0:	0d1b      	lsrs	r3, r3, #20
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ba:	e054      	b.n	8003766 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036c2:	d050      	beq.n	8003766 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c4:	f7fe fa38 	bl	8001b38 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d902      	bls.n	80036da <SPI_WaitFlagStateUntilTimeout+0x56>
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d13d      	bne.n	8003756 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036f2:	d111      	bne.n	8003718 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036fc:	d004      	beq.n	8003708 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003706:	d107      	bne.n	8003718 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003720:	d10f      	bne.n	8003742 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e017      	b.n	8003786 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	3b01      	subs	r3, #1
 8003764:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d19b      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	2000012c 	.word	0x2000012c

08003794 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	@ 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037a6:	f7fe f9c7 	bl	8001b38 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	4413      	add	r3, r2
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80037b6:	f7fe f9bf 	bl	8001b38 <HAL_GetTick>
 80037ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037c4:	4b3d      	ldr	r3, [pc, #244]	@ (80038bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00da      	lsls	r2, r3, #3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	0d1b      	lsrs	r3, r3, #20
 80037d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037dc:	e060      	b.n	80038a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80037e4:	d107      	bne.n	80037f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d104      	bne.n	80037f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037fc:	d050      	beq.n	80038a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037fe:	f7fe f99b 	bl	8001b38 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380a:	429a      	cmp	r2, r3
 800380c:	d902      	bls.n	8003814 <SPI_WaitFifoStateUntilTimeout+0x80>
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	2b00      	cmp	r3, #0
 8003812:	d13d      	bne.n	8003890 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003822:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800382c:	d111      	bne.n	8003852 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003836:	d004      	beq.n	8003842 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003840:	d107      	bne.n	8003852 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003850:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800385a:	d10f      	bne.n	800387c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800387a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e010      	b.n	80038b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3b01      	subs	r3, #1
 800389e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4013      	ands	r3, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d196      	bne.n	80037de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3728      	adds	r7, #40	@ 0x28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2000012c 	.word	0x2000012c

080038c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff ff5b 	bl	8003794 <SPI_WaitFifoStateUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e027      	b.n	8003944 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2200      	movs	r2, #0
 80038fc:	2180      	movs	r1, #128	@ 0x80
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff fec0 	bl	8003684 <SPI_WaitFlagStateUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e014      	b.n	8003944 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2200      	movs	r2, #0
 8003922:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff ff34 	bl	8003794 <SPI_WaitFifoStateUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e000      	b.n	8003944 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <malloc>:
 800394c:	4b02      	ldr	r3, [pc, #8]	@ (8003958 <malloc+0xc>)
 800394e:	4601      	mov	r1, r0
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	f000 b82d 	b.w	80039b0 <_malloc_r>
 8003956:	bf00      	nop
 8003958:	20000138 	.word	0x20000138

0800395c <free>:
 800395c:	4b02      	ldr	r3, [pc, #8]	@ (8003968 <free+0xc>)
 800395e:	4601      	mov	r1, r0
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	f000 b903 	b.w	8003b6c <_free_r>
 8003966:	bf00      	nop
 8003968:	20000138 	.word	0x20000138

0800396c <sbrk_aligned>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	4e0f      	ldr	r6, [pc, #60]	@ (80039ac <sbrk_aligned+0x40>)
 8003970:	460c      	mov	r4, r1
 8003972:	6831      	ldr	r1, [r6, #0]
 8003974:	4605      	mov	r5, r0
 8003976:	b911      	cbnz	r1, 800397e <sbrk_aligned+0x12>
 8003978:	f000 f8ae 	bl	8003ad8 <_sbrk_r>
 800397c:	6030      	str	r0, [r6, #0]
 800397e:	4621      	mov	r1, r4
 8003980:	4628      	mov	r0, r5
 8003982:	f000 f8a9 	bl	8003ad8 <_sbrk_r>
 8003986:	1c43      	adds	r3, r0, #1
 8003988:	d103      	bne.n	8003992 <sbrk_aligned+0x26>
 800398a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800398e:	4620      	mov	r0, r4
 8003990:	bd70      	pop	{r4, r5, r6, pc}
 8003992:	1cc4      	adds	r4, r0, #3
 8003994:	f024 0403 	bic.w	r4, r4, #3
 8003998:	42a0      	cmp	r0, r4
 800399a:	d0f8      	beq.n	800398e <sbrk_aligned+0x22>
 800399c:	1a21      	subs	r1, r4, r0
 800399e:	4628      	mov	r0, r5
 80039a0:	f000 f89a 	bl	8003ad8 <_sbrk_r>
 80039a4:	3001      	adds	r0, #1
 80039a6:	d1f2      	bne.n	800398e <sbrk_aligned+0x22>
 80039a8:	e7ef      	b.n	800398a <sbrk_aligned+0x1e>
 80039aa:	bf00      	nop
 80039ac:	2000023c 	.word	0x2000023c

080039b0 <_malloc_r>:
 80039b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039b4:	1ccd      	adds	r5, r1, #3
 80039b6:	f025 0503 	bic.w	r5, r5, #3
 80039ba:	3508      	adds	r5, #8
 80039bc:	2d0c      	cmp	r5, #12
 80039be:	bf38      	it	cc
 80039c0:	250c      	movcc	r5, #12
 80039c2:	2d00      	cmp	r5, #0
 80039c4:	4606      	mov	r6, r0
 80039c6:	db01      	blt.n	80039cc <_malloc_r+0x1c>
 80039c8:	42a9      	cmp	r1, r5
 80039ca:	d904      	bls.n	80039d6 <_malloc_r+0x26>
 80039cc:	230c      	movs	r3, #12
 80039ce:	6033      	str	r3, [r6, #0]
 80039d0:	2000      	movs	r0, #0
 80039d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003aac <_malloc_r+0xfc>
 80039da:	f000 f869 	bl	8003ab0 <__malloc_lock>
 80039de:	f8d8 3000 	ldr.w	r3, [r8]
 80039e2:	461c      	mov	r4, r3
 80039e4:	bb44      	cbnz	r4, 8003a38 <_malloc_r+0x88>
 80039e6:	4629      	mov	r1, r5
 80039e8:	4630      	mov	r0, r6
 80039ea:	f7ff ffbf 	bl	800396c <sbrk_aligned>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	4604      	mov	r4, r0
 80039f2:	d158      	bne.n	8003aa6 <_malloc_r+0xf6>
 80039f4:	f8d8 4000 	ldr.w	r4, [r8]
 80039f8:	4627      	mov	r7, r4
 80039fa:	2f00      	cmp	r7, #0
 80039fc:	d143      	bne.n	8003a86 <_malloc_r+0xd6>
 80039fe:	2c00      	cmp	r4, #0
 8003a00:	d04b      	beq.n	8003a9a <_malloc_r+0xea>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	4639      	mov	r1, r7
 8003a06:	4630      	mov	r0, r6
 8003a08:	eb04 0903 	add.w	r9, r4, r3
 8003a0c:	f000 f864 	bl	8003ad8 <_sbrk_r>
 8003a10:	4581      	cmp	r9, r0
 8003a12:	d142      	bne.n	8003a9a <_malloc_r+0xea>
 8003a14:	6821      	ldr	r1, [r4, #0]
 8003a16:	1a6d      	subs	r5, r5, r1
 8003a18:	4629      	mov	r1, r5
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f7ff ffa6 	bl	800396c <sbrk_aligned>
 8003a20:	3001      	adds	r0, #1
 8003a22:	d03a      	beq.n	8003a9a <_malloc_r+0xea>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	442b      	add	r3, r5
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	bb62      	cbnz	r2, 8003a8c <_malloc_r+0xdc>
 8003a32:	f8c8 7000 	str.w	r7, [r8]
 8003a36:	e00f      	b.n	8003a58 <_malloc_r+0xa8>
 8003a38:	6822      	ldr	r2, [r4, #0]
 8003a3a:	1b52      	subs	r2, r2, r5
 8003a3c:	d420      	bmi.n	8003a80 <_malloc_r+0xd0>
 8003a3e:	2a0b      	cmp	r2, #11
 8003a40:	d917      	bls.n	8003a72 <_malloc_r+0xc2>
 8003a42:	1961      	adds	r1, r4, r5
 8003a44:	42a3      	cmp	r3, r4
 8003a46:	6025      	str	r5, [r4, #0]
 8003a48:	bf18      	it	ne
 8003a4a:	6059      	strne	r1, [r3, #4]
 8003a4c:	6863      	ldr	r3, [r4, #4]
 8003a4e:	bf08      	it	eq
 8003a50:	f8c8 1000 	streq.w	r1, [r8]
 8003a54:	5162      	str	r2, [r4, r5]
 8003a56:	604b      	str	r3, [r1, #4]
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f000 f82f 	bl	8003abc <__malloc_unlock>
 8003a5e:	f104 000b 	add.w	r0, r4, #11
 8003a62:	1d23      	adds	r3, r4, #4
 8003a64:	f020 0007 	bic.w	r0, r0, #7
 8003a68:	1ac2      	subs	r2, r0, r3
 8003a6a:	bf1c      	itt	ne
 8003a6c:	1a1b      	subne	r3, r3, r0
 8003a6e:	50a3      	strne	r3, [r4, r2]
 8003a70:	e7af      	b.n	80039d2 <_malloc_r+0x22>
 8003a72:	6862      	ldr	r2, [r4, #4]
 8003a74:	42a3      	cmp	r3, r4
 8003a76:	bf0c      	ite	eq
 8003a78:	f8c8 2000 	streq.w	r2, [r8]
 8003a7c:	605a      	strne	r2, [r3, #4]
 8003a7e:	e7eb      	b.n	8003a58 <_malloc_r+0xa8>
 8003a80:	4623      	mov	r3, r4
 8003a82:	6864      	ldr	r4, [r4, #4]
 8003a84:	e7ae      	b.n	80039e4 <_malloc_r+0x34>
 8003a86:	463c      	mov	r4, r7
 8003a88:	687f      	ldr	r7, [r7, #4]
 8003a8a:	e7b6      	b.n	80039fa <_malloc_r+0x4a>
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	42a3      	cmp	r3, r4
 8003a92:	d1fb      	bne.n	8003a8c <_malloc_r+0xdc>
 8003a94:	2300      	movs	r3, #0
 8003a96:	6053      	str	r3, [r2, #4]
 8003a98:	e7de      	b.n	8003a58 <_malloc_r+0xa8>
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	6033      	str	r3, [r6, #0]
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f000 f80c 	bl	8003abc <__malloc_unlock>
 8003aa4:	e794      	b.n	80039d0 <_malloc_r+0x20>
 8003aa6:	6005      	str	r5, [r0, #0]
 8003aa8:	e7d6      	b.n	8003a58 <_malloc_r+0xa8>
 8003aaa:	bf00      	nop
 8003aac:	20000240 	.word	0x20000240

08003ab0 <__malloc_lock>:
 8003ab0:	4801      	ldr	r0, [pc, #4]	@ (8003ab8 <__malloc_lock+0x8>)
 8003ab2:	f000 b84b 	b.w	8003b4c <__retarget_lock_acquire_recursive>
 8003ab6:	bf00      	nop
 8003ab8:	2000037c 	.word	0x2000037c

08003abc <__malloc_unlock>:
 8003abc:	4801      	ldr	r0, [pc, #4]	@ (8003ac4 <__malloc_unlock+0x8>)
 8003abe:	f000 b846 	b.w	8003b4e <__retarget_lock_release_recursive>
 8003ac2:	bf00      	nop
 8003ac4:	2000037c 	.word	0x2000037c

08003ac8 <memset>:
 8003ac8:	4402      	add	r2, r0
 8003aca:	4603      	mov	r3, r0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d100      	bne.n	8003ad2 <memset+0xa>
 8003ad0:	4770      	bx	lr
 8003ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad6:	e7f9      	b.n	8003acc <memset+0x4>

08003ad8 <_sbrk_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4d06      	ldr	r5, [pc, #24]	@ (8003af4 <_sbrk_r+0x1c>)
 8003adc:	2300      	movs	r3, #0
 8003ade:	4604      	mov	r4, r0
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	f7fd fe8a 	bl	80017fc <_sbrk>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_sbrk_r+0x1a>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_sbrk_r+0x1a>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	20000380 	.word	0x20000380

08003af8 <__errno>:
 8003af8:	4b01      	ldr	r3, [pc, #4]	@ (8003b00 <__errno+0x8>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000138 	.word	0x20000138

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4d0d      	ldr	r5, [pc, #52]	@ (8003b3c <__libc_init_array+0x38>)
 8003b08:	4c0d      	ldr	r4, [pc, #52]	@ (8003b40 <__libc_init_array+0x3c>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	2600      	movs	r6, #0
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	4d0b      	ldr	r5, [pc, #44]	@ (8003b44 <__libc_init_array+0x40>)
 8003b16:	4c0c      	ldr	r4, [pc, #48]	@ (8003b48 <__libc_init_array+0x44>)
 8003b18:	f000 f872 	bl	8003c00 <_init>
 8003b1c:	1b64      	subs	r4, r4, r5
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	2600      	movs	r6, #0
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	08003c68 	.word	0x08003c68
 8003b40:	08003c68 	.word	0x08003c68
 8003b44:	08003c68 	.word	0x08003c68
 8003b48:	08003c6c 	.word	0x08003c6c

08003b4c <__retarget_lock_acquire_recursive>:
 8003b4c:	4770      	bx	lr

08003b4e <__retarget_lock_release_recursive>:
 8003b4e:	4770      	bx	lr

08003b50 <memcpy>:
 8003b50:	440a      	add	r2, r1
 8003b52:	4291      	cmp	r1, r2
 8003b54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003b58:	d100      	bne.n	8003b5c <memcpy+0xc>
 8003b5a:	4770      	bx	lr
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b66:	4291      	cmp	r1, r2
 8003b68:	d1f9      	bne.n	8003b5e <memcpy+0xe>
 8003b6a:	bd10      	pop	{r4, pc}

08003b6c <_free_r>:
 8003b6c:	b538      	push	{r3, r4, r5, lr}
 8003b6e:	4605      	mov	r5, r0
 8003b70:	2900      	cmp	r1, #0
 8003b72:	d041      	beq.n	8003bf8 <_free_r+0x8c>
 8003b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b78:	1f0c      	subs	r4, r1, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bfb8      	it	lt
 8003b7e:	18e4      	addlt	r4, r4, r3
 8003b80:	f7ff ff96 	bl	8003ab0 <__malloc_lock>
 8003b84:	4a1d      	ldr	r2, [pc, #116]	@ (8003bfc <_free_r+0x90>)
 8003b86:	6813      	ldr	r3, [r2, #0]
 8003b88:	b933      	cbnz	r3, 8003b98 <_free_r+0x2c>
 8003b8a:	6063      	str	r3, [r4, #4]
 8003b8c:	6014      	str	r4, [r2, #0]
 8003b8e:	4628      	mov	r0, r5
 8003b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b94:	f7ff bf92 	b.w	8003abc <__malloc_unlock>
 8003b98:	42a3      	cmp	r3, r4
 8003b9a:	d908      	bls.n	8003bae <_free_r+0x42>
 8003b9c:	6820      	ldr	r0, [r4, #0]
 8003b9e:	1821      	adds	r1, r4, r0
 8003ba0:	428b      	cmp	r3, r1
 8003ba2:	bf01      	itttt	eq
 8003ba4:	6819      	ldreq	r1, [r3, #0]
 8003ba6:	685b      	ldreq	r3, [r3, #4]
 8003ba8:	1809      	addeq	r1, r1, r0
 8003baa:	6021      	streq	r1, [r4, #0]
 8003bac:	e7ed      	b.n	8003b8a <_free_r+0x1e>
 8003bae:	461a      	mov	r2, r3
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	b10b      	cbz	r3, 8003bb8 <_free_r+0x4c>
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	d9fa      	bls.n	8003bae <_free_r+0x42>
 8003bb8:	6811      	ldr	r1, [r2, #0]
 8003bba:	1850      	adds	r0, r2, r1
 8003bbc:	42a0      	cmp	r0, r4
 8003bbe:	d10b      	bne.n	8003bd8 <_free_r+0x6c>
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	4401      	add	r1, r0
 8003bc4:	1850      	adds	r0, r2, r1
 8003bc6:	4283      	cmp	r3, r0
 8003bc8:	6011      	str	r1, [r2, #0]
 8003bca:	d1e0      	bne.n	8003b8e <_free_r+0x22>
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	6053      	str	r3, [r2, #4]
 8003bd2:	4408      	add	r0, r1
 8003bd4:	6010      	str	r0, [r2, #0]
 8003bd6:	e7da      	b.n	8003b8e <_free_r+0x22>
 8003bd8:	d902      	bls.n	8003be0 <_free_r+0x74>
 8003bda:	230c      	movs	r3, #12
 8003bdc:	602b      	str	r3, [r5, #0]
 8003bde:	e7d6      	b.n	8003b8e <_free_r+0x22>
 8003be0:	6820      	ldr	r0, [r4, #0]
 8003be2:	1821      	adds	r1, r4, r0
 8003be4:	428b      	cmp	r3, r1
 8003be6:	bf04      	itt	eq
 8003be8:	6819      	ldreq	r1, [r3, #0]
 8003bea:	685b      	ldreq	r3, [r3, #4]
 8003bec:	6063      	str	r3, [r4, #4]
 8003bee:	bf04      	itt	eq
 8003bf0:	1809      	addeq	r1, r1, r0
 8003bf2:	6021      	streq	r1, [r4, #0]
 8003bf4:	6054      	str	r4, [r2, #4]
 8003bf6:	e7ca      	b.n	8003b8e <_free_r+0x22>
 8003bf8:	bd38      	pop	{r3, r4, r5, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000240 	.word	0x20000240

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
