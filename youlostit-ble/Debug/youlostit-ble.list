
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004bc8  08004bc8  00005bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c80  08004c80  000061bc  2**0
                  CONTENTS
  4 .ARM          00000008  08004c80  08004c80  00005c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c88  08004c88  000061bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c88  08004c88  00005c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c8c  08004c8c  00005c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08004c90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001bc  08004e4c  000061bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08004e4c  000064c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a62e  00000000  00000000  000061ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed8  00000000  00000000  0001081a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  000126f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000719  00000000  00000000  00013088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276e1  00000000  00000000  000137a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab3d  00000000  00000000  0003ae82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1633  00000000  00000000  000459bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136ff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  00137038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00139e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001bc 	.word	0x200001bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bb0 	.word	0x08004bb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c0 	.word	0x200001c0
 80001cc:	08004bb0 	.word	0x08004bb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler
 
 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 800062e:	2006      	movs	r0, #6
 8000630:	f003 fa8a 	bl	8003b48 <malloc>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	4b70      	ldr	r3, [pc, #448]	@ (80007fc <ble_init+0x1d4>)
 800063a:	601a      	str	r2, [r3, #0]
	 int res;
 
	 while(!dataAvailable);
 800063c:	bf00      	nop
 800063e:	4b70      	ldr	r3, [pc, #448]	@ (8000800 <ble_init+0x1d8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0fb      	beq.n	800063e <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 8000646:	4b6d      	ldr	r3, [pc, #436]	@ (80007fc <ble_init+0x1d4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2106      	movs	r1, #6
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f905 	bl	800085c <fetchBleEvent>
 8000652:	6078      	str	r0, [r7, #4]
 
	 if(res==BLE_OK){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d111      	bne.n	800067e <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 800065a:	4b68      	ldr	r3, [pc, #416]	@ (80007fc <ble_init+0x1d4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2206      	movs	r2, #6
 8000660:	4968      	ldr	r1, [pc, #416]	@ (8000804 <ble_init+0x1dc>)
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f984 	bl	8000970 <checkEventResp>
 8000668:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d106      	bne.n	800067e <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 8000670:	4b65      	ldr	r3, [pc, #404]	@ (8000808 <ble_init+0x1e0>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b63      	ldr	r3, [pc, #396]	@ (8000808 <ble_init+0x1e0>)
 800067c:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 800067e:	200a      	movs	r0, #10
 8000680:	f001 fb64 	bl	8001d4c <HAL_Delay>
	 free(rxEvent);
 8000684:	4b5d      	ldr	r3, [pc, #372]	@ (80007fc <ble_init+0x1d4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f003 fa65 	bl	8003b58 <free>
 
	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 800068e:	2300      	movs	r3, #0
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2307      	movs	r3, #7
 8000694:	4a5d      	ldr	r2, [pc, #372]	@ (800080c <ble_init+0x1e4>)
 8000696:	2104      	movs	r1, #4
 8000698:	485d      	ldr	r0, [pc, #372]	@ (8000810 <ble_init+0x1e8>)
 800069a:	f000 fa9f 	bl	8000bdc <BLE_command>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d106      	bne.n	80006b2 <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80006a4:	4b58      	ldr	r3, [pc, #352]	@ (8000808 <ble_init+0x1e0>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	4b56      	ldr	r3, [pc, #344]	@ (8000808 <ble_init+0x1e0>)
 80006b0:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80006b2:	4b52      	ldr	r3, [pc, #328]	@ (80007fc <ble_init+0x1d4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fa4e 	bl	8003b58 <free>
 
	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 80006bc:	2303      	movs	r3, #3
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2307      	movs	r3, #7
 80006c2:	4a54      	ldr	r2, [pc, #336]	@ (8000814 <ble_init+0x1ec>)
 80006c4:	2107      	movs	r1, #7
 80006c6:	4854      	ldr	r0, [pc, #336]	@ (8000818 <ble_init+0x1f0>)
 80006c8:	f000 fa88 	bl	8000bdc <BLE_command>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d11b      	bne.n	800070a <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 80006d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000808 <ble_init+0x1e0>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b4a      	ldr	r3, [pc, #296]	@ (8000808 <ble_init+0x1e0>)
 80006de:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 80006e0:	4b46      	ldr	r3, [pc, #280]	@ (80007fc <ble_init+0x1d4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3307      	adds	r3, #7
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b4c      	ldr	r3, [pc, #304]	@ (800081c <ble_init+0x1f4>)
 80006ec:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 80006ee:	4b43      	ldr	r3, [pc, #268]	@ (80007fc <ble_init+0x1d4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3309      	adds	r3, #9
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b49      	ldr	r3, [pc, #292]	@ (8000820 <ble_init+0x1f8>)
 80006fa:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 80006fc:	4b3f      	ldr	r3, [pc, #252]	@ (80007fc <ble_init+0x1d4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	330b      	adds	r3, #11
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b29a      	uxth	r2, r3
 8000706:	4b47      	ldr	r3, [pc, #284]	@ (8000824 <ble_init+0x1fc>)
 8000708:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800070a:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <ble_init+0x1d4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fa22 	bl	8003b58 <free>
 
	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000714:	4b44      	ldr	r3, [pc, #272]	@ (8000828 <ble_init+0x200>)
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2307      	movs	r3, #7
 800071a:	2200      	movs	r2, #0
 800071c:	4940      	ldr	r1, [pc, #256]	@ (8000820 <ble_init+0x1f8>)
 800071e:	483f      	ldr	r0, [pc, #252]	@ (800081c <ble_init+0x1f4>)
 8000720:	f000 fb22 	bl	8000d68 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 8000724:	4b38      	ldr	r3, [pc, #224]	@ (8000808 <ble_init+0x1e0>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b36      	ldr	r3, [pc, #216]	@ (8000808 <ble_init+0x1e0>)
 8000730:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 8000732:	4b32      	ldr	r3, [pc, #200]	@ (80007fc <ble_init+0x1d4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fa0e 	bl	8003b58 <free>
 
	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 800073c:	2300      	movs	r3, #0
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2307      	movs	r3, #7
 8000742:	4a3a      	ldr	r2, [pc, #232]	@ (800082c <ble_init+0x204>)
 8000744:	2110      	movs	r1, #16
 8000746:	483a      	ldr	r0, [pc, #232]	@ (8000830 <ble_init+0x208>)
 8000748:	f000 fa48 	bl	8000bdc <BLE_command>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d106      	bne.n	8000760 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 8000752:	4b2d      	ldr	r3, [pc, #180]	@ (8000808 <ble_init+0x1e0>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	b29a      	uxth	r2, r3
 800075c:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <ble_init+0x1e0>)
 800075e:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000760:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <ble_init+0x1d4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f003 f9f7 	bl	8003b58 <free>
 
	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 800076a:	2300      	movs	r3, #0
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2307      	movs	r3, #7
 8000770:	4a30      	ldr	r2, [pc, #192]	@ (8000834 <ble_init+0x20c>)
 8000772:	2106      	movs	r1, #6
 8000774:	4830      	ldr	r0, [pc, #192]	@ (8000838 <ble_init+0x210>)
 8000776:	f000 fa31 	bl	8000bdc <BLE_command>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d106      	bne.n	800078e <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 8000780:	4b21      	ldr	r3, [pc, #132]	@ (8000808 <ble_init+0x1e0>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	b29a      	uxth	r2, r3
 800078a:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <ble_init+0x1e0>)
 800078c:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800078e:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <ble_init+0x1d4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f003 f9e0 	bl	8003b58 <free>
 
	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000798:	2300      	movs	r3, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2307      	movs	r3, #7
 800079e:	4a27      	ldr	r2, [pc, #156]	@ (800083c <ble_init+0x214>)
 80007a0:	2124      	movs	r1, #36	@ 0x24
 80007a2:	4827      	ldr	r0, [pc, #156]	@ (8000840 <ble_init+0x218>)
 80007a4:	f000 fa1a 	bl	8000bdc <BLE_command>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d106      	bne.n	80007bc <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <ble_init+0x1e0>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <ble_init+0x1e0>)
 80007ba:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <ble_init+0x1d4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 f9c9 	bl	8003b58 <free>
 
	 //This will start the advertisment,
	 setConnectable();
 80007c6:	f000 f989 	bl	8000adc <setConnectable>
 
	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 80007ca:	2207      	movs	r2, #7
 80007cc:	491d      	ldr	r1, [pc, #116]	@ (8000844 <ble_init+0x21c>)
 80007ce:	481e      	ldr	r0, [pc, #120]	@ (8000848 <ble_init+0x220>)
 80007d0:	f000 fa50 	bl	8000c74 <addService>
 
	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 80007d4:	2310      	movs	r3, #16
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2314      	movs	r3, #20
 80007da:	4a1a      	ldr	r2, [pc, #104]	@ (8000844 <ble_init+0x21c>)
 80007dc:	491b      	ldr	r1, [pc, #108]	@ (800084c <ble_init+0x224>)
 80007de:	481c      	ldr	r0, [pc, #112]	@ (8000850 <ble_init+0x228>)
 80007e0:	f000 fa80 	bl	8000ce4 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 80007e4:	2304      	movs	r3, #4
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2314      	movs	r3, #20
 80007ea:	4a16      	ldr	r2, [pc, #88]	@ (8000844 <ble_init+0x21c>)
 80007ec:	4919      	ldr	r1, [pc, #100]	@ (8000854 <ble_init+0x22c>)
 80007ee:	481a      	ldr	r0, [pc, #104]	@ (8000858 <ble_init+0x230>)
 80007f0:	f000 fa78 	bl	8000ce4 <addCharacteristic>
 
	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 80007f4:	bf00      	nop
 }
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200002f0 	.word	0x200002f0
 8000800:	20000308 	.word	0x20000308
 8000804:	20000000 	.word	0x20000000
 8000808:	200002ee 	.word	0x200002ee
 800080c:	2000000c 	.word	0x2000000c
 8000810:	20000008 	.word	0x20000008
 8000814:	2000001c 	.word	0x2000001c
 8000818:	20000014 	.word	0x20000014
 800081c:	200001d8 	.word	0x200001d8
 8000820:	200001dc 	.word	0x200001dc
 8000824:	200001e0 	.word	0x200001e0
 8000828:	20000114 	.word	0x20000114
 800082c:	20000034 	.word	0x20000034
 8000830:	20000024 	.word	0x20000024
 8000834:	20000044 	.word	0x20000044
 8000838:	2000003c 	.word	0x2000003c
 800083c:	20000070 	.word	0x20000070
 8000840:	2000004c 	.word	0x2000004c
 8000844:	200002e4 	.word	0x200002e4
 8000848:	2000011c 	.word	0x2000011c
 800084c:	200002ec 	.word	0x200002ec
 8000850:	2000013c 	.word	0x2000013c
 8000854:	200002e8 	.word	0x200002e8
 8000858:	2000012c 	.word	0x2000012c

0800085c <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }
 
 int fetchBleEvent(uint8_t *container, int size){
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	@ 0x30
 8000860:	af02      	add	r7, sp, #8
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
 
   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000866:	4a3d      	ldr	r2, [pc, #244]	@ (800095c <fetchBleEvent+0x100>)
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000870:	6018      	str	r0, [r3, #0]
 8000872:	3304      	adds	r3, #4
 8000874:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];
 
   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000876:	2140      	movs	r1, #64	@ 0x40
 8000878:	4839      	ldr	r0, [pc, #228]	@ (8000960 <fetchBleEvent+0x104>)
 800087a:	f001 fd47 	bl	800230c <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d065      	beq.n	8000950 <fetchBleEvent+0xf4>
 
   HAL_Delay(5);
 8000884:	2005      	movs	r0, #5
 8000886:	f001 fa61 	bl	8001d4c <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000890:	4834      	ldr	r0, [pc, #208]	@ (8000964 <fetchBleEvent+0x108>)
 8000892:	f001 fd53 	bl	800233c <HAL_GPIO_WritePin>
 
   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000896:	f107 0210 	add.w	r2, r7, #16
 800089a:	f107 0118 	add.w	r1, r7, #24
 800089e:	2301      	movs	r3, #1
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2305      	movs	r3, #5
 80008a4:	4830      	ldr	r0, [pc, #192]	@ (8000968 <fetchBleEvent+0x10c>)
 80008a6:	f002 fdc9 	bl	800343c <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b0:	482c      	ldr	r0, [pc, #176]	@ (8000964 <fetchBleEvent+0x108>)
 80008b2:	f001 fd43 	bl	800233c <HAL_GPIO_WritePin>
   HAL_Delay(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f001 fa48 	bl	8001d4c <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c2:	4828      	ldr	r0, [pc, #160]	@ (8000964 <fetchBleEvent+0x108>)
 80008c4:	f001 fd3a 	bl	800233c <HAL_GPIO_WritePin>
 
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80008c8:	f107 0210 	add.w	r2, r7, #16
 80008cc:	f107 0118 	add.w	r1, r7, #24
 80008d0:	2301      	movs	r3, #1
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2305      	movs	r3, #5
 80008d6:	4824      	ldr	r0, [pc, #144]	@ (8000968 <fetchBleEvent+0x10c>)
 80008d8:	f002 fdb0 	bl	800343c <HAL_SPI_TransmitReceive>
 
   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 80008dc:	7cfb      	ldrb	r3, [r7, #19]
 80008de:	461a      	mov	r2, r3
 80008e0:	7d3b      	ldrb	r3, [r7, #20]
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	4313      	orrs	r3, r2
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 80008e8:	23ff      	movs	r3, #255	@ 0xff
 80008ea:	73fb      	strb	r3, [r7, #15]
 
   if(dataSize>size){
 80008ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dd01      	ble.n	80008f8 <fetchBleEvent+0x9c>
	   dataSize=size;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
   }
 
   if(dataSize>0){
 80008f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	dd1f      	ble.n	800093e <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
 8000902:	e00d      	b.n	8000920 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000904:	6a3b      	ldr	r3, [r7, #32]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	441a      	add	r2, r3
 800090a:	f107 010f 	add.w	r1, r7, #15
 800090e:	2301      	movs	r3, #1
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2301      	movs	r3, #1
 8000914:	4814      	ldr	r0, [pc, #80]	@ (8000968 <fetchBleEvent+0x10c>)
 8000916:	f002 fd91 	bl	800343c <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 800091a:	6a3b      	ldr	r3, [r7, #32]
 800091c:	3301      	adds	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
 8000920:	6a3a      	ldr	r2, [r7, #32]
 8000922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000924:	429a      	cmp	r2, r3
 8000926:	dbed      	blt.n	8000904 <fetchBleEvent+0xa8>
 
		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092e:	480d      	ldr	r0, [pc, #52]	@ (8000964 <fetchBleEvent+0x108>)
 8000930:	f001 fd04 	bl	800233c <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }
 
   //let's stop the SPI2
   dataAvailable=0;
 8000934:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <fetchBleEvent+0x110>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e00a      	b.n	8000954 <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000944:	4807      	ldr	r0, [pc, #28]	@ (8000964 <fetchBleEvent+0x108>)
 8000946:	f001 fcf9 	bl	800233c <HAL_GPIO_WritePin>
		 return -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800094e:	e001      	b.n	8000954 <fetchBleEvent+0xf8>
   }else{
   return -2;
 8000950:	f06f 0301 	mvn.w	r3, #1
   }
 }
 8000954:	4618      	mov	r0, r3
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	08004bc8 	.word	0x08004bc8
 8000960:	48001000 	.word	0x48001000
 8000964:	48000c00 	.word	0x48000c00
 8000968:	2000030c 	.word	0x2000030c
 800096c:	20000308 	.word	0x20000308

08000970 <checkEventResp>:
 
 
 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000970:	b480      	push	{r7}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
	 int j=0;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 
	 for(j=0;j<size;j++){
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00f      	b.n	80009a6 <checkEventResp+0x36>
 
		 if(event[j]!=reference[j]){
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	440b      	add	r3, r1
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	d002      	beq.n	80009a0 <checkEventResp+0x30>
			 return -1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800099e:	e007      	b.n	80009b0 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dbeb      	blt.n	8000986 <checkEventResp+0x16>
		 }
	 }
 
 return BLE_OK;
 80009ae:	2300      	movs	r3, #0
 }
 80009b0:	4618      	mov	r0, r3
 80009b2:	371c      	adds	r7, #28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <sendCommand>:
 
 void sendCommand(uint8_t *command,int size){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
 
	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 80009c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a44 <sendCommand+0x88>)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d0:	6018      	str	r0, [r3, #0]
 80009d2:	3304      	adds	r3, #4
 80009d4:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];
 
	   int result;
 
	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009dc:	481a      	ldr	r0, [pc, #104]	@ (8000a48 <sendCommand+0x8c>)
 80009de:	f001 fcad 	bl	800233c <HAL_GPIO_WritePin>
 
	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80009e2:	f107 0208 	add.w	r2, r7, #8
 80009e6:	f107 0110 	add.w	r1, r7, #16
 80009ea:	2301      	movs	r3, #1
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2305      	movs	r3, #5
 80009f0:	4816      	ldr	r0, [pc, #88]	@ (8000a4c <sendCommand+0x90>)
 80009f2:	f002 fd23 	bl	800343c <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 80009f6:	7abb      	ldrb	r3, [r7, #10]
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	7a7a      	ldrb	r2, [r7, #9]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	db09      	blt.n	8000a1c <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	480e      	ldr	r0, [pc, #56]	@ (8000a4c <sendCommand+0x90>)
 8000a12:	f002 fb9e 	bl	8003152 <HAL_SPI_Transmit>
		 result=0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	e002      	b.n	8000a22 <sendCommand+0x66>
	   }else{
		 result=-1;
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a20:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <sendCommand+0x8c>)
 8000a2a:	f001 fc87 	bl	800233c <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <sendCommand+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1cd      	bne.n	80009d6 <sendCommand+0x1a>
 
 }
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08004bd0 	.word	0x08004bd0
 8000a48:	48000c00 	.word	0x48000c00
 8000a4c:	2000030c 	.word	0x2000030c
 8000a50:	20000308 	.word	0x20000308

08000a54 <catchBLE>:
 
 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 8000a5e:	217f      	movs	r1, #127	@ 0x7f
 8000a60:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <catchBLE+0x74>)
 8000a62:	f7ff fefb 	bl	800085c <fetchBleEvent>
 8000a66:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d128      	bne.n	8000ac0 <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 8000a6e:	2203      	movs	r2, #3
 8000a70:	4916      	ldr	r1, [pc, #88]	@ (8000acc <catchBLE+0x78>)
 8000a72:	4815      	ldr	r0, [pc, #84]	@ (8000ac8 <catchBLE+0x74>)
 8000a74:	f7ff ff7c 	bl	8000970 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000a78:	2205      	movs	r2, #5
 8000a7a:	4915      	ldr	r1, [pc, #84]	@ (8000ad0 <catchBLE+0x7c>)
 8000a7c:	4812      	ldr	r0, [pc, #72]	@ (8000ac8 <catchBLE+0x74>)
 8000a7e:	f7ff ff77 	bl	8000970 <checkEventResp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d109      	bne.n	8000a9c <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <catchBLE+0x74>)
 8000a8a:	795b      	ldrb	r3, [r3, #5]
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <catchBLE+0x80>)
 8000a90:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <catchBLE+0x74>)
 8000a94:	799b      	ldrb	r3, [r3, #6]
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <catchBLE+0x80>)
 8000a9a:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 8000a9c:	2205      	movs	r2, #5
 8000a9e:	490e      	ldr	r1, [pc, #56]	@ (8000ad8 <catchBLE+0x84>)
 8000aa0:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <catchBLE+0x74>)
 8000aa2:	f7ff ff65 	bl	8000970 <checkEventResp>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d109      	bne.n	8000ac0 <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <catchBLE+0x74>)
 8000aae:	795b      	ldrb	r3, [r3, #5]
 8000ab0:	b21a      	sxth	r2, r3
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <catchBLE+0x80>)
 8000ab4:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000ab6:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <catchBLE+0x74>)
 8000ab8:	799b      	ldrb	r3, [r3, #6]
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <catchBLE+0x80>)
 8000abe:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200001e4 	.word	0x200001e4
 8000acc:	200000ec 	.word	0x200000ec
 8000ad0:	200000f8 	.word	0x200000f8
 8000ad4:	2000014c 	.word	0x2000014c
 8000ad8:	20000100 	.word	0x20000100

08000adc <setConnectable>:
 
 void setConnectable(){
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
	 uint8_t* rxEvent;
	//Start advertising
	uint8_t *localname;
	int res;
	localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f003 f830 	bl	8003b48 <malloc>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60fb      	str	r3, [r7, #12]
	memcpy(localname,deviceName,sizeof(deviceName));
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4a37      	ldr	r2, [pc, #220]	@ (8000bcc <setConnectable+0xf0>)
 8000af0:	6810      	ldr	r0, [r2, #0]
 8000af2:	6018      	str	r0, [r3, #0]
 8000af4:	8891      	ldrh	r1, [r2, #4]
 8000af6:	7992      	ldrb	r2, [r2, #6]
 8000af8:	8099      	strh	r1, [r3, #4]
 8000afa:	719a      	strb	r2, [r3, #6]
	localname[sizeof(deviceName)+1]=0x00;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3308      	adds	r3, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+2]=0x00;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3309      	adds	r3, #9
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+3]=0x00;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	330a      	adds	r3, #10
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+4]=0x00;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	330b      	adds	r3, #11
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)]=0x00;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3307      	adds	r3, #7
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]


	ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <setConnectable+0xf4>)
 8000b26:	2208      	movs	r2, #8
 8000b28:	72da      	strb	r2, [r3, #11]
	ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000b2a:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <setConnectable+0xf4>)
 8000b2c:	2215      	movs	r2, #21
 8000b2e:	70da      	strb	r2, [r3, #3]

	uint8_t *discoverableCommand;
	discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000b30:	2019      	movs	r0, #25
 8000b32:	f003 f809 	bl	8003b48 <malloc>
 8000b36:	4603      	mov	r3, r0
 8000b38:	60bb      	str	r3, [r7, #8]
	memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	4a24      	ldr	r2, [pc, #144]	@ (8000bd0 <setConnectable+0xf4>)
 8000b3e:	461c      	mov	r4, r3
 8000b40:	4613      	mov	r3, r2
 8000b42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b44:	6020      	str	r0, [r4, #0]
 8000b46:	6061      	str	r1, [r4, #4]
 8000b48:	60a2      	str	r2, [r4, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	7323      	strb	r3, [r4, #12]
	memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	330d      	adds	r3, #13
 8000b52:	220c      	movs	r2, #12
 8000b54:	68f9      	ldr	r1, [r7, #12]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 fa4d 	bl	8003ff6 <memcpy>

	// remove existing buffer content
	rxEvent=(uint8_t*)malloc(7);
 8000b5c:	2007      	movs	r0, #7
 8000b5e:	f002 fff3 	bl	8003b48 <malloc>
 8000b62:	4603      	mov	r3, r0
 8000b64:	607b      	str	r3, [r7, #4]
	res=fetchBleEvent(rxEvent,7);
 8000b66:	2107      	movs	r1, #7
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff fe77 	bl	800085c <fetchBleEvent>
 8000b6e:	6038      	str	r0, [r7, #0]

	// send the command to make the peripheral discoverable
	sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000b70:	2119      	movs	r1, #25
 8000b72:	68b8      	ldr	r0, [r7, #8]
 8000b74:	f7ff ff22 	bl	80009bc <sendCommand>
	HAL_Delay(100);
 8000b78:	2064      	movs	r0, #100	@ 0x64
 8000b7a:	f001 f8e7 	bl	8001d4c <HAL_Delay>
	res=fetchBleEvent(rxEvent,7);
 8000b7e:	2107      	movs	r1, #7
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fe6b 	bl	800085c <fetchBleEvent>
 8000b86:	6038      	str	r0, [r7, #0]
	if(res==BLE_OK){
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10e      	bne.n	8000bac <setConnectable+0xd0>
	   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 8000b8e:	2207      	movs	r2, #7
 8000b90:	4910      	ldr	r1, [pc, #64]	@ (8000bd4 <setConnectable+0xf8>)
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff feec 	bl	8000970 <checkEventResp>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d106      	bne.n	8000bac <setConnectable+0xd0>
		  stackInitCompleteFlag|=0x80;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <setConnectable+0xfc>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <setConnectable+0xfc>)
 8000baa:	801a      	strh	r2, [r3, #0]
	   }
	}
	free(rxEvent);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f002 ffd3 	bl	8003b58 <free>
	free(discoverableCommand);
 8000bb2:	68b8      	ldr	r0, [r7, #8]
 8000bb4:	f002 ffd0 	bl	8003b58 <free>
	free(localname);
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f002 ffcd 	bl	8003b58 <free>
	HAL_Delay(10);
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f001 f8c4 	bl	8001d4c <HAL_Delay>
 }
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	20000114 	.word	0x20000114
 8000bd0:	20000078 	.word	0x20000078
 8000bd4:	20000088 	.word	0x20000088
 8000bd8:	200002ee 	.word	0x200002ee

08000bdc <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	603b      	str	r3, [r7, #0]
		int response;
 
		sendCommand(command,size);
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff fee5 	bl	80009bc <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	005a      	lsls	r2, r3, #1
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 ffa4 	bl	8003b48 <malloc>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <BLE_command+0x90>)
 8000c06:	601a      	str	r2, [r3, #0]
 
		long contatore=0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000c0c:	e007      	b.n	8000c1e <BLE_command+0x42>
			contatore++;
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	3301      	adds	r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	dc07      	bgt.n	8000c2e <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000c1e:	2140      	movs	r1, #64	@ 0x40
 8000c20:	4813      	ldr	r0, [pc, #76]	@ (8000c70 <BLE_command+0x94>)
 8000c22:	f001 fb73 	bl	800230c <HAL_GPIO_ReadPin>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0f0      	beq.n	8000c0e <BLE_command+0x32>
 8000c2c:	e000      	b.n	8000c30 <BLE_command+0x54>
				break;
 8000c2e:	bf00      	nop
			}
		}
 
 
		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <BLE_command+0x90>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	005a      	lsls	r2, r3, #1
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff fe0d 	bl	800085c <fetchBleEvent>
 8000c42:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d107      	bne.n	8000c5a <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <BLE_command+0x90>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe8c 	bl	8000970 <checkEventResp>
 8000c58:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 8000c5a:	200a      	movs	r0, #10
 8000c5c:	f001 f876 	bl	8001d4c <HAL_Delay>
 
 
	 return response;
 8000c60:	697b      	ldr	r3, [r7, #20]
 }
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200002f0 	.word	0x200002f0
 8000c70:	48001000 	.word	0x48001000

08000c74 <addService>:
 
 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 
 
	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <addService+0x60>)
 8000c82:	2210      	movs	r2, #16
 8000c84:	68f9      	ldr	r1, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 f9b5 	bl	8003ff6 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <addService+0x64>)
 8000c92:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000c94:	2301      	movs	r3, #1
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2307      	movs	r3, #7
 8000c9a:	4a10      	ldr	r2, [pc, #64]	@ (8000cdc <addService+0x68>)
 8000c9c:	2117      	movs	r1, #23
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <addService+0x64>)
 8000ca0:	f7ff ff9c 	bl	8000bdc <BLE_command>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10a      	bne.n	8000cc0 <addService+0x4c>
			handle[0]=rxEvent[7];
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <addService+0x6c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	79da      	ldrb	r2, [r3, #7]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <addService+0x6c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	7a12      	ldrb	r2, [r2, #8]
 8000cbe:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <addService+0x6c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 ff47 	bl	8003b58 <free>
 }
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000095 	.word	0x20000095
 8000cd8:	20000090 	.word	0x20000090
 8000cdc:	200000a8 	.word	0x200000a8
 8000ce0:	200002f0 	.word	0x200002f0

08000ce4 <addCharacteristic>:
 
 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <addCharacteristic+0x74>)
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	68f9      	ldr	r1, [r7, #12]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 f97c 	bl	8003ff6 <memcpy>
 
	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <addCharacteristic+0x78>)
 8000d04:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	785a      	ldrb	r2, [r3, #1]
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <addCharacteristic+0x78>)
 8000d0c:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000d0e:	4a13      	ldr	r2, [pc, #76]	@ (8000d5c <addCharacteristic+0x78>)
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 8000d14:	4a11      	ldr	r2, [pc, #68]	@ (8000d5c <addCharacteristic+0x78>)
 8000d16:	7e3b      	ldrb	r3, [r7, #24]
 8000d18:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2307      	movs	r3, #7
 8000d20:	4a0f      	ldr	r2, [pc, #60]	@ (8000d60 <addCharacteristic+0x7c>)
 8000d22:	211e      	movs	r1, #30
 8000d24:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <addCharacteristic+0x78>)
 8000d26:	f7ff ff59 	bl	8000bdc <BLE_command>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d10a      	bne.n	8000d46 <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <addCharacteristic+0x80>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	79da      	ldrb	r2, [r3, #7]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <addCharacteristic+0x80>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	3301      	adds	r3, #1
 8000d42:	7a12      	ldrb	r2, [r2, #8]
 8000d44:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000d46:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <addCharacteristic+0x80>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 ff04 	bl	8003b58 <free>
 }
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200000b7 	.word	0x200000b7
 8000d5c:	200000b0 	.word	0x200000b0
 8000d60:	200000d0 	.word	0x200000d0
 8000d64:	200002f0 	.word	0x200002f0

08000d68 <updateCharValue>:
 
 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	3306      	adds	r3, #6
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <updateCharValue+0x9c>)
 8000d80:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	781a      	ldrb	r2, [r3, #0]
 8000d86:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <updateCharValue+0x9c>)
 8000d88:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	785a      	ldrb	r2, [r3, #1]
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <updateCharValue+0x9c>)
 8000d90:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <updateCharValue+0x9c>)
 8000d98:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	785a      	ldrb	r2, [r3, #1]
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <updateCharValue+0x9c>)
 8000da0:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <updateCharValue+0x9c>)
 8000da8:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <updateCharValue+0x9c>)
 8000db0:	725a      	strb	r2, [r3, #9]
 
	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	330a      	adds	r3, #10
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fec6 	bl	8003b48 <malloc>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	4910      	ldr	r1, [pc, #64]	@ (8000e04 <updateCharValue+0x9c>)
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f003 f916 	bl	8003ff6 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	330a      	adds	r3, #10
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	6a39      	ldr	r1, [r7, #32]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 f90f 	bl	8003ff6 <memcpy>
 
	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f103 010a 	add.w	r1, r3, #10
 8000dde:	2300      	movs	r3, #0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2307      	movs	r3, #7
 8000de4:	4a08      	ldr	r2, [pc, #32]	@ (8000e08 <updateCharValue+0xa0>)
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff fef8 	bl	8000bdc <BLE_command>
 
	 free(commandComplete);
 8000dec:	6978      	ldr	r0, [r7, #20]
 8000dee:	f002 feb3 	bl	8003b58 <free>
	 free(rxEvent);
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <updateCharValue+0xa4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 feae 	bl	8003b58 <free>
 }
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200000d8 	.word	0x200000d8
 8000e08:	200000d0 	.word	0x200000d0
 8000e0c:	200002f0 	.word	0x200002f0

08000e10 <disconnectBLE>:
 
 /** 
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000e16:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <disconnectBLE+0x98>)
 8000e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e20:	d105      	bne.n	8000e2e <disconnectBLE+0x1e>
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <disconnectBLE+0x98>)
 8000e24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e2c:	d037      	beq.n	8000e9e <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <disconnectBLE+0x9c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <disconnectBLE+0x98>)
 8000e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <disconnectBLE+0x98>)
 8000e40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000e48:	2313      	movs	r3, #19
 8000e4a:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000e4c:	1d38      	adds	r0, r7, #4
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2307      	movs	r3, #7
 8000e54:	4a16      	ldr	r2, [pc, #88]	@ (8000eb0 <disconnectBLE+0xa0>)
 8000e56:	2107      	movs	r1, #7
 8000e58:	f7ff fec0 	bl	8000bdc <BLE_command>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d11e      	bne.n	8000ea0 <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000e62:	217f      	movs	r1, #127	@ 0x7f
 8000e64:	4813      	ldr	r0, [pc, #76]	@ (8000eb4 <disconnectBLE+0xa4>)
 8000e66:	f7ff fcf9 	bl	800085c <fetchBleEvent>
 8000e6a:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10f      	bne.n	8000e92 <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000e72:	2204      	movs	r2, #4
 8000e74:	4910      	ldr	r1, [pc, #64]	@ (8000eb8 <disconnectBLE+0xa8>)
 8000e76:	480f      	ldr	r0, [pc, #60]	@ (8000eb4 <disconnectBLE+0xa4>)
 8000e78:	f7ff fd7a 	bl	8000970 <checkEventResp>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d107      	bne.n	8000e92 <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <disconnectBLE+0x98>)
 8000e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e88:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <disconnectBLE+0x98>)
 8000e8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e90:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <disconnectBLE+0xac>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fe5e 	bl	8003b58 <free>
 8000e9c:	e000      	b.n	8000ea0 <disconnectBLE+0x90>
		return;
 8000e9e:	bf00      	nop
	 }
 }
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000014c 	.word	0x2000014c
 8000eac:	200000e8 	.word	0x200000e8
 8000eb0:	200000f0 	.word	0x200000f0
 8000eb4:	200001e4 	.word	0x200001e4
 8000eb8:	200000ec 	.word	0x200000ec
 8000ebc:	200002f0 	.word	0x200002f0

08000ec0 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d102      	bne.n	8000ed6 <setDiscoverability+0x16>
		 setConnectable();
 8000ed0:	f7ff fe04 	bl	8000adc <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000ed4:	e00f      	b.n	8000ef6 <setDiscoverability+0x36>
	 else if (mode == 0){
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10c      	bne.n	8000ef6 <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000edc:	2300      	movs	r3, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <setDiscoverability+0x40>)
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	4807      	ldr	r0, [pc, #28]	@ (8000f04 <setDiscoverability+0x44>)
 8000ee8:	f7ff fe78 	bl	8000bdc <BLE_command>
		 free(rxEvent);
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <setDiscoverability+0x48>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 fe31 	bl	8003b58 <free>
 }
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000010c 	.word	0x2000010c
 8000f04:	20000108 	.word	0x20000108
 8000f08:	200002f0 	.word	0x200002f0

08000f0c <i2c_init>:
#include <stdint.h>
#include <stm32l475xx.h>
#include <stdio.h>
#include "i2c.h"

void i2c_init() {
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;   // Enable I2C2 clock
 8000f10:	4b41      	ldr	r3, [pc, #260]	@ (8001018 <i2c_init+0x10c>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f14:	4a40      	ldr	r2, [pc, #256]	@ (8001018 <i2c_init+0x10c>)
 8000f16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f1a:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;   //enable GPIOB clock
 8000f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001018 <i2c_init+0x10c>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	4a3d      	ldr	r2, [pc, #244]	@ (8001018 <i2c_init+0x10c>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	64d3      	str	r3, [r2, #76]	@ 0x4c

	I2C2->CR1 &= ~I2C_CR1_PE; // Disable the I2C2 peripheral for configuration
 8000f28:	4b3c      	ldr	r3, [pc, #240]	@ (800101c <i2c_init+0x110>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a3b      	ldr	r2, [pc, #236]	@ (800101c <i2c_init+0x110>)
 8000f2e:	f023 0301 	bic.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]
	//repeat above for PB11 pin

	GPIOB->MODER &= ~(3 << (10 * 2));  // Clear PB10 mode
 8000f34:	4b3a      	ldr	r3, [pc, #232]	@ (8001020 <i2c_init+0x114>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a39      	ldr	r2, [pc, #228]	@ (8001020 <i2c_init+0x114>)
 8000f3a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000f3e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2 << (10 * 2));   // Set PB10 to Alternate Function mode (10)
 8000f40:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <i2c_init+0x114>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a36      	ldr	r2, [pc, #216]	@ (8001020 <i2c_init+0x114>)
 8000f46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f4a:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(3 << (11 * 2));  // Clear PB11 mode
 8000f4c:	4b34      	ldr	r3, [pc, #208]	@ (8001020 <i2c_init+0x114>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a33      	ldr	r2, [pc, #204]	@ (8001020 <i2c_init+0x114>)
 8000f52:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000f56:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2 << (11 * 2)); 	//Set PB11 to Alternate Function mode (10)
 8000f58:	4b31      	ldr	r3, [pc, #196]	@ (8001020 <i2c_init+0x114>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a30      	ldr	r2, [pc, #192]	@ (8001020 <i2c_init+0x114>)
 8000f5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f62:	6013      	str	r3, [r2, #0]

	 // setting to Open-Drain mode for PB10 and PB11

	GPIOB->OTYPER |= (1 << 10) | (1 << 11);   //set bit 10 and 11 to 1, which sets to open drain
 8000f64:	4b2e      	ldr	r3, [pc, #184]	@ (8001020 <i2c_init+0x114>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	4a2d      	ldr	r2, [pc, #180]	@ (8001020 <i2c_init+0x114>)
 8000f6a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000f6e:	6053      	str	r3, [r2, #4]

	GPIOB->PUPDR &= ~(3 << (10 * 2));  // Clear PB10 PUPDR
 8000f70:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <i2c_init+0x114>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	4a2a      	ldr	r2, [pc, #168]	@ (8001020 <i2c_init+0x114>)
 8000f76:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000f7a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1 << (10 * 2));   // Set PB10 as Pull-up (01)
 8000f7c:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <i2c_init+0x114>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a27      	ldr	r2, [pc, #156]	@ (8001020 <i2c_init+0x114>)
 8000f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f86:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR &= ~(3 << (11 * 2));  // Clear PB11 PUPDR
 8000f88:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <i2c_init+0x114>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a24      	ldr	r2, [pc, #144]	@ (8001020 <i2c_init+0x114>)
 8000f8e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000f92:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1 << (11 * 2));    //Set PB11 as Pull-up (01)
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <i2c_init+0x114>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <i2c_init+0x114>)
 8000f9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f9e:	60d3      	str	r3, [r2, #12]




	GPIOB->AFR[1] &= ~(0xF << GPIO_AFRH_AFSEL10_Pos);  //clear AF bits
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <i2c_init+0x114>)
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8001020 <i2c_init+0x114>)
 8000fa6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000faa:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(0xF << GPIO_AFRH_AFSEL11_Pos);
 8000fac:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <i2c_init+0x114>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001020 <i2c_init+0x114>)
 8000fb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000fb6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0x4 << GPIO_AFRH_AFSEL10_Pos) | (0x4 << GPIO_AFRH_AFSEL11_Pos);
 8000fb8:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <i2c_init+0x114>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fbc:	4a18      	ldr	r2, [pc, #96]	@ (8001020 <i2c_init+0x114>)
 8000fbe:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000fc2:	6253      	str	r3, [r2, #36]	@ 0x24



	I2C2->TIMINGR &= ~(I2C_TIMINGR_SCLL | I2C_TIMINGR_SCLH | I2C_TIMINGR_SCLDEL | I2C_TIMINGR_SDADEL | I2C_TIMINGR_PRESC);
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <i2c_init+0x110>)
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4a14      	ldr	r2, [pc, #80]	@ (800101c <i2c_init+0x110>)
 8000fca:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8000fce:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR |= (0 << I2C_TIMINGR_PRESC_Pos);

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SCLL;
	I2C2->TIMINGR |= (0x13 << I2C_TIMINGR_SCLL_Pos);
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <i2c_init+0x110>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4a11      	ldr	r2, [pc, #68]	@ (800101c <i2c_init+0x110>)
 8000fd6:	f043 0313 	orr.w	r3, r3, #19
 8000fda:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SCLH;
	I2C2->TIMINGR |= (0xF << I2C_TIMINGR_SCLH_Pos);
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <i2c_init+0x110>)
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <i2c_init+0x110>)
 8000fe2:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000fe6:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SDADEL;
	I2C2->TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL_Pos);
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <i2c_init+0x110>)
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <i2c_init+0x110>)
 8000fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff2:	6113      	str	r3, [r2, #16]

	//I2C2->TIMINGR &= ~I2C_TIMINGR_SCLDEL;
	I2C2->TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL_Pos);
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <i2c_init+0x110>)
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	4a08      	ldr	r2, [pc, #32]	@ (800101c <i2c_init+0x110>)
 8000ffa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ffe:	6113      	str	r3, [r2, #16]




	// Enable I2C2 peripheral
	I2C2->CR1 |= I2C_CR1_PE; // Enable the I2C2 peripheral
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <i2c_init+0x110>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a05      	ldr	r2, [pc, #20]	@ (800101c <i2c_init+0x110>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]



}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	40005800 	.word	0x40005800
 8001020:	48000400 	.word	0x48000400

08001024 <i2c_transaction>:
uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len){
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	603a      	str	r2, [r7, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	460b      	mov	r3, r1
 8001034:	71bb      	strb	r3, [r7, #6]
 8001036:	4613      	mov	r3, r2
 8001038:	717b      	strb	r3, [r7, #5]

	while (I2C2->ISR & I2C_ISR_BUSY);
 800103a:	bf00      	nop
 800103c:	4b51      	ldr	r3, [pc, #324]	@ (8001184 <i2c_transaction+0x160>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f9      	bne.n	800103c <i2c_transaction+0x18>



	I2C2->CR2 &= ~I2C_CR2_NBYTES;
 8001048:	4b4e      	ldr	r3, [pc, #312]	@ (8001184 <i2c_transaction+0x160>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a4d      	ldr	r2, [pc, #308]	@ (8001184 <i2c_transaction+0x160>)
 800104e:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001052:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_SADD;
 8001054:	4b4b      	ldr	r3, [pc, #300]	@ (8001184 <i2c_transaction+0x160>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a4a      	ldr	r2, [pc, #296]	@ (8001184 <i2c_transaction+0x160>)
 800105a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800105e:	f023 0303 	bic.w	r3, r3, #3
 8001062:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_START;
 8001064:	4b47      	ldr	r3, [pc, #284]	@ (8001184 <i2c_transaction+0x160>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a46      	ldr	r2, [pc, #280]	@ (8001184 <i2c_transaction+0x160>)
 800106a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800106e:	6053      	str	r3, [r2, #4]


	if (dir == 0) {  // WRITE OPERATION
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d13c      	bne.n	80010f0 <i2c_transaction+0xcc>


		//I2C2->CR2 = 0;
		I2C2->CR2 |= (address << 1);
 8001076:	4b43      	ldr	r3, [pc, #268]	@ (8001184 <i2c_transaction+0x160>)
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4941      	ldr	r1, [pc, #260]	@ (8001184 <i2c_transaction+0x160>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
		I2C2->CR2 |= (0 << I2C_CR2_RD_WRN_Pos);
 8001084:	4b3f      	ldr	r3, [pc, #252]	@ (8001184 <i2c_transaction+0x160>)
 8001086:	4a3f      	ldr	r2, [pc, #252]	@ (8001184 <i2c_transaction+0x160>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos);
 800108c:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <i2c_transaction+0x160>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	797b      	ldrb	r3, [r7, #5]
 8001092:	041b      	lsls	r3, r3, #16
 8001094:	493b      	ldr	r1, [pc, #236]	@ (8001184 <i2c_transaction+0x160>)
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]

		I2C2->CR2 |= I2C_CR2_START;
 800109a:	4b3a      	ldr	r3, [pc, #232]	@ (8001184 <i2c_transaction+0x160>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a39      	ldr	r2, [pc, #228]	@ (8001184 <i2c_transaction+0x160>)
 80010a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010a4:	6053      	str	r3, [r2, #4]

		for (uint8_t i = 0; i < len; i++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e015      	b.n	80010d8 <i2c_transaction+0xb4>

			while ((I2C2->ISR & I2C_ISR_NACKF) || (!(I2C2->ISR & I2C_ISR_TXIS)));  // Wait until TX buffer is empty
 80010ac:	bf00      	nop
 80010ae:	4b35      	ldr	r3, [pc, #212]	@ (8001184 <i2c_transaction+0x160>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f9      	bne.n	80010ae <i2c_transaction+0x8a>
 80010ba:	4b32      	ldr	r3, [pc, #200]	@ (8001184 <i2c_transaction+0x160>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f3      	beq.n	80010ae <i2c_transaction+0x8a>

			I2C2->TXDR = data[i] & 0xFF;  // Send data byte
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <i2c_transaction+0x160>)
 80010d0:	629a      	str	r2, [r3, #40]	@ 0x28
		for (uint8_t i = 0; i < len; i++) {
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3301      	adds	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	797b      	ldrb	r3, [r7, #5]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3e5      	bcc.n	80010ac <i2c_transaction+0x88>
			//printf("data ith elem w %x \n", data[i]);
		}
		while (!(I2C2->ISR & I2C_ISR_TC));  // Wait until transfer is complete
 80010e0:	bf00      	nop
 80010e2:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <i2c_transaction+0x160>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f9      	beq.n	80010e2 <i2c_transaction+0xbe>
 80010ee:	e038      	b.n	8001162 <i2c_transaction+0x13e>

	else {  // READ OPERATION



		I2C2->CR2 |= (address << 1);
 80010f0:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <i2c_transaction+0x160>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4922      	ldr	r1, [pc, #136]	@ (8001184 <i2c_transaction+0x160>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	604b      	str	r3, [r1, #4]
		I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos);
 80010fe:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <i2c_transaction+0x160>)
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	041b      	lsls	r3, r3, #16
 8001106:	491f      	ldr	r1, [pc, #124]	@ (8001184 <i2c_transaction+0x160>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
		I2C2->CR2 |= (1 << I2C_CR2_RD_WRN_Pos);
 800110c:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <i2c_transaction+0x160>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a1c      	ldr	r2, [pc, #112]	@ (8001184 <i2c_transaction+0x160>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001116:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <i2c_transaction+0x160>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a19      	ldr	r2, [pc, #100]	@ (8001184 <i2c_transaction+0x160>)
 800111e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001122:	6053      	str	r3, [r2, #4]

		for (uint8_t i = 0; i < len; i++) {
 8001124:	2300      	movs	r3, #0
 8001126:	73bb      	strb	r3, [r7, #14]
 8001128:	e010      	b.n	800114c <i2c_transaction+0x128>
			while (!(I2C2->ISR & I2C_ISR_RXNE));  // Wait until RX buffer is full
 800112a:	bf00      	nop
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <i2c_transaction+0x160>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f9      	beq.n	800112c <i2c_transaction+0x108>
			data[i] = I2C2->RXDR & 0xFF;  // Read data byte
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <i2c_transaction+0x160>)
 800113a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	b2ca      	uxtb	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) {
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	3301      	adds	r3, #1
 800114a:	73bb      	strb	r3, [r7, #14]
 800114c:	7bba      	ldrb	r2, [r7, #14]
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	429a      	cmp	r2, r3
 8001152:	d3ea      	bcc.n	800112a <i2c_transaction+0x106>
			//printf("data ith elem r %x \n", data[i]);
		}
		while (!(I2C2->ISR & I2C_ISR_TC));  // Wait until transfer is complete
 8001154:	bf00      	nop
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <i2c_transaction+0x160>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f9      	beq.n	8001156 <i2c_transaction+0x132>

	}

	I2C2->CR2 |= I2C_CR2_STOP;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <i2c_transaction+0x160>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <i2c_transaction+0x160>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116c:	6053      	str	r3, [r2, #4]
	I2C2->CR2 = 0x0000;
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <i2c_transaction+0x160>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]

	return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40005800 	.word	0x40005800

08001188 <lsm6dsl_init>:
#include "lsm6dsl.h"
#include "i2c.h"
#include <stdio.h>
#include <stm32l475xx.h>

void lsm6dsl_init() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0



	//write to CTRL_XL register
	uint8_t CTRL1_XL_read;
	uint8_t CTRL1_XL = 0x10;   //address of ctrlXL
 800118e:	2310      	movs	r3, #16
 8001190:	71fb      	strb	r3, [r7, #7]
	uint8_t CTRL1_XL_DATA[2] = {0x10, 0x60};
 8001192:	f246 0310 	movw	r3, #24592	@ 0x6010
 8001196:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(0x6A, 0, CTRL1_XL_DATA, 2);  //write
 8001198:	1d3a      	adds	r2, r7, #4
 800119a:	2302      	movs	r3, #2
 800119c:	2100      	movs	r1, #0
 800119e:	206a      	movs	r0, #106	@ 0x6a
 80011a0:	f7ff ff40 	bl	8001024 <i2c_transaction>


	//writing to INT1 CTRL register in the LSM6DSR to configure register (address 0x6A, dir = 0, data= 0x0D01, len =8)
	//printf("works here too\n");
	uint8_t INT1_CTRL_read;
	uint8_t INT1_CTRL = 0x0D;
 80011a4:	230d      	movs	r3, #13
 80011a6:	71bb      	strb	r3, [r7, #6]
	uint8_t INT1_CTRL_DATA[2] = {0x0D, 0x01};
 80011a8:	f240 130d 	movw	r3, #269	@ 0x10d
 80011ac:	803b      	strh	r3, [r7, #0]
	i2c_transaction(0x6A, 0, INT1_CTRL_DATA, 2);
 80011ae:	463a      	mov	r2, r7
 80011b0:	2302      	movs	r3, #2
 80011b2:	2100      	movs	r1, #0
 80011b4:	206a      	movs	r0, #106	@ 0x6a
 80011b6:	f7ff ff35 	bl	8001024 <i2c_transaction>

	//printf("INT1_CTRL is %x \n", INT1_CTRL_read);
	//i2c_transaction(0x6A, 0, &INT1_CTRL, 1);

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b088      	sub	sp, #32
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]

	//for x low and x high
	uint8_t reg_addyXL = 0x28;   //register address (x low)
 80011ce:	2328      	movs	r3, #40	@ 0x28
 80011d0:	77fb      	strb	r3, [r7, #31]
	uint8_t dataXL;   //declaring data array for the transaction function to read stuff into
	//repeat above for all register addresses

	i2c_transaction(0x6A, 0, &reg_addyXL, 1);
 80011d2:	f107 021f 	add.w	r2, r7, #31
 80011d6:	2301      	movs	r3, #1
 80011d8:	2100      	movs	r1, #0
 80011da:	206a      	movs	r0, #106	@ 0x6a
 80011dc:	f7ff ff22 	bl	8001024 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataXL, 1);   //read in the 1 byte from x low
 80011e0:	f107 021e 	add.w	r2, r7, #30
 80011e4:	2301      	movs	r3, #1
 80011e6:	2101      	movs	r1, #1
 80011e8:	206a      	movs	r0, #106	@ 0x6a
 80011ea:	f7ff ff1b 	bl	8001024 <i2c_transaction>

	uint8_t reg_addyXH = 0x29;   //register address (x high)
 80011ee:	2329      	movs	r3, #41	@ 0x29
 80011f0:	777b      	strb	r3, [r7, #29]
	uint8_t dataXH;   //declaring data array for the transaction function to read stuff into


	i2c_transaction(0x6A, 0, &reg_addyXH, 1);
 80011f2:	f107 021d 	add.w	r2, r7, #29
 80011f6:	2301      	movs	r3, #1
 80011f8:	2100      	movs	r1, #0
 80011fa:	206a      	movs	r0, #106	@ 0x6a
 80011fc:	f7ff ff12 	bl	8001024 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataXH, 1);   //read in the 1 byte from x high
 8001200:	f107 021c 	add.w	r2, r7, #28
 8001204:	2301      	movs	r3, #1
 8001206:	2101      	movs	r1, #1
 8001208:	206a      	movs	r0, #106	@ 0x6a
 800120a:	f7ff ff0b 	bl	8001024 <i2c_transaction>


	//for y low and y high

	uint8_t reg_addyYL = 0x2A;   //register address (y low)
 800120e:	232a      	movs	r3, #42	@ 0x2a
 8001210:	76fb      	strb	r3, [r7, #27]
	uint8_t dataYL;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyYL, 1);
 8001212:	f107 021b 	add.w	r2, r7, #27
 8001216:	2301      	movs	r3, #1
 8001218:	2100      	movs	r1, #0
 800121a:	206a      	movs	r0, #106	@ 0x6a
 800121c:	f7ff ff02 	bl	8001024 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataYL, 1);   //read in the 1 byte from y low
 8001220:	f107 021a 	add.w	r2, r7, #26
 8001224:	2301      	movs	r3, #1
 8001226:	2101      	movs	r1, #1
 8001228:	206a      	movs	r0, #106	@ 0x6a
 800122a:	f7ff fefb 	bl	8001024 <i2c_transaction>


	uint8_t reg_addyYH = 0x2B;   //register address (y high)
 800122e:	232b      	movs	r3, #43	@ 0x2b
 8001230:	767b      	strb	r3, [r7, #25]
	uint8_t dataYH;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyYH, 1);
 8001232:	f107 0219 	add.w	r2, r7, #25
 8001236:	2301      	movs	r3, #1
 8001238:	2100      	movs	r1, #0
 800123a:	206a      	movs	r0, #106	@ 0x6a
 800123c:	f7ff fef2 	bl	8001024 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataYH, 1);   //read in the 1 byte from y high
 8001240:	f107 0218 	add.w	r2, r7, #24
 8001244:	2301      	movs	r3, #1
 8001246:	2101      	movs	r1, #1
 8001248:	206a      	movs	r0, #106	@ 0x6a
 800124a:	f7ff feeb 	bl	8001024 <i2c_transaction>


	//for z low and z high
	uint8_t reg_addyZL = 0x2C;   //register address   (z low)
 800124e:	232c      	movs	r3, #44	@ 0x2c
 8001250:	75fb      	strb	r3, [r7, #23]
	uint8_t dataZL;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyZL, 1);
 8001252:	f107 0217 	add.w	r2, r7, #23
 8001256:	2301      	movs	r3, #1
 8001258:	2100      	movs	r1, #0
 800125a:	206a      	movs	r0, #106	@ 0x6a
 800125c:	f7ff fee2 	bl	8001024 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataZL, 1);   //read in the 1 byte from z low
 8001260:	f107 0216 	add.w	r2, r7, #22
 8001264:	2301      	movs	r3, #1
 8001266:	2101      	movs	r1, #1
 8001268:	206a      	movs	r0, #106	@ 0x6a
 800126a:	f7ff fedb 	bl	8001024 <i2c_transaction>


	uint8_t reg_addyZH = 0x2D;   //register address (z high)
 800126e:	232d      	movs	r3, #45	@ 0x2d
 8001270:	757b      	strb	r3, [r7, #21]
	uint8_t dataZH;   //declaring data array for the transaction function to read stuff into

	i2c_transaction(0x6A, 0, &reg_addyZH, 1);
 8001272:	f107 0215 	add.w	r2, r7, #21
 8001276:	2301      	movs	r3, #1
 8001278:	2100      	movs	r1, #0
 800127a:	206a      	movs	r0, #106	@ 0x6a
 800127c:	f7ff fed2 	bl	8001024 <i2c_transaction>
	i2c_transaction(0x6A, 1, &dataZH, 1);   //read in the 1 byte from z high
 8001280:	f107 0214 	add.w	r2, r7, #20
 8001284:	2301      	movs	r3, #1
 8001286:	2101      	movs	r1, #1
 8001288:	206a      	movs	r0, #106	@ 0x6a
 800128a:	f7ff fecb 	bl	8001024 <i2c_transaction>



	*x = (dataXH << 8 | dataXL);
 800128e:	7f3b      	ldrb	r3, [r7, #28]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
 8001294:	7fbb      	ldrb	r3, [r7, #30]
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21a      	sxth	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	801a      	strh	r2, [r3, #0]
	*y = (dataYH << 8 | dataYL);
 80012a0:	7e3b      	ldrb	r3, [r7, #24]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	7ebb      	ldrb	r3, [r7, #26]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	801a      	strh	r2, [r3, #0]
	*z = (dataZH << 8 | dataZL);
 80012b2:	7d3b      	ldrb	r3, [r7, #20]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	7dbb      	ldrb	r3, [r7, #22]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21a      	sxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	801a      	strh	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80012e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80012ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00b      	beq.n	800130c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012f4:	e000      	b.n	80012f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f9      	beq.n	80012f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001302:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_write>:
  * @brief  The application entry point.
  * @retval int
  */


int _write(int file, char *ptr, int len) {
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
	//ITM_SendChar('H');
    int i = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e009      	b.n	8001344 <_write+0x2a>
        ITM_SendChar(*ptr++);
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	60ba      	str	r2, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ffc7 	bl	80012cc <ITM_SendChar>
    for (i = 0; i < len; i++) {
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbf1      	blt.n	8001330 <_write+0x16>
    }
    return len;
 800134c:	687b      	ldr	r3, [r7, #4]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <main>:

int main(void)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b08d      	sub	sp, #52	@ 0x34
 800135c:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  HAL_Init();
 800135e:	f000 fc80 	bl	8001c62 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001362:	f000 f8e7 	bl	8001534 <SystemClock_Config>

  //PWR->CR1 |= PWR_CR1_LPR;   //set LPR bit in CR1 register for low power run mode

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f000 f969 	bl	800163c <MX_GPIO_Init>
  MX_SPI3_Init();
 800136a:	f000 f929 	bl	80015c0 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001378:	f000 ffe0 	bl	800233c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800137c:	200a      	movs	r0, #10
 800137e:	f000 fce5 	bl	8001d4c <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138c:	f000 ffd6 	bl	800233c <HAL_GPIO_WritePin>

  ble_init();
 8001390:	f7ff f94a 	bl	8000628 <ble_init>



  HAL_Delay(10);
 8001394:	200a      	movs	r0, #10
 8001396:	f000 fcd9 	bl	8001d4c <HAL_Delay>


  timer_init(TIM2);
 800139a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800139e:	f000 fbd3 	bl	8001b48 <timer_init>
  i2c_init();
 80013a2:	f7ff fdb3 	bl	8000f0c <i2c_init>
  lsm6dsl_init();
 80013a6:	f7ff feef 	bl	8001188 <lsm6dsl_init>
  uint8_t nonDiscoverable = 0;// by default be nondiscoverable
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  setDiscoverability(0);   //make it nonDiscoverable
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fd85 	bl	8000ec0 <setDiscoverability>
  int16_t prev_x = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t prev_y = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int16_t prev_z = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	847b      	strh	r3, [r7, #34]	@ 0x22


	//put lost detection algorithm here
	//poll continuously the values of the output registers.

	if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80013c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10b      	bne.n	80013e2 <main+0x8a>
 80013ca:	2140      	movs	r1, #64	@ 0x40
 80013cc:	484d      	ldr	r0, [pc, #308]	@ (8001504 <main+0x1ac>)
 80013ce:	f000 ff9d 	bl	800230c <HAL_GPIO_ReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <main+0x8a>
	catchBLE();
 80013d8:	f7ff fb3c 	bl	8000a54 <catchBLE>
	printf("it is here\n");
 80013dc:	484a      	ldr	r0, [pc, #296]	@ (8001508 <main+0x1b0>)
 80013de:	f002 fdbd 	bl	8003f5c <puts>
	// Loop forever
	}

	while(1) {
		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80013e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <main+0xa4>
 80013ea:	2140      	movs	r1, #64	@ 0x40
 80013ec:	4845      	ldr	r0, [pc, #276]	@ (8001504 <main+0x1ac>)
 80013ee:	f000 ff8d 	bl	800230c <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <main+0xa4>
			catchBLE();
 80013f8:	f7ff fb2c 	bl	8000a54 <catchBLE>
		}
		int16_t x;
		int16_t y;
		int16_t z;
		lsm6dsl_read_xyz(&x,&y,&z);
 80013fc:	f107 021a 	add.w	r2, r7, #26
 8001400:	f107 011c 	add.w	r1, r7, #28
 8001404:	f107 031e 	add.w	r3, r7, #30
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff feda 	bl	80011c2 <lsm6dsl_read_xyz>
		if(!(prev_x == 0 && prev_y == 0 && prev_z == 0)) {
 800140e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <main+0xce>
 8001416:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <main+0xce>
 800141e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001422:	2b00      	cmp	r3, #0
 8001424:	d03b      	beq.n	800149e <main+0x146>
			if (abs(x - prev_x) >= threshold || abs(y - prev_y) >= threshold || abs(z - prev_z) >= threshold) {  //it is moving
 8001426:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800142a:	461a      	mov	r2, r3
 800142c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001436:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800143a:	4b34      	ldr	r3, [pc, #208]	@ (800150c <main+0x1b4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	da1b      	bge.n	800147a <main+0x122>
 8001442:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001446:	461a      	mov	r2, r3
 8001448:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001452:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001456:	4b2d      	ldr	r3, [pc, #180]	@ (800150c <main+0x1b4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	da0d      	bge.n	800147a <main+0x122>
 800145e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001462:	461a      	mov	r2, r3
 8001464:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800146e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <main+0x1b4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	db0e      	blt.n	8001498 <main+0x140>
				lostFlag = 0;   //it is not lost
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <main+0x1b8>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
				disconnectBLE();   //disconnect before setting discoverability to 0
 8001480:	f7ff fcc6 	bl	8000e10 <disconnectBLE>
				setDiscoverability(0);    //make it nonDiscoverable
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fd1b 	bl	8000ec0 <setDiscoverability>
				startTimer = 0;   //stop the 1min timer since its not lost
 800148a:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <main+0x1bc>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
				counterup = 0;    //reset the lost timer
 8001490:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <main+0x1c0>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e002      	b.n	800149e <main+0x146>
			}
			else {  //it moved less than the threshold, so we say its lost
				startTimer = 1;
 8001498:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <main+0x1bc>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

			}
		}
		prev_x = x;   //set prev to be equal to the current x
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		prev_y = y;
 80014a2:	8bbb      	ldrh	r3, [r7, #28]
 80014a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		prev_z = z;
 80014a6:	8b7b      	ldrh	r3, [r7, #26]
 80014a8:	847b      	strh	r3, [r7, #34]	@ 0x22

		if(lostFlag) {   //if it is lost, set discoverable
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <main+0x1b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <main+0x160>
			setDiscoverability(1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff fd04 	bl	8000ec0 <setDiscoverability>
		}

		if(sendFlag) {
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <main+0x1c4>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01b      	beq.n	80014fa <main+0x1a2>
			// Send a string to the NORDIC UART service, remember to not include the newline
			unsigned char test_str[20] = "FMtag lost for";
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <main+0x1c8>)
 80014c4:	1d3c      	adds	r4, r7, #4
 80014c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c8:	c407      	stmia	r4!, {r0, r1, r2}
 80014ca:	8023      	strh	r3, [r4, #0]
 80014cc:	3402      	adds	r4, #2
 80014ce:	0c1b      	lsrs	r3, r3, #16
 80014d0:	7023      	strb	r3, [r4, #0]
 80014d2:	f107 0313 	add.w	r3, r7, #19
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	711a      	strb	r2, [r3, #4]
			snprintf(test_str, 20, "FMtag lost for %ds", numSeconds);
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <main+0x1cc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	1d38      	adds	r0, r7, #4
 80014e2:	4a11      	ldr	r2, [pc, #68]	@ (8001528 <main+0x1d0>)
 80014e4:	2114      	movs	r1, #20
 80014e6:	f002 fbe1 	bl	8003cac <sniprintf>
			updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2313      	movs	r3, #19
 80014f0:	2200      	movs	r2, #0
 80014f2:	490e      	ldr	r1, [pc, #56]	@ (800152c <main+0x1d4>)
 80014f4:	480e      	ldr	r0, [pc, #56]	@ (8001530 <main+0x1d8>)
 80014f6:	f7ff fc37 	bl	8000d68 <updateCharValue>
		}

		sendFlag = 0;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <main+0x1c4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]

		//wait for interrupt instruction
		__asm volatile ("wfi");
 8001500:	bf30      	wfi
	while(1) {
 8001502:	e76e      	b.n	80013e2 <main+0x8a>
 8001504:	48001000 	.word	0x48001000
 8001508:	08004bd8 	.word	0x08004bd8
 800150c:	20000150 	.word	0x20000150
 8001510:	200002f8 	.word	0x200002f8
 8001514:	200002fc 	.word	0x200002fc
 8001518:	200002f4 	.word	0x200002f4
 800151c:	20000304 	.word	0x20000304
 8001520:	08004bf8 	.word	0x08004bf8
 8001524:	20000300 	.word	0x20000300
 8001528:	08004be4 	.word	0x08004be4
 800152c:	200002ec 	.word	0x200002ec
 8001530:	200002e4 	.word	0x200002e4

08001534 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b096      	sub	sp, #88	@ 0x58
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2244      	movs	r2, #68	@ 0x44
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fd12 	bl	8003f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001556:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800155a:	f000 ff39 	bl	80023d0 <HAL_PWREx_ControlVoltageScaling>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001564:	f000 f902 	bl	800176c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001568:	2310      	movs	r3, #16
 800156a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;    //8Mhz
 8001574:	2370      	movs	r3, #112	@ 0x70
 8001576:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4618      	mov	r0, r3
 8001582:	f000 ff7b 	bl	800247c <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800158c:	f000 f8ee 	bl	800176c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001590:	230f      	movs	r3, #15
 8001592:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fb43 	bl	8002c34 <HAL_RCC_ClockConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015b4:	f000 f8da 	bl	800176c <Error_Handler>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3758      	adds	r7, #88	@ 0x58
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <MX_SPI3_Init+0x78>)
 80015c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015d2:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_SPI3_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <MX_SPI3_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_SPI3_Init+0x74>)
 800160e:	2207      	movs	r2, #7
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <MX_SPI3_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_SPI3_Init+0x74>)
 800161a:	2208      	movs	r2, #8
 800161c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_SPI3_Init+0x74>)
 8001620:	f001 fcf4 	bl	800300c <HAL_SPI_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800162a:	f000 f89f 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000030c 	.word	0x2000030c
 8001638:	40003c00 	.word	0x40003c00

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	4b43      	ldr	r3, [pc, #268]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a42      	ldr	r2, [pc, #264]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b40      	ldr	r3, [pc, #256]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <MX_GPIO_Init+0x124>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a3c      	ldr	r2, [pc, #240]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b3a      	ldr	r3, [pc, #232]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	4a36      	ldr	r2, [pc, #216]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168e:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	4b31      	ldr	r3, [pc, #196]	@ (8001760 <MX_GPIO_Init+0x124>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	4a30      	ldr	r2, [pc, #192]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016be:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2120      	movs	r1, #32
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d2:	f000 fe33 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016dc:	4821      	ldr	r0, [pc, #132]	@ (8001764 <MX_GPIO_Init+0x128>)
 80016de:	f000 fe2d 	bl	800233c <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ec:	f000 fe26 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80016f0:	2340      	movs	r3, #64	@ 0x40
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4818      	ldr	r0, [pc, #96]	@ (8001768 <MX_GPIO_Init+0x12c>)
 8001706:	f000 fc57 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800170a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001726:	f000 fc47 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800172a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4808      	ldr	r0, [pc, #32]	@ (8001764 <MX_GPIO_Init+0x128>)
 8001744:	f000 fc38 	bl	8001fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2017      	movs	r0, #23
 800174e:	f000 fbfc 	bl	8001f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001752:	2017      	movs	r0, #23
 8001754:	f000 fc15 	bl	8001f82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	48000c00 	.word	0x48000c00
 8001768:	48001000 	.word	0x48001000

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <Error_Handler+0x8>

08001778 <TIM2_IRQHandler>:
  }
  /* USER CODE END Error_Handler_Debug */
}


void TIM2_IRQHandler() {
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

	  // Check if the interrupt was caused by the update event
	if (TIM2->SR & TIM_SR_UIF) {
 800177c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <TIM2_IRQHandler+0x22>
		//Clear the update interrupt flag
		TIM2->SR &= ~TIM_SR_UIF;
 800178a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6113      	str	r3, [r2, #16]

	//have a counter that counts up every time we enter interrupt when its lost.
	// Enters interrupt 20 times per second (20hz), so counterup = 1200 means its been 1 min


	if(startTimer == 1) {
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <TIM2_IRQHandler+0x7c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d104      	bne.n	80017ac <TIM2_IRQHandler+0x34>
		counterup = counterup + 1;  //only start counting when the thing isn't moving
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <TIM2_IRQHandler+0x80>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a13      	ldr	r2, [pc, #76]	@ (80017f8 <TIM2_IRQHandler+0x80>)
 80017aa:	6013      	str	r3, [r2, #0]
	}
	/*else {
		counterup = 0;
	}*/

	if (counterup >= 6) {
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <TIM2_IRQHandler+0x80>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	dd1d      	ble.n	80017f0 <TIM2_IRQHandler+0x78>
		lostFlag = 1;   //it is lost
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <TIM2_IRQHandler+0x84>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

		//printf("%d\n", counterup);
		if((counterup % 2) == 0) {   //check if counterup is a multiple of 200 (multiple  of 200 marks 10 second intervals)
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <TIM2_IRQHandler+0x80>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <TIM2_IRQHandler+0x54>
			sendFlag = 1;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <TIM2_IRQHandler+0x88>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]

		}

		numSeconds = (unsigned int)(floor((counterup-6)*5));
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <TIM2_IRQHandler+0x80>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1f9a      	subs	r2, r3, #6
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe9b 	bl	8000514 <__aeabi_i2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7fe feff 	bl	80005e8 <__aeabi_d2uiz>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <TIM2_IRQHandler+0x8c>)
 80017ee:	6013      	str	r3, [r2, #0]
	}
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200002fc 	.word	0x200002fc
 80017f8:	200002f4 	.word	0x200002f4
 80017fc:	200002f8 	.word	0x200002f8
 8001800:	20000304 	.word	0x20000304
 8001804:	20000300 	.word	0x20000300

08001808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <HAL_MspInit+0x44>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001812:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <HAL_MspInit+0x44>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6613      	str	r3, [r2, #96]	@ 0x60
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <HAL_MspInit+0x44>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_MspInit+0x44>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182a:	4a08      	ldr	r2, [pc, #32]	@ (800184c <HAL_MspInit+0x44>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001830:	6593      	str	r3, [r2, #88]	@ 0x58
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_MspInit+0x44>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a17      	ldr	r2, [pc, #92]	@ (80018cc <HAL_SPI_MspInit+0x7c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d128      	bne.n	80018c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <HAL_SPI_MspInit+0x80>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001876:	4a16      	ldr	r2, [pc, #88]	@ (80018d0 <HAL_SPI_MspInit+0x80>)
 8001878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800187c:	6593      	str	r3, [r2, #88]	@ 0x58
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <HAL_SPI_MspInit+0x80>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_SPI_MspInit+0x80>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <HAL_SPI_MspInit+0x80>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_SPI_MspInit+0x80>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018a2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018b4:	2306      	movs	r3, #6
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <HAL_SPI_MspInit+0x84>)
 80018c0:	f000 fb7a 	bl	8001fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	@ 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40003c00 	.word	0x40003c00
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000800 	.word	0x48000800

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <NMI_Handler+0x4>

080018e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <MemManage_Handler+0x4>

080018f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <UsageFault_Handler+0x4>

08001900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192e:	f000 f9ed 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <EXTI9_5_IRQHandler+0x14>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001942:	2040      	movs	r0, #64	@ 0x40
 8001944:	f000 fd12 	bl	800236c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000308 	.word	0x20000308

08001950 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e00a      	b.n	8001978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001962:	f3af 8000 	nop.w
 8001966:	4601      	mov	r1, r0
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	b2ca      	uxtb	r2, r1
 8001970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf0      	blt.n	8001962 <_read+0x12>
	}

return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <_sbrk+0x50>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x16>
		heap_end = &end;
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <_sbrk+0x50>)
 800199e:	4a10      	ldr	r2, [pc, #64]	@ (80019e0 <_sbrk+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <_sbrk+0x50>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <_sbrk+0x50>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	466a      	mov	r2, sp
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d907      	bls.n	80019c6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80019b6:	f002 faf1 	bl	8003f9c <__errno>
 80019ba:	4603      	mov	r3, r0
 80019bc:	220c      	movs	r2, #12
 80019be:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c4:	e006      	b.n	80019d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <_sbrk+0x50>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a03      	ldr	r2, [pc, #12]	@ (80019dc <_sbrk+0x50>)
 80019d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000370 	.word	0x20000370
 80019e0:	200004c8 	.word	0x200004c8

080019e4 <_close>:

int _close(int file)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a0c:	605a      	str	r2, [r3, #4]
	return 0;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_isatty>:

int _isatty(int file)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	return 1;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
	return 0;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <SystemInit+0x64>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a56:	4a16      	ldr	r2, [pc, #88]	@ (8001ab0 <SystemInit+0x64>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <SystemInit+0x68>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a13      	ldr	r2, [pc, #76]	@ (8001ab4 <SystemInit+0x68>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <SystemInit+0x68>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <SystemInit+0x68>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <SystemInit+0x68>)
 8001a78:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001a7c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001a80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <SystemInit+0x68>)
 8001a84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <SystemInit+0x68>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <SystemInit+0x68>)
 8001a90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <SystemInit+0x68>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SystemInit+0x64>)
 8001a9e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aa2:	609a      	str	r2, [r3, #8]
#endif
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <__NVIC_EnableIRQ>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4907      	ldr	r1, [pc, #28]	@ (8001af0 <__NVIC_EnableIRQ+0x38>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	@ (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	@ (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  // TODO implement this
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;   // Enable TIM2 clock
 8001b50:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <timer_init+0x74>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b54:	4a19      	ldr	r2, [pc, #100]	@ (8001bbc <timer_init+0x74>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6593      	str	r3, [r2, #88]	@ 0x58
	timer_reset(timer);     //reset counter
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f82f 	bl	8001bc0 <timer_reset>

	timer->PSC = 7999;    //scales down to 1khz
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001b68:	629a      	str	r2, [r3, #40]	@ 0x28

	timer_set_ms(timer, 50000);   //sets autoreload to 50, so that it reloads every 1/20th of a second, 20Hz
 8001b6a:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f83c 	bl	8001bec <timer_set_ms>
	TIM2->CR1 &= ~TIM_CR1_DIR;    //set timer to up counting mode 50
 8001b74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7e:	f023 0310 	bic.w	r3, r3, #16
 8001b82:	6013      	str	r3, [r2, #0]



    // 6. Enable the timer interrupt for update events
    TIM2->DIER |= TIM_DIER_UIE;  // Enable update interrupt
 8001b84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	60d3      	str	r3, [r2, #12]


    // 7. Enable the timer interrupt in the NVIC
    NVIC_EnableIRQ(TIM2_IRQn);  // Enable TIM2 interrupt in NVIC
 8001b94:	201c      	movs	r0, #28
 8001b96:	f7ff ff8f 	bl	8001ab8 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 1);  // Set priority to 1 (lower number = higher priority)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	201c      	movs	r0, #28
 8001b9e:	f7ff ffa9 	bl	8001af4 <__NVIC_SetPriority>

    // 8. Start the timer
    TIM2->CR1 |= TIM_CR1_CEN;   // Enable the timer (start counting)
 8001ba2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6013      	str	r3, [r2, #0]



}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  // TODO implement this
	TIM2->CR1 &= ~TIM_CR1_CEN;  //stop the timer
 8001bc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0x0000;  // Reset the counter to 0
 8001bd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
  // TODO implement this

	timer->ARR = (period_ms) - 1;
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c14:	f7ff ff1a 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	@ (8001c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <LoopForever+0xe>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	@ (8001c5c <LoopForever+0x16>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f002 f9b3 	bl	8003fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c42:	f7ff fb89 	bl	8001358 <main>

08001c46 <LoopForever>:

LoopForever:
    b LoopForever
 8001c46:	e7fe      	b.n	8001c46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8001c54:	08004c90 	.word	0x08004c90
  ldr r2, =_sbss
 8001c58:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8001c5c:	200004c4 	.word	0x200004c4

08001c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_2_IRQHandler>

08001c62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 f961 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c72:	2000      	movs	r0, #0
 8001c74:	f000 f80e 	bl	8001c94 <HAL_InitTick>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	71fb      	strb	r3, [r7, #7]
 8001c82:	e001      	b.n	8001c88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c84:	f7ff fdc0 	bl	8001808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c88:	79fb      	ldrb	r3, [r7, #7]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_InitTick+0x6c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d023      	beq.n	8001cf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <HAL_InitTick+0x70>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_InitTick+0x6c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f96d 	bl	8001f9e <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10f      	bne.n	8001cea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d809      	bhi.n	8001ce4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cd8:	f000 f937 	bl	8001f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <HAL_InitTick+0x74>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e007      	b.n	8001cf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e004      	b.n	8001cf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	e001      	b.n	8001cf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000015c 	.word	0x2000015c
 8001d04:	20000154 	.word	0x20000154
 8001d08:	20000158 	.word	0x20000158

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000015c 	.word	0x2000015c
 8001d30:	20000374 	.word	0x20000374

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000374 	.word	0x20000374

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d72:	bf00      	nop
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000015c 	.word	0x2000015c

08001d94 <__NVIC_SetPriorityGrouping>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	@ (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	@ (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	@ (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	@ 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	@ 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff29 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff3e 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff31 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa2 	bl	8001ef0 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc6:	e17f      	b.n	80022c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8171 	beq.w	80022c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d005      	beq.n	8001ff8 <HAL_GPIO_Init+0x40>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d130      	bne.n	800205a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800202e:	2201      	movs	r2, #1
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 0201 	and.w	r2, r3, #1
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b03      	cmp	r3, #3
 8002064:	d118      	bne.n	8002098 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d017      	beq.n	80020d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	6939      	ldr	r1, [r7, #16]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80ac 	beq.w	80022c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	4b5f      	ldr	r3, [pc, #380]	@ (80022e8 <HAL_GPIO_Init+0x330>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216e:	4a5e      	ldr	r2, [pc, #376]	@ (80022e8 <HAL_GPIO_Init+0x330>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6613      	str	r3, [r2, #96]	@ 0x60
 8002176:	4b5c      	ldr	r3, [pc, #368]	@ (80022e8 <HAL_GPIO_Init+0x330>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002182:	4a5a      	ldr	r2, [pc, #360]	@ (80022ec <HAL_GPIO_Init+0x334>)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021ac:	d025      	beq.n	80021fa <HAL_GPIO_Init+0x242>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	@ (80022f0 <HAL_GPIO_Init+0x338>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01f      	beq.n	80021f6 <HAL_GPIO_Init+0x23e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4e      	ldr	r2, [pc, #312]	@ (80022f4 <HAL_GPIO_Init+0x33c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d019      	beq.n	80021f2 <HAL_GPIO_Init+0x23a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4d      	ldr	r2, [pc, #308]	@ (80022f8 <HAL_GPIO_Init+0x340>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_GPIO_Init+0x236>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	@ (80022fc <HAL_GPIO_Init+0x344>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00d      	beq.n	80021ea <HAL_GPIO_Init+0x232>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002300 <HAL_GPIO_Init+0x348>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x22e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002304 <HAL_GPIO_Init+0x34c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_GPIO_Init+0x22a>
 80021de:	2306      	movs	r3, #6
 80021e0:	e00c      	b.n	80021fc <HAL_GPIO_Init+0x244>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e00a      	b.n	80021fc <HAL_GPIO_Init+0x244>
 80021e6:	2305      	movs	r3, #5
 80021e8:	e008      	b.n	80021fc <HAL_GPIO_Init+0x244>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x244>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e004      	b.n	80021fc <HAL_GPIO_Init+0x244>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_Init+0x244>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x244>
 80021fa:	2300      	movs	r3, #0
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	f002 0203 	and.w	r2, r2, #3
 8002202:	0092      	lsls	r2, r2, #2
 8002204:	4093      	lsls	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800220c:	4937      	ldr	r1, [pc, #220]	@ (80022ec <HAL_GPIO_Init+0x334>)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800221a:	4b3b      	ldr	r3, [pc, #236]	@ (8002308 <HAL_GPIO_Init+0x350>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800223e:	4a32      	ldr	r2, [pc, #200]	@ (8002308 <HAL_GPIO_Init+0x350>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002244:	4b30      	ldr	r3, [pc, #192]	@ (8002308 <HAL_GPIO_Init+0x350>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002268:	4a27      	ldr	r2, [pc, #156]	@ (8002308 <HAL_GPIO_Init+0x350>)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800226e:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <HAL_GPIO_Init+0x350>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002292:	4a1d      	ldr	r2, [pc, #116]	@ (8002308 <HAL_GPIO_Init+0x350>)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002298:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HAL_GPIO_Init+0x350>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022bc:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <HAL_GPIO_Init+0x350>)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa22 f303 	lsr.w	r3, r2, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f47f ae78 	bne.w	8001fc8 <HAL_GPIO_Init+0x10>
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000
 80022f0:	48000400 	.word	0x48000400
 80022f4:	48000800 	.word	0x48000800
 80022f8:	48000c00 	.word	0x48000c00
 80022fc:	48001000 	.word	0x48001000
 8002300:	48001400 	.word	0x48001400
 8002304:	48001800 	.word	0x48001800
 8002308:	40010400 	.word	0x40010400

0800230c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e001      	b.n	800232e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002358:	e002      	b.n	8002360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f806 	bl	800239c <HAL_GPIO_EXTI_Callback>
  }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010400 	.word	0x40010400

0800239c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <HAL_PWREx_GetVoltageRange+0x18>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40007000 	.word	0x40007000

080023d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023de:	d130      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e0:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023ec:	d038      	beq.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002474 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2232      	movs	r2, #50	@ 0x32
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	4a1b      	ldr	r2, [pc, #108]	@ (8002478 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9b      	lsrs	r3, r3, #18
 8002410:	3301      	adds	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002414:	e002      	b.n	800241c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3b01      	subs	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002428:	d102      	bne.n	8002430 <HAL_PWREx_ControlVoltageScaling+0x60>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f2      	bne.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800243c:	d110      	bne.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e00f      	b.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002442:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244e:	d007      	beq.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002450:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002458:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800245e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40007000 	.word	0x40007000
 8002474:	20000154 	.word	0x20000154
 8002478:	431bde83 	.word	0x431bde83

0800247c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e3ca      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248e:	4b97      	ldr	r3, [pc, #604]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002498:	4b94      	ldr	r3, [pc, #592]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80e4 	beq.w	8002678 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4a>
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	f040 808b 	bne.w	80025d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 8087 	bne.w	80025d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c6:	4b89      	ldr	r3, [pc, #548]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x62>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e3a2      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1a      	ldr	r2, [r3, #32]
 80024e2:	4b82      	ldr	r3, [pc, #520]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <HAL_RCC_OscConfig+0x7c>
 80024ee:	4b7f      	ldr	r3, [pc, #508]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024f6:	e005      	b.n	8002504 <HAL_RCC_OscConfig+0x88>
 80024f8:	4b7c      	ldr	r3, [pc, #496]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80024fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002504:	4293      	cmp	r3, r2
 8002506:	d223      	bcs.n	8002550 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fd1d 	bl	8002f4c <RCC_SetFlashLatencyFromMSIRange>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e383      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251c:	4b73      	ldr	r3, [pc, #460]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a72      	ldr	r2, [pc, #456]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b70      	ldr	r3, [pc, #448]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	496d      	ldr	r1, [pc, #436]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800253a:	4b6c      	ldr	r3, [pc, #432]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	4968      	ldr	r1, [pc, #416]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
 800254e:	e025      	b.n	800259c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002550:	4b66      	ldr	r3, [pc, #408]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a65      	ldr	r2, [pc, #404]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b63      	ldr	r3, [pc, #396]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4960      	ldr	r1, [pc, #384]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256e:	4b5f      	ldr	r3, [pc, #380]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	495b      	ldr	r1, [pc, #364]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fcdd 	bl	8002f4c <RCC_SetFlashLatencyFromMSIRange>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e343      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800259c:	f000 fc4a 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b52      	ldr	r3, [pc, #328]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	4950      	ldr	r1, [pc, #320]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
 80025b8:	4a4e      	ldr	r2, [pc, #312]	@ (80026f4 <HAL_RCC_OscConfig+0x278>)
 80025ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025bc:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fb67 	bl	8001c94 <HAL_InitTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d052      	beq.n	8002676 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	e327      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d032      	beq.n	8002642 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025dc:	4b43      	ldr	r3, [pc, #268]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a42      	ldr	r2, [pc, #264]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025e8:	f7ff fba4 	bl	8001d34 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f0:	f7ff fba0 	bl	8001d34 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e310      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002602:	4b3a      	ldr	r3, [pc, #232]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800260e:	4b37      	ldr	r3, [pc, #220]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a36      	ldr	r2, [pc, #216]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b34      	ldr	r3, [pc, #208]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4931      	ldr	r1, [pc, #196]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800262c:	4b2f      	ldr	r3, [pc, #188]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	492c      	ldr	r1, [pc, #176]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
 8002640:	e01a      	b.n	8002678 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002642:	4b2a      	ldr	r3, [pc, #168]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a29      	ldr	r2, [pc, #164]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800264e:	f7ff fb71 	bl	8001d34 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002656:	f7ff fb6d 	bl	8001d34 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e2dd      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002668:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x1da>
 8002674:	e000      	b.n	8002678 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002676:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d074      	beq.n	800276e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b08      	cmp	r3, #8
 8002688:	d005      	beq.n	8002696 <HAL_RCC_OscConfig+0x21a>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	d10e      	bne.n	80026ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d10b      	bne.n	80026ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d064      	beq.n	800276c <HAL_RCC_OscConfig+0x2f0>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d160      	bne.n	800276c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e2ba      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x24a>
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0b      	ldr	r2, [pc, #44]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e026      	b.n	8002714 <HAL_RCC_OscConfig+0x298>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ce:	d115      	bne.n	80026fc <HAL_RCC_OscConfig+0x280>
 80026d0:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a05      	ldr	r2, [pc, #20]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80026d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b03      	ldr	r3, [pc, #12]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a02      	ldr	r2, [pc, #8]	@ (80026ec <HAL_RCC_OscConfig+0x270>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e014      	b.n	8002714 <HAL_RCC_OscConfig+0x298>
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08004c0c 	.word	0x08004c0c
 80026f4:	20000154 	.word	0x20000154
 80026f8:	20000158 	.word	0x20000158
 80026fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a9f      	ldr	r2, [pc, #636]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b9d      	ldr	r3, [pc, #628]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a9c      	ldr	r2, [pc, #624]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7ff fb0a 	bl	8001d34 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff fb06 	bl	8001d34 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e276      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002736:	4b92      	ldr	r3, [pc, #584]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x2a8>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff faf6 	bl	8001d34 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7ff faf2 	bl	8001d34 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	@ 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e262      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275e:	4b88      	ldr	r3, [pc, #544]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x2d0>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d060      	beq.n	800283c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x310>
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d119      	bne.n	80027ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d116      	bne.n	80027ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278c:	4b7c      	ldr	r3, [pc, #496]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x328>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e23f      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b76      	ldr	r3, [pc, #472]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	4973      	ldr	r1, [pc, #460]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b8:	e040      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d023      	beq.n	800280a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7ff fab1 	bl	8001d34 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d6:	f7ff faad 	bl	8001d34 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e21d      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e8:	4b65      	ldr	r3, [pc, #404]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	495f      	ldr	r1, [pc, #380]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
 8002808:	e018      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280a:	4b5d      	ldr	r3, [pc, #372]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a5c      	ldr	r2, [pc, #368]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7ff fa8d 	bl	8001d34 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7ff fa89 	bl	8001d34 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1f9      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002830:	4b53      	ldr	r3, [pc, #332]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d03c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01c      	beq.n	800288a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002850:	4b4b      	ldr	r3, [pc, #300]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002856:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7ff fa68 	bl	8001d34 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7ff fa64 	bl	8001d34 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1d4      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287a:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 800287c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ef      	beq.n	8002868 <HAL_RCC_OscConfig+0x3ec>
 8002888:	e01b      	b.n	80028c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288a:	4b3d      	ldr	r3, [pc, #244]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002890:	4a3b      	ldr	r2, [pc, #236]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7ff fa4b 	bl	8001d34 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a2:	f7ff fa47 	bl	8001d34 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1b7      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b4:	4b32      	ldr	r3, [pc, #200]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80028b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ef      	bne.n	80028a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80a6 	beq.w	8002a1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	4b27      	ldr	r3, [pc, #156]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	4a26      	ldr	r2, [pc, #152]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80028e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ec:	4b24      	ldr	r3, [pc, #144]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f8:	2301      	movs	r3, #1
 80028fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fc:	4b21      	ldr	r3, [pc, #132]	@ (8002984 <HAL_RCC_OscConfig+0x508>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d118      	bne.n	800293a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002908:	4b1e      	ldr	r3, [pc, #120]	@ (8002984 <HAL_RCC_OscConfig+0x508>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1d      	ldr	r2, [pc, #116]	@ (8002984 <HAL_RCC_OscConfig+0x508>)
 800290e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002914:	f7ff fa0e 	bl	8001d34 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7ff fa0a 	bl	8001d34 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e17a      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292e:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <HAL_RCC_OscConfig+0x508>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d108      	bne.n	8002954 <HAL_RCC_OscConfig+0x4d8>
 8002942:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002948:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002952:	e029      	b.n	80029a8 <HAL_RCC_OscConfig+0x52c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d115      	bne.n	8002988 <HAL_RCC_OscConfig+0x50c>
 800295c:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002962:	4a07      	ldr	r2, [pc, #28]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	4a03      	ldr	r2, [pc, #12]	@ (8002980 <HAL_RCC_OscConfig+0x504>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800297c:	e014      	b.n	80029a8 <HAL_RCC_OscConfig+0x52c>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	40007000 	.word	0x40007000
 8002988:	4b9c      	ldr	r3, [pc, #624]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298e:	4a9b      	ldr	r2, [pc, #620]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002998:	4b98      	ldr	r3, [pc, #608]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299e:	4a97      	ldr	r2, [pc, #604]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d016      	beq.n	80029de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7ff f9c0 	bl	8001d34 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7ff f9bc 	bl	8001d34 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e12a      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ce:	4b8b      	ldr	r3, [pc, #556]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ed      	beq.n	80029b8 <HAL_RCC_OscConfig+0x53c>
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029de:	f7ff f9a9 	bl	8001d34 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7ff f9a5 	bl	8001d34 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e113      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029fc:	4b7f      	ldr	r3, [pc, #508]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1ed      	bne.n	80029e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0a:	7ffb      	ldrb	r3, [r7, #31]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a10:	4b7a      	ldr	r3, [pc, #488]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	4a79      	ldr	r2, [pc, #484]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80fe 	beq.w	8002c22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	f040 80d0 	bne.w	8002bd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a30:	4b72      	ldr	r3, [pc, #456]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d130      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d127      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d11f      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a70:	2a07      	cmp	r2, #7
 8002a72:	bf14      	ite	ne
 8002a74:	2201      	movne	r2, #1
 8002a76:	2200      	moveq	r2, #0
 8002a78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d113      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d06e      	beq.n	8002b84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d069      	beq.n	8002b80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aac:	4b53      	ldr	r3, [pc, #332]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ab8:	4b50      	ldr	r3, [pc, #320]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0ad      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a4b      	ldr	r2, [pc, #300]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad4:	f7ff f92e 	bl	8001d34 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7ff f92a 	bl	8001d34 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e09a      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aee:	4b43      	ldr	r3, [pc, #268]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afa:	4b40      	ldr	r3, [pc, #256]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <HAL_RCC_OscConfig+0x784>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b0a:	3a01      	subs	r2, #1
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	4311      	orrs	r1, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b14:	0212      	lsls	r2, r2, #8
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b1c:	0852      	lsrs	r2, r2, #1
 8002b1e:	3a01      	subs	r2, #1
 8002b20:	0552      	lsls	r2, r2, #21
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b28:	0852      	lsrs	r2, r2, #1
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	0652      	lsls	r2, r2, #25
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b34:	0912      	lsrs	r2, r2, #4
 8002b36:	0452      	lsls	r2, r2, #17
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	4930      	ldr	r1, [pc, #192]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b40:	4b2e      	ldr	r3, [pc, #184]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2d      	ldr	r2, [pc, #180]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a2a      	ldr	r2, [pc, #168]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b58:	f7ff f8ec 	bl	8001d34 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7ff f8e8 	bl	8001d34 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e058      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b7e:	e050      	b.n	8002c22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e04f      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b84:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d148      	bne.n	8002c22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b90:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a19      	ldr	r2, [pc, #100]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b9c:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a16      	ldr	r2, [pc, #88]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba8:	f7ff f8c4 	bl	8001d34 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7ff f8c0 	bl	8001d34 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e030      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x734>
 8002bce:	e028      	b.n	8002c22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d023      	beq.n	8002c1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a08      	ldr	r2, [pc, #32]	@ (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002bdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7ff f8a7 	bl	8001d34 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be8:	e00c      	b.n	8002c04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7ff f8a3 	bl	8001d34 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d905      	bls.n	8002c04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e013      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c04:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <HAL_RCC_OscConfig+0x7b0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ec      	bne.n	8002bea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_OscConfig+0x7b0>)
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	4905      	ldr	r1, [pc, #20]	@ (8002c2c <HAL_RCC_OscConfig+0x7b0>)
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCC_OscConfig+0x7b4>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
 8002c1c:	e001      	b.n	8002c22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	feeefffc 	.word	0xfeeefffc

08002c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0e7      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b75      	ldr	r3, [pc, #468]	@ (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d910      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b72      	ldr	r3, [pc, #456]	@ (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	4970      	ldr	r1, [pc, #448]	@ (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b6e      	ldr	r3, [pc, #440]	@ (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0cf      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	4b66      	ldr	r3, [pc, #408]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d908      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b63      	ldr	r3, [pc, #396]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4960      	ldr	r1, [pc, #384]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04c      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	4b5a      	ldr	r3, [pc, #360]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d121      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0a6      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd2:	4b54      	ldr	r3, [pc, #336]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d115      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e09a      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cea:	4b4e      	ldr	r3, [pc, #312]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e08e      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e086      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b46      	ldr	r3, [pc, #280]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4943      	ldr	r1, [pc, #268]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1c:	f7ff f80a 	bl	8001d34 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7ff f806 	bl	8001d34 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e06e      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	4b31      	ldr	r3, [pc, #196]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d208      	bcs.n	8002d7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b2e      	ldr	r3, [pc, #184]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	492b      	ldr	r1, [pc, #172]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7a:	4b29      	ldr	r3, [pc, #164]	@ (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d210      	bcs.n	8002daa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d88:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 0207 	bic.w	r2, r3, #7
 8002d90:	4923      	ldr	r1, [pc, #140]	@ (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d98:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e036      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4918      	ldr	r1, [pc, #96]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd4:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4910      	ldr	r1, [pc, #64]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002de8:	f000 f824 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	490b      	ldr	r1, [pc, #44]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f4>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	4a09      	ldr	r2, [pc, #36]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f8>)
 8002e06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_RCC_ClockConfig+0x1fc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe ff41 	bl	8001c94 <HAL_InitTick>
 8002e12:	4603      	mov	r3, r0
 8002e14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e16:	7afb      	ldrb	r3, [r7, #11]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40022000 	.word	0x40022000
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08004c0c 	.word	0x08004c0c
 8002e2c:	20000154 	.word	0x20000154
 8002e30:	20000158 	.word	0x20000158

08002e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	@ 0x24
 8002e38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e42:	4b3e      	ldr	r3, [pc, #248]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d121      	bne.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d11e      	bne.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e68:	4b34      	ldr	r3, [pc, #208]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e74:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e005      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e84:	4b2d      	ldr	r3, [pc, #180]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e90:	4a2b      	ldr	r2, [pc, #172]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eac:	4b25      	ldr	r3, [pc, #148]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	e004      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb8:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d134      	bne.n	8002f2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0xa6>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d003      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ed8:	e005      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002edc:	617b      	str	r3, [r7, #20]
      break;
 8002ede:	e005      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ee0:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ee2:	617b      	str	r3, [r7, #20]
      break;
 8002ee4:	e002      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	617b      	str	r3, [r7, #20]
      break;
 8002eea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eec:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	fb03 f202 	mul.w	r2, r3, r2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f12:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	0e5b      	lsrs	r3, r3, #25
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	08004c1c 	.word	0x08004c1c
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	007a1200 	.word	0x007a1200

08002f4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f58:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f64:	f7ff fa26 	bl	80023b4 <HAL_PWREx_GetVoltageRange>
 8002f68:	6178      	str	r0, [r7, #20]
 8002f6a:	e014      	b.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	4b25      	ldr	r3, [pc, #148]	@ (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	4a24      	ldr	r2, [pc, #144]	@ (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f78:	4b22      	ldr	r3, [pc, #136]	@ (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f84:	f7ff fa16 	bl	80023b4 <HAL_PWREx_GetVoltageRange>
 8002f88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f9c:	d10b      	bne.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b80      	cmp	r3, #128	@ 0x80
 8002fa2:	d919      	bls.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fa8:	d902      	bls.n	8002fb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002faa:	2302      	movs	r3, #2
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	e013      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e010      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b80      	cmp	r3, #128	@ 0x80
 8002fba:	d902      	bls.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e00a      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b80      	cmp	r3, #128	@ 0x80
 8002fc6:	d102      	bne.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fc8:	2302      	movs	r3, #2
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	e004      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b70      	cmp	r3, #112	@ 0x70
 8002fd2:	d101      	bne.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 0207 	bic.w	r2, r3, #7
 8002fe0:	4909      	ldr	r1, [pc, #36]	@ (8003008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fe8:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	40022000 	.word	0x40022000

0800300c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e095      	b.n	800314a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800302e:	d009      	beq.n	8003044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
 8003036:	e005      	b.n	8003044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe fbf6 	bl	8001850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800307a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003084:	d902      	bls.n	800308c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e002      	b.n	8003092 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800308c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003090:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800309a:	d007      	beq.n	80030ac <HAL_SPI_Init+0xa0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030a4:	d002      	beq.n	80030ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ee:	ea42 0103 	orr.w	r1, r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	f003 0204 	and.w	r2, r3, #4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003128:	ea42 0103 	orr.w	r1, r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b088      	sub	sp, #32
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_SPI_Transmit+0x22>
 8003170:	2302      	movs	r3, #2
 8003172:	e15f      	b.n	8003434 <HAL_SPI_Transmit+0x2e2>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800317c:	f7fe fdda 	bl	8001d34 <HAL_GetTick>
 8003180:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d002      	beq.n	8003198 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003196:	e148      	b.n	800342a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_SPI_Transmit+0x52>
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031a8:	e13f      	b.n	800342a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2203      	movs	r2, #3
 80031ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f4:	d10f      	bne.n	8003216 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003204:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003214:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b40      	cmp	r3, #64	@ 0x40
 8003222:	d007      	beq.n	8003234 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800323c:	d94f      	bls.n	80032de <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_SPI_Transmit+0xfa>
 8003246:	8afb      	ldrh	r3, [r7, #22]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d142      	bne.n	80032d2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	1c9a      	adds	r2, r3, #2
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003270:	e02f      	b.n	80032d2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d112      	bne.n	80032a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	881a      	ldrh	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	1c9a      	adds	r2, r3, #2
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032a4:	e015      	b.n	80032d2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a6:	f7fe fd45 	bl	8001d34 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d803      	bhi.n	80032be <HAL_SPI_Transmit+0x16c>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032bc:	d102      	bne.n	80032c4 <HAL_SPI_Transmit+0x172>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80032d0:	e0ab      	b.n	800342a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ca      	bne.n	8003272 <HAL_SPI_Transmit+0x120>
 80032dc:	e080      	b.n	80033e0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_Transmit+0x19a>
 80032e6:	8afb      	ldrh	r3, [r7, #22]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d174      	bne.n	80033d6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d912      	bls.n	800331c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fa:	881a      	ldrh	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	1c9a      	adds	r2, r3, #2
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b02      	subs	r3, #2
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800331a:	e05c      	b.n	80033d6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003342:	e048      	b.n	80033d6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d12b      	bne.n	80033aa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d912      	bls.n	8003382 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	1c9a      	adds	r2, r3, #2
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b02      	subs	r3, #2
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003380:	e029      	b.n	80033d6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033a8:	e015      	b.n	80033d6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033aa:	f7fe fcc3 	bl	8001d34 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d803      	bhi.n	80033c2 <HAL_SPI_Transmit+0x270>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033c0:	d102      	bne.n	80033c8 <HAL_SPI_Transmit+0x276>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80033d4:	e029      	b.n	800342a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1b1      	bne.n	8003344 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	6839      	ldr	r1, [r7, #0]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fb69 	bl	8003abc <SPI_EndRxTxTransaction>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e003      	b.n	800342a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003432:	7ffb      	ldrb	r3, [r7, #31]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	@ 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800344a:	2301      	movs	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_SPI_TransmitReceive+0x26>
 800345e:	2302      	movs	r3, #2
 8003460:	e20a      	b.n	8003878 <HAL_SPI_TransmitReceive+0x43c>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800346a:	f7fe fc63 	bl	8001d34 <HAL_GetTick>
 800346e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003476:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003486:	7efb      	ldrb	r3, [r7, #27]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d00e      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x6e>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003492:	d106      	bne.n	80034a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <HAL_SPI_TransmitReceive+0x66>
 800349c:	7efb      	ldrb	r3, [r7, #27]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d003      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
 80034a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80034a8:	e1e0      	b.n	800386c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x80>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x80>
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80034c2:	e1d3      	b.n	800386c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d003      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2205      	movs	r2, #5
 80034d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800351a:	d802      	bhi.n	8003522 <HAL_SPI_TransmitReceive+0xe6>
 800351c:	8a3b      	ldrh	r3, [r7, #16]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d908      	bls.n	8003534 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	e007      	b.n	8003544 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003542:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d007      	beq.n	8003562 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800356a:	f240 8081 	bls.w	8003670 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_TransmitReceive+0x140>
 8003576:	8a7b      	ldrh	r3, [r7, #18]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d16d      	bne.n	8003658 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	881a      	ldrh	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a0:	e05a      	b.n	8003658 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d11b      	bne.n	80035e8 <HAL_SPI_TransmitReceive+0x1ac>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d016      	beq.n	80035e8 <HAL_SPI_TransmitReceive+0x1ac>
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d113      	bne.n	80035e8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	881a      	ldrh	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	1c9a      	adds	r2, r3, #2
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d11c      	bne.n	8003630 <HAL_SPI_TransmitReceive+0x1f4>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	b292      	uxth	r2, r2
 800360e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003630:	f7fe fb80 	bl	8001d34 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363c:	429a      	cmp	r2, r3
 800363e:	d80b      	bhi.n	8003658 <HAL_SPI_TransmitReceive+0x21c>
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003646:	d007      	beq.n	8003658 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003656:	e109      	b.n	800386c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d19f      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x166>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d199      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x166>
 800366e:	e0e3      	b.n	8003838 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x244>
 8003678:	8a7b      	ldrh	r3, [r7, #18]
 800367a:	2b01      	cmp	r3, #1
 800367c:	f040 80cf 	bne.w	800381e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d912      	bls.n	80036b0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369a:	1c9a      	adds	r2, r3, #2
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b02      	subs	r3, #2
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036ae:	e0b6      	b.n	800381e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d6:	e0a2      	b.n	800381e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d134      	bne.n	8003750 <HAL_SPI_TransmitReceive+0x314>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02f      	beq.n	8003750 <HAL_SPI_TransmitReceive+0x314>
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d12c      	bne.n	8003750 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d912      	bls.n	8003726 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b02      	subs	r3, #2
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003724:	e012      	b.n	800374c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d148      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x3b4>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d042      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d923      	bls.n	80037be <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	b292      	uxth	r2, r2
 8003782:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b02      	subs	r3, #2
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d81f      	bhi.n	80037ec <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	e016      	b.n	80037ec <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f103 020c 	add.w	r2, r3, #12
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	7812      	ldrb	r2, [r2, #0]
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037ec:	2301      	movs	r3, #1
 80037ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037f0:	f7fe faa0 	bl	8001d34 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d803      	bhi.n	8003808 <HAL_SPI_TransmitReceive+0x3cc>
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003806:	d102      	bne.n	800380e <HAL_SPI_TransmitReceive+0x3d2>
 8003808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800381c:	e026      	b.n	800386c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	f47f af57 	bne.w	80036d8 <HAL_SPI_TransmitReceive+0x29c>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	f47f af50 	bne.w	80036d8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f93d 	bl	8003abc <SPI_EndRxTxTransaction>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003862:	e003      	b.n	800386c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003874:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003878:	4618      	mov	r0, r3
 800387a:	3728      	adds	r7, #40	@ 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003890:	f7fe fa50 	bl	8001d34 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	4413      	add	r3, r2
 800389e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038a0:	f7fe fa48 	bl	8001d34 <HAL_GetTick>
 80038a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038a6:	4b39      	ldr	r3, [pc, #228]	@ (800398c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	015b      	lsls	r3, r3, #5
 80038ac:	0d1b      	lsrs	r3, r3, #20
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	fb02 f303 	mul.w	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038b6:	e054      	b.n	8003962 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038be:	d050      	beq.n	8003962 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038c0:	f7fe fa38 	bl	8001d34 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d902      	bls.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d13d      	bne.n	8003952 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038ee:	d111      	bne.n	8003914 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f8:	d004      	beq.n	8003904 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003902:	d107      	bne.n	8003914 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800391c:	d10f      	bne.n	800393e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800393c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e017      	b.n	8003982 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	3b01      	subs	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4013      	ands	r3, r2
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	429a      	cmp	r2, r3
 8003970:	bf0c      	ite	eq
 8003972:	2301      	moveq	r3, #1
 8003974:	2300      	movne	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	429a      	cmp	r2, r3
 800397e:	d19b      	bne.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000154 	.word	0x20000154

08003990 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	@ 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039a2:	f7fe f9c7 	bl	8001d34 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80039b2:	f7fe f9bf 	bl	8001d34 <HAL_GetTick>
 80039b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039c0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	00da      	lsls	r2, r3, #3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	0d1b      	lsrs	r3, r3, #20
 80039d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039d8:	e060      	b.n	8003a9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039e0:	d107      	bne.n	80039f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039f8:	d050      	beq.n	8003a9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039fa:	f7fe f99b 	bl	8001d34 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d902      	bls.n	8003a10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d13d      	bne.n	8003a8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a28:	d111      	bne.n	8003a4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a32:	d004      	beq.n	8003a3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3c:	d107      	bne.n	8003a4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a56:	d10f      	bne.n	8003a78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e010      	b.n	8003aae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d196      	bne.n	80039da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3728      	adds	r7, #40	@ 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000154 	.word	0x20000154

08003abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff ff5b 	bl	8003990 <SPI_WaitFifoStateUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e027      	b.n	8003b40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2200      	movs	r2, #0
 8003af8:	2180      	movs	r1, #128	@ 0x80
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff fec0 	bl	8003880 <SPI_WaitFlagStateUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e014      	b.n	8003b40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff ff34 	bl	8003990 <SPI_WaitFifoStateUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e000      	b.n	8003b40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <malloc>:
 8003b48:	4b02      	ldr	r3, [pc, #8]	@ (8003b54 <malloc+0xc>)
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	f000 b82d 	b.w	8003bac <_malloc_r>
 8003b52:	bf00      	nop
 8003b54:	2000016c 	.word	0x2000016c

08003b58 <free>:
 8003b58:	4b02      	ldr	r3, [pc, #8]	@ (8003b64 <free+0xc>)
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	f000 ba59 	b.w	8004014 <_free_r>
 8003b62:	bf00      	nop
 8003b64:	2000016c 	.word	0x2000016c

08003b68 <sbrk_aligned>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003ba8 <sbrk_aligned+0x40>)
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	6831      	ldr	r1, [r6, #0]
 8003b70:	4605      	mov	r5, r0
 8003b72:	b911      	cbnz	r1, 8003b7a <sbrk_aligned+0x12>
 8003b74:	f000 fa02 	bl	8003f7c <_sbrk_r>
 8003b78:	6030      	str	r0, [r6, #0]
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f000 f9fd 	bl	8003f7c <_sbrk_r>
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	d103      	bne.n	8003b8e <sbrk_aligned+0x26>
 8003b86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	1cc4      	adds	r4, r0, #3
 8003b90:	f024 0403 	bic.w	r4, r4, #3
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d0f8      	beq.n	8003b8a <sbrk_aligned+0x22>
 8003b98:	1a21      	subs	r1, r4, r0
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f000 f9ee 	bl	8003f7c <_sbrk_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d1f2      	bne.n	8003b8a <sbrk_aligned+0x22>
 8003ba4:	e7ef      	b.n	8003b86 <sbrk_aligned+0x1e>
 8003ba6:	bf00      	nop
 8003ba8:	20000378 	.word	0x20000378

08003bac <_malloc_r>:
 8003bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	1ccd      	adds	r5, r1, #3
 8003bb2:	f025 0503 	bic.w	r5, r5, #3
 8003bb6:	3508      	adds	r5, #8
 8003bb8:	2d0c      	cmp	r5, #12
 8003bba:	bf38      	it	cc
 8003bbc:	250c      	movcc	r5, #12
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	db01      	blt.n	8003bc8 <_malloc_r+0x1c>
 8003bc4:	42a9      	cmp	r1, r5
 8003bc6:	d904      	bls.n	8003bd2 <_malloc_r+0x26>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	6033      	str	r3, [r6, #0]
 8003bcc:	2000      	movs	r0, #0
 8003bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ca8 <_malloc_r+0xfc>
 8003bd6:	f000 f89d 	bl	8003d14 <__malloc_lock>
 8003bda:	f8d8 3000 	ldr.w	r3, [r8]
 8003bde:	461c      	mov	r4, r3
 8003be0:	bb44      	cbnz	r4, 8003c34 <_malloc_r+0x88>
 8003be2:	4629      	mov	r1, r5
 8003be4:	4630      	mov	r0, r6
 8003be6:	f7ff ffbf 	bl	8003b68 <sbrk_aligned>
 8003bea:	1c43      	adds	r3, r0, #1
 8003bec:	4604      	mov	r4, r0
 8003bee:	d158      	bne.n	8003ca2 <_malloc_r+0xf6>
 8003bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8003bf4:	4627      	mov	r7, r4
 8003bf6:	2f00      	cmp	r7, #0
 8003bf8:	d143      	bne.n	8003c82 <_malloc_r+0xd6>
 8003bfa:	2c00      	cmp	r4, #0
 8003bfc:	d04b      	beq.n	8003c96 <_malloc_r+0xea>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	4639      	mov	r1, r7
 8003c02:	4630      	mov	r0, r6
 8003c04:	eb04 0903 	add.w	r9, r4, r3
 8003c08:	f000 f9b8 	bl	8003f7c <_sbrk_r>
 8003c0c:	4581      	cmp	r9, r0
 8003c0e:	d142      	bne.n	8003c96 <_malloc_r+0xea>
 8003c10:	6821      	ldr	r1, [r4, #0]
 8003c12:	1a6d      	subs	r5, r5, r1
 8003c14:	4629      	mov	r1, r5
 8003c16:	4630      	mov	r0, r6
 8003c18:	f7ff ffa6 	bl	8003b68 <sbrk_aligned>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d03a      	beq.n	8003c96 <_malloc_r+0xea>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	442b      	add	r3, r5
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	f8d8 3000 	ldr.w	r3, [r8]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	bb62      	cbnz	r2, 8003c88 <_malloc_r+0xdc>
 8003c2e:	f8c8 7000 	str.w	r7, [r8]
 8003c32:	e00f      	b.n	8003c54 <_malloc_r+0xa8>
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	1b52      	subs	r2, r2, r5
 8003c38:	d420      	bmi.n	8003c7c <_malloc_r+0xd0>
 8003c3a:	2a0b      	cmp	r2, #11
 8003c3c:	d917      	bls.n	8003c6e <_malloc_r+0xc2>
 8003c3e:	1961      	adds	r1, r4, r5
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	6025      	str	r5, [r4, #0]
 8003c44:	bf18      	it	ne
 8003c46:	6059      	strne	r1, [r3, #4]
 8003c48:	6863      	ldr	r3, [r4, #4]
 8003c4a:	bf08      	it	eq
 8003c4c:	f8c8 1000 	streq.w	r1, [r8]
 8003c50:	5162      	str	r2, [r4, r5]
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	4630      	mov	r0, r6
 8003c56:	f000 f863 	bl	8003d20 <__malloc_unlock>
 8003c5a:	f104 000b 	add.w	r0, r4, #11
 8003c5e:	1d23      	adds	r3, r4, #4
 8003c60:	f020 0007 	bic.w	r0, r0, #7
 8003c64:	1ac2      	subs	r2, r0, r3
 8003c66:	bf1c      	itt	ne
 8003c68:	1a1b      	subne	r3, r3, r0
 8003c6a:	50a3      	strne	r3, [r4, r2]
 8003c6c:	e7af      	b.n	8003bce <_malloc_r+0x22>
 8003c6e:	6862      	ldr	r2, [r4, #4]
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	bf0c      	ite	eq
 8003c74:	f8c8 2000 	streq.w	r2, [r8]
 8003c78:	605a      	strne	r2, [r3, #4]
 8003c7a:	e7eb      	b.n	8003c54 <_malloc_r+0xa8>
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	6864      	ldr	r4, [r4, #4]
 8003c80:	e7ae      	b.n	8003be0 <_malloc_r+0x34>
 8003c82:	463c      	mov	r4, r7
 8003c84:	687f      	ldr	r7, [r7, #4]
 8003c86:	e7b6      	b.n	8003bf6 <_malloc_r+0x4a>
 8003c88:	461a      	mov	r2, r3
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d1fb      	bne.n	8003c88 <_malloc_r+0xdc>
 8003c90:	2300      	movs	r3, #0
 8003c92:	6053      	str	r3, [r2, #4]
 8003c94:	e7de      	b.n	8003c54 <_malloc_r+0xa8>
 8003c96:	230c      	movs	r3, #12
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f000 f840 	bl	8003d20 <__malloc_unlock>
 8003ca0:	e794      	b.n	8003bcc <_malloc_r+0x20>
 8003ca2:	6005      	str	r5, [r0, #0]
 8003ca4:	e7d6      	b.n	8003c54 <_malloc_r+0xa8>
 8003ca6:	bf00      	nop
 8003ca8:	2000037c 	.word	0x2000037c

08003cac <sniprintf>:
 8003cac:	b40c      	push	{r2, r3}
 8003cae:	b530      	push	{r4, r5, lr}
 8003cb0:	4b17      	ldr	r3, [pc, #92]	@ (8003d10 <sniprintf+0x64>)
 8003cb2:	1e0c      	subs	r4, r1, #0
 8003cb4:	681d      	ldr	r5, [r3, #0]
 8003cb6:	b09d      	sub	sp, #116	@ 0x74
 8003cb8:	da08      	bge.n	8003ccc <sniprintf+0x20>
 8003cba:	238b      	movs	r3, #139	@ 0x8b
 8003cbc:	602b      	str	r3, [r5, #0]
 8003cbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cc2:	b01d      	add	sp, #116	@ 0x74
 8003cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cc8:	b002      	add	sp, #8
 8003cca:	4770      	bx	lr
 8003ccc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003cd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003cd4:	bf14      	ite	ne
 8003cd6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003cda:	4623      	moveq	r3, r4
 8003cdc:	9304      	str	r3, [sp, #16]
 8003cde:	9307      	str	r3, [sp, #28]
 8003ce0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ce4:	9002      	str	r0, [sp, #8]
 8003ce6:	9006      	str	r0, [sp, #24]
 8003ce8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003cec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003cee:	ab21      	add	r3, sp, #132	@ 0x84
 8003cf0:	a902      	add	r1, sp, #8
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	f000 fa33 	bl	8004160 <_svfiprintf_r>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	bfbc      	itt	lt
 8003cfe:	238b      	movlt	r3, #139	@ 0x8b
 8003d00:	602b      	strlt	r3, [r5, #0]
 8003d02:	2c00      	cmp	r4, #0
 8003d04:	d0dd      	beq.n	8003cc2 <sniprintf+0x16>
 8003d06:	9b02      	ldr	r3, [sp, #8]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e7d9      	b.n	8003cc2 <sniprintf+0x16>
 8003d0e:	bf00      	nop
 8003d10:	2000016c 	.word	0x2000016c

08003d14 <__malloc_lock>:
 8003d14:	4801      	ldr	r0, [pc, #4]	@ (8003d1c <__malloc_lock+0x8>)
 8003d16:	f000 b96c 	b.w	8003ff2 <__retarget_lock_acquire_recursive>
 8003d1a:	bf00      	nop
 8003d1c:	200004bc 	.word	0x200004bc

08003d20 <__malloc_unlock>:
 8003d20:	4801      	ldr	r0, [pc, #4]	@ (8003d28 <__malloc_unlock+0x8>)
 8003d22:	f000 b967 	b.w	8003ff4 <__retarget_lock_release_recursive>
 8003d26:	bf00      	nop
 8003d28:	200004bc 	.word	0x200004bc

08003d2c <std>:
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	4604      	mov	r4, r0
 8003d32:	e9c0 3300 	strd	r3, r3, [r0]
 8003d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d3a:	6083      	str	r3, [r0, #8]
 8003d3c:	8181      	strh	r1, [r0, #12]
 8003d3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d40:	81c2      	strh	r2, [r0, #14]
 8003d42:	6183      	str	r3, [r0, #24]
 8003d44:	4619      	mov	r1, r3
 8003d46:	2208      	movs	r2, #8
 8003d48:	305c      	adds	r0, #92	@ 0x5c
 8003d4a:	f000 f90f 	bl	8003f6c <memset>
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <std+0x58>)
 8003d50:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <std+0x5c>)
 8003d54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <std+0x60>)
 8003d58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <std+0x64>)
 8003d5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <std+0x68>)
 8003d60:	6224      	str	r4, [r4, #32]
 8003d62:	429c      	cmp	r4, r3
 8003d64:	d006      	beq.n	8003d74 <std+0x48>
 8003d66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d6a:	4294      	cmp	r4, r2
 8003d6c:	d002      	beq.n	8003d74 <std+0x48>
 8003d6e:	33d0      	adds	r3, #208	@ 0xd0
 8003d70:	429c      	cmp	r4, r3
 8003d72:	d105      	bne.n	8003d80 <std+0x54>
 8003d74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d7c:	f000 b938 	b.w	8003ff0 <__retarget_lock_init_recursive>
 8003d80:	bd10      	pop	{r4, pc}
 8003d82:	bf00      	nop
 8003d84:	080047cd 	.word	0x080047cd
 8003d88:	080047ef 	.word	0x080047ef
 8003d8c:	08004827 	.word	0x08004827
 8003d90:	0800484b 	.word	0x0800484b
 8003d94:	20000380 	.word	0x20000380

08003d98 <stdio_exit_handler>:
 8003d98:	4a02      	ldr	r2, [pc, #8]	@ (8003da4 <stdio_exit_handler+0xc>)
 8003d9a:	4903      	ldr	r1, [pc, #12]	@ (8003da8 <stdio_exit_handler+0x10>)
 8003d9c:	4803      	ldr	r0, [pc, #12]	@ (8003dac <stdio_exit_handler+0x14>)
 8003d9e:	f000 b869 	b.w	8003e74 <_fwalk_sglue>
 8003da2:	bf00      	nop
 8003da4:	20000160 	.word	0x20000160
 8003da8:	0800477d 	.word	0x0800477d
 8003dac:	20000170 	.word	0x20000170

08003db0 <cleanup_stdio>:
 8003db0:	6841      	ldr	r1, [r0, #4]
 8003db2:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <cleanup_stdio+0x34>)
 8003db4:	4299      	cmp	r1, r3
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
 8003dba:	d001      	beq.n	8003dc0 <cleanup_stdio+0x10>
 8003dbc:	f000 fcde 	bl	800477c <_fflush_r>
 8003dc0:	68a1      	ldr	r1, [r4, #8]
 8003dc2:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <cleanup_stdio+0x38>)
 8003dc4:	4299      	cmp	r1, r3
 8003dc6:	d002      	beq.n	8003dce <cleanup_stdio+0x1e>
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f000 fcd7 	bl	800477c <_fflush_r>
 8003dce:	68e1      	ldr	r1, [r4, #12]
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <cleanup_stdio+0x3c>)
 8003dd2:	4299      	cmp	r1, r3
 8003dd4:	d004      	beq.n	8003de0 <cleanup_stdio+0x30>
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ddc:	f000 bcce 	b.w	800477c <_fflush_r>
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	bf00      	nop
 8003de4:	20000380 	.word	0x20000380
 8003de8:	200003e8 	.word	0x200003e8
 8003dec:	20000450 	.word	0x20000450

08003df0 <global_stdio_init.part.0>:
 8003df0:	b510      	push	{r4, lr}
 8003df2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <global_stdio_init.part.0+0x30>)
 8003df4:	4c0b      	ldr	r4, [pc, #44]	@ (8003e24 <global_stdio_init.part.0+0x34>)
 8003df6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e28 <global_stdio_init.part.0+0x38>)
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2104      	movs	r1, #4
 8003e00:	f7ff ff94 	bl	8003d2c <std>
 8003e04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e08:	2201      	movs	r2, #1
 8003e0a:	2109      	movs	r1, #9
 8003e0c:	f7ff ff8e 	bl	8003d2c <std>
 8003e10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e14:	2202      	movs	r2, #2
 8003e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e1a:	2112      	movs	r1, #18
 8003e1c:	f7ff bf86 	b.w	8003d2c <std>
 8003e20:	200004b8 	.word	0x200004b8
 8003e24:	20000380 	.word	0x20000380
 8003e28:	08003d99 	.word	0x08003d99

08003e2c <__sfp_lock_acquire>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	@ (8003e34 <__sfp_lock_acquire+0x8>)
 8003e2e:	f000 b8e0 	b.w	8003ff2 <__retarget_lock_acquire_recursive>
 8003e32:	bf00      	nop
 8003e34:	200004bd 	.word	0x200004bd

08003e38 <__sfp_lock_release>:
 8003e38:	4801      	ldr	r0, [pc, #4]	@ (8003e40 <__sfp_lock_release+0x8>)
 8003e3a:	f000 b8db 	b.w	8003ff4 <__retarget_lock_release_recursive>
 8003e3e:	bf00      	nop
 8003e40:	200004bd 	.word	0x200004bd

08003e44 <__sinit>:
 8003e44:	b510      	push	{r4, lr}
 8003e46:	4604      	mov	r4, r0
 8003e48:	f7ff fff0 	bl	8003e2c <__sfp_lock_acquire>
 8003e4c:	6a23      	ldr	r3, [r4, #32]
 8003e4e:	b11b      	cbz	r3, 8003e58 <__sinit+0x14>
 8003e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e54:	f7ff bff0 	b.w	8003e38 <__sfp_lock_release>
 8003e58:	4b04      	ldr	r3, [pc, #16]	@ (8003e6c <__sinit+0x28>)
 8003e5a:	6223      	str	r3, [r4, #32]
 8003e5c:	4b04      	ldr	r3, [pc, #16]	@ (8003e70 <__sinit+0x2c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f5      	bne.n	8003e50 <__sinit+0xc>
 8003e64:	f7ff ffc4 	bl	8003df0 <global_stdio_init.part.0>
 8003e68:	e7f2      	b.n	8003e50 <__sinit+0xc>
 8003e6a:	bf00      	nop
 8003e6c:	08003db1 	.word	0x08003db1
 8003e70:	200004b8 	.word	0x200004b8

08003e74 <_fwalk_sglue>:
 8003e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e78:	4607      	mov	r7, r0
 8003e7a:	4688      	mov	r8, r1
 8003e7c:	4614      	mov	r4, r2
 8003e7e:	2600      	movs	r6, #0
 8003e80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e84:	f1b9 0901 	subs.w	r9, r9, #1
 8003e88:	d505      	bpl.n	8003e96 <_fwalk_sglue+0x22>
 8003e8a:	6824      	ldr	r4, [r4, #0]
 8003e8c:	2c00      	cmp	r4, #0
 8003e8e:	d1f7      	bne.n	8003e80 <_fwalk_sglue+0xc>
 8003e90:	4630      	mov	r0, r6
 8003e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e96:	89ab      	ldrh	r3, [r5, #12]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d907      	bls.n	8003eac <_fwalk_sglue+0x38>
 8003e9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	d003      	beq.n	8003eac <_fwalk_sglue+0x38>
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	47c0      	blx	r8
 8003eaa:	4306      	orrs	r6, r0
 8003eac:	3568      	adds	r5, #104	@ 0x68
 8003eae:	e7e9      	b.n	8003e84 <_fwalk_sglue+0x10>

08003eb0 <_puts_r>:
 8003eb0:	6a03      	ldr	r3, [r0, #32]
 8003eb2:	b570      	push	{r4, r5, r6, lr}
 8003eb4:	6884      	ldr	r4, [r0, #8]
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	460e      	mov	r6, r1
 8003eba:	b90b      	cbnz	r3, 8003ec0 <_puts_r+0x10>
 8003ebc:	f7ff ffc2 	bl	8003e44 <__sinit>
 8003ec0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ec2:	07db      	lsls	r3, r3, #31
 8003ec4:	d405      	bmi.n	8003ed2 <_puts_r+0x22>
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	0598      	lsls	r0, r3, #22
 8003eca:	d402      	bmi.n	8003ed2 <_puts_r+0x22>
 8003ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ece:	f000 f890 	bl	8003ff2 <__retarget_lock_acquire_recursive>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	0719      	lsls	r1, r3, #28
 8003ed6:	d502      	bpl.n	8003ede <_puts_r+0x2e>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d135      	bne.n	8003f4a <_puts_r+0x9a>
 8003ede:	4621      	mov	r1, r4
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f000 fd23 	bl	800492c <__swsetup_r>
 8003ee6:	b380      	cbz	r0, 8003f4a <_puts_r+0x9a>
 8003ee8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003eec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eee:	07da      	lsls	r2, r3, #31
 8003ef0:	d405      	bmi.n	8003efe <_puts_r+0x4e>
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	059b      	lsls	r3, r3, #22
 8003ef6:	d402      	bmi.n	8003efe <_puts_r+0x4e>
 8003ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003efa:	f000 f87b 	bl	8003ff4 <__retarget_lock_release_recursive>
 8003efe:	4628      	mov	r0, r5
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da04      	bge.n	8003f10 <_puts_r+0x60>
 8003f06:	69a2      	ldr	r2, [r4, #24]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	dc17      	bgt.n	8003f3c <_puts_r+0x8c>
 8003f0c:	290a      	cmp	r1, #10
 8003f0e:	d015      	beq.n	8003f3c <_puts_r+0x8c>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	6022      	str	r2, [r4, #0]
 8003f16:	7019      	strb	r1, [r3, #0]
 8003f18:	68a3      	ldr	r3, [r4, #8]
 8003f1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60a3      	str	r3, [r4, #8]
 8003f22:	2900      	cmp	r1, #0
 8003f24:	d1ed      	bne.n	8003f02 <_puts_r+0x52>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da11      	bge.n	8003f4e <_puts_r+0x9e>
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	210a      	movs	r1, #10
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f000 fcbd 	bl	80048ae <__swbuf_r>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d0d7      	beq.n	8003ee8 <_puts_r+0x38>
 8003f38:	250a      	movs	r5, #10
 8003f3a:	e7d7      	b.n	8003eec <_puts_r+0x3c>
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f000 fcb5 	bl	80048ae <__swbuf_r>
 8003f44:	3001      	adds	r0, #1
 8003f46:	d1e7      	bne.n	8003f18 <_puts_r+0x68>
 8003f48:	e7ce      	b.n	8003ee8 <_puts_r+0x38>
 8003f4a:	3e01      	subs	r6, #1
 8003f4c:	e7e4      	b.n	8003f18 <_puts_r+0x68>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	6022      	str	r2, [r4, #0]
 8003f54:	220a      	movs	r2, #10
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e7ee      	b.n	8003f38 <_puts_r+0x88>
	...

08003f5c <puts>:
 8003f5c:	4b02      	ldr	r3, [pc, #8]	@ (8003f68 <puts+0xc>)
 8003f5e:	4601      	mov	r1, r0
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	f7ff bfa5 	b.w	8003eb0 <_puts_r>
 8003f66:	bf00      	nop
 8003f68:	2000016c 	.word	0x2000016c

08003f6c <memset>:
 8003f6c:	4402      	add	r2, r0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d100      	bne.n	8003f76 <memset+0xa>
 8003f74:	4770      	bx	lr
 8003f76:	f803 1b01 	strb.w	r1, [r3], #1
 8003f7a:	e7f9      	b.n	8003f70 <memset+0x4>

08003f7c <_sbrk_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4d06      	ldr	r5, [pc, #24]	@ (8003f98 <_sbrk_r+0x1c>)
 8003f80:	2300      	movs	r3, #0
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	f7fd fd00 	bl	800198c <_sbrk>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_sbrk_r+0x1a>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_sbrk_r+0x1a>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	200004c0 	.word	0x200004c0

08003f9c <__errno>:
 8003f9c:	4b01      	ldr	r3, [pc, #4]	@ (8003fa4 <__errno+0x8>)
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	2000016c 	.word	0x2000016c

08003fa8 <__libc_init_array>:
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	4d0d      	ldr	r5, [pc, #52]	@ (8003fe0 <__libc_init_array+0x38>)
 8003fac:	4c0d      	ldr	r4, [pc, #52]	@ (8003fe4 <__libc_init_array+0x3c>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	42a6      	cmp	r6, r4
 8003fb6:	d109      	bne.n	8003fcc <__libc_init_array+0x24>
 8003fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8003fe8 <__libc_init_array+0x40>)
 8003fba:	4c0c      	ldr	r4, [pc, #48]	@ (8003fec <__libc_init_array+0x44>)
 8003fbc:	f000 fdf8 	bl	8004bb0 <_init>
 8003fc0:	1b64      	subs	r4, r4, r5
 8003fc2:	10a4      	asrs	r4, r4, #2
 8003fc4:	2600      	movs	r6, #0
 8003fc6:	42a6      	cmp	r6, r4
 8003fc8:	d105      	bne.n	8003fd6 <__libc_init_array+0x2e>
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd0:	4798      	blx	r3
 8003fd2:	3601      	adds	r6, #1
 8003fd4:	e7ee      	b.n	8003fb4 <__libc_init_array+0xc>
 8003fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fda:	4798      	blx	r3
 8003fdc:	3601      	adds	r6, #1
 8003fde:	e7f2      	b.n	8003fc6 <__libc_init_array+0x1e>
 8003fe0:	08004c88 	.word	0x08004c88
 8003fe4:	08004c88 	.word	0x08004c88
 8003fe8:	08004c88 	.word	0x08004c88
 8003fec:	08004c8c 	.word	0x08004c8c

08003ff0 <__retarget_lock_init_recursive>:
 8003ff0:	4770      	bx	lr

08003ff2 <__retarget_lock_acquire_recursive>:
 8003ff2:	4770      	bx	lr

08003ff4 <__retarget_lock_release_recursive>:
 8003ff4:	4770      	bx	lr

08003ff6 <memcpy>:
 8003ff6:	440a      	add	r2, r1
 8003ff8:	4291      	cmp	r1, r2
 8003ffa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003ffe:	d100      	bne.n	8004002 <memcpy+0xc>
 8004000:	4770      	bx	lr
 8004002:	b510      	push	{r4, lr}
 8004004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800400c:	4291      	cmp	r1, r2
 800400e:	d1f9      	bne.n	8004004 <memcpy+0xe>
 8004010:	bd10      	pop	{r4, pc}
	...

08004014 <_free_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4605      	mov	r5, r0
 8004018:	2900      	cmp	r1, #0
 800401a:	d041      	beq.n	80040a0 <_free_r+0x8c>
 800401c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004020:	1f0c      	subs	r4, r1, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	bfb8      	it	lt
 8004026:	18e4      	addlt	r4, r4, r3
 8004028:	f7ff fe74 	bl	8003d14 <__malloc_lock>
 800402c:	4a1d      	ldr	r2, [pc, #116]	@ (80040a4 <_free_r+0x90>)
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	b933      	cbnz	r3, 8004040 <_free_r+0x2c>
 8004032:	6063      	str	r3, [r4, #4]
 8004034:	6014      	str	r4, [r2, #0]
 8004036:	4628      	mov	r0, r5
 8004038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800403c:	f7ff be70 	b.w	8003d20 <__malloc_unlock>
 8004040:	42a3      	cmp	r3, r4
 8004042:	d908      	bls.n	8004056 <_free_r+0x42>
 8004044:	6820      	ldr	r0, [r4, #0]
 8004046:	1821      	adds	r1, r4, r0
 8004048:	428b      	cmp	r3, r1
 800404a:	bf01      	itttt	eq
 800404c:	6819      	ldreq	r1, [r3, #0]
 800404e:	685b      	ldreq	r3, [r3, #4]
 8004050:	1809      	addeq	r1, r1, r0
 8004052:	6021      	streq	r1, [r4, #0]
 8004054:	e7ed      	b.n	8004032 <_free_r+0x1e>
 8004056:	461a      	mov	r2, r3
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	b10b      	cbz	r3, 8004060 <_free_r+0x4c>
 800405c:	42a3      	cmp	r3, r4
 800405e:	d9fa      	bls.n	8004056 <_free_r+0x42>
 8004060:	6811      	ldr	r1, [r2, #0]
 8004062:	1850      	adds	r0, r2, r1
 8004064:	42a0      	cmp	r0, r4
 8004066:	d10b      	bne.n	8004080 <_free_r+0x6c>
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	4401      	add	r1, r0
 800406c:	1850      	adds	r0, r2, r1
 800406e:	4283      	cmp	r3, r0
 8004070:	6011      	str	r1, [r2, #0]
 8004072:	d1e0      	bne.n	8004036 <_free_r+0x22>
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	6053      	str	r3, [r2, #4]
 800407a:	4408      	add	r0, r1
 800407c:	6010      	str	r0, [r2, #0]
 800407e:	e7da      	b.n	8004036 <_free_r+0x22>
 8004080:	d902      	bls.n	8004088 <_free_r+0x74>
 8004082:	230c      	movs	r3, #12
 8004084:	602b      	str	r3, [r5, #0]
 8004086:	e7d6      	b.n	8004036 <_free_r+0x22>
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	1821      	adds	r1, r4, r0
 800408c:	428b      	cmp	r3, r1
 800408e:	bf04      	itt	eq
 8004090:	6819      	ldreq	r1, [r3, #0]
 8004092:	685b      	ldreq	r3, [r3, #4]
 8004094:	6063      	str	r3, [r4, #4]
 8004096:	bf04      	itt	eq
 8004098:	1809      	addeq	r1, r1, r0
 800409a:	6021      	streq	r1, [r4, #0]
 800409c:	6054      	str	r4, [r2, #4]
 800409e:	e7ca      	b.n	8004036 <_free_r+0x22>
 80040a0:	bd38      	pop	{r3, r4, r5, pc}
 80040a2:	bf00      	nop
 80040a4:	2000037c 	.word	0x2000037c

080040a8 <__ssputs_r>:
 80040a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ac:	688e      	ldr	r6, [r1, #8]
 80040ae:	461f      	mov	r7, r3
 80040b0:	42be      	cmp	r6, r7
 80040b2:	680b      	ldr	r3, [r1, #0]
 80040b4:	4682      	mov	sl, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	4690      	mov	r8, r2
 80040ba:	d82d      	bhi.n	8004118 <__ssputs_r+0x70>
 80040bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040c4:	d026      	beq.n	8004114 <__ssputs_r+0x6c>
 80040c6:	6965      	ldr	r5, [r4, #20]
 80040c8:	6909      	ldr	r1, [r1, #16]
 80040ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ce:	eba3 0901 	sub.w	r9, r3, r1
 80040d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d6:	1c7b      	adds	r3, r7, #1
 80040d8:	444b      	add	r3, r9
 80040da:	106d      	asrs	r5, r5, #1
 80040dc:	429d      	cmp	r5, r3
 80040de:	bf38      	it	cc
 80040e0:	461d      	movcc	r5, r3
 80040e2:	0553      	lsls	r3, r2, #21
 80040e4:	d527      	bpl.n	8004136 <__ssputs_r+0x8e>
 80040e6:	4629      	mov	r1, r5
 80040e8:	f7ff fd60 	bl	8003bac <_malloc_r>
 80040ec:	4606      	mov	r6, r0
 80040ee:	b360      	cbz	r0, 800414a <__ssputs_r+0xa2>
 80040f0:	6921      	ldr	r1, [r4, #16]
 80040f2:	464a      	mov	r2, r9
 80040f4:	f7ff ff7f 	bl	8003ff6 <memcpy>
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	6126      	str	r6, [r4, #16]
 8004106:	6165      	str	r5, [r4, #20]
 8004108:	444e      	add	r6, r9
 800410a:	eba5 0509 	sub.w	r5, r5, r9
 800410e:	6026      	str	r6, [r4, #0]
 8004110:	60a5      	str	r5, [r4, #8]
 8004112:	463e      	mov	r6, r7
 8004114:	42be      	cmp	r6, r7
 8004116:	d900      	bls.n	800411a <__ssputs_r+0x72>
 8004118:	463e      	mov	r6, r7
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	4632      	mov	r2, r6
 800411e:	4641      	mov	r1, r8
 8004120:	f000 fcbc 	bl	8004a9c <memmove>
 8004124:	68a3      	ldr	r3, [r4, #8]
 8004126:	1b9b      	subs	r3, r3, r6
 8004128:	60a3      	str	r3, [r4, #8]
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	4433      	add	r3, r6
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	2000      	movs	r0, #0
 8004132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004136:	462a      	mov	r2, r5
 8004138:	f000 fb8b 	bl	8004852 <_realloc_r>
 800413c:	4606      	mov	r6, r0
 800413e:	2800      	cmp	r0, #0
 8004140:	d1e0      	bne.n	8004104 <__ssputs_r+0x5c>
 8004142:	6921      	ldr	r1, [r4, #16]
 8004144:	4650      	mov	r0, sl
 8004146:	f7ff ff65 	bl	8004014 <_free_r>
 800414a:	230c      	movs	r3, #12
 800414c:	f8ca 3000 	str.w	r3, [sl]
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800415c:	e7e9      	b.n	8004132 <__ssputs_r+0x8a>
	...

08004160 <_svfiprintf_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	4698      	mov	r8, r3
 8004166:	898b      	ldrh	r3, [r1, #12]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	b09d      	sub	sp, #116	@ 0x74
 800416c:	4607      	mov	r7, r0
 800416e:	460d      	mov	r5, r1
 8004170:	4614      	mov	r4, r2
 8004172:	d510      	bpl.n	8004196 <_svfiprintf_r+0x36>
 8004174:	690b      	ldr	r3, [r1, #16]
 8004176:	b973      	cbnz	r3, 8004196 <_svfiprintf_r+0x36>
 8004178:	2140      	movs	r1, #64	@ 0x40
 800417a:	f7ff fd17 	bl	8003bac <_malloc_r>
 800417e:	6028      	str	r0, [r5, #0]
 8004180:	6128      	str	r0, [r5, #16]
 8004182:	b930      	cbnz	r0, 8004192 <_svfiprintf_r+0x32>
 8004184:	230c      	movs	r3, #12
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800418c:	b01d      	add	sp, #116	@ 0x74
 800418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004192:	2340      	movs	r3, #64	@ 0x40
 8004194:	616b      	str	r3, [r5, #20]
 8004196:	2300      	movs	r3, #0
 8004198:	9309      	str	r3, [sp, #36]	@ 0x24
 800419a:	2320      	movs	r3, #32
 800419c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a4:	2330      	movs	r3, #48	@ 0x30
 80041a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004344 <_svfiprintf_r+0x1e4>
 80041aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041ae:	f04f 0901 	mov.w	r9, #1
 80041b2:	4623      	mov	r3, r4
 80041b4:	469a      	mov	sl, r3
 80041b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ba:	b10a      	cbz	r2, 80041c0 <_svfiprintf_r+0x60>
 80041bc:	2a25      	cmp	r2, #37	@ 0x25
 80041be:	d1f9      	bne.n	80041b4 <_svfiprintf_r+0x54>
 80041c0:	ebba 0b04 	subs.w	fp, sl, r4
 80041c4:	d00b      	beq.n	80041de <_svfiprintf_r+0x7e>
 80041c6:	465b      	mov	r3, fp
 80041c8:	4622      	mov	r2, r4
 80041ca:	4629      	mov	r1, r5
 80041cc:	4638      	mov	r0, r7
 80041ce:	f7ff ff6b 	bl	80040a8 <__ssputs_r>
 80041d2:	3001      	adds	r0, #1
 80041d4:	f000 80a7 	beq.w	8004326 <_svfiprintf_r+0x1c6>
 80041d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041da:	445a      	add	r2, fp
 80041dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80041de:	f89a 3000 	ldrb.w	r3, [sl]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 809f 	beq.w	8004326 <_svfiprintf_r+0x1c6>
 80041e8:	2300      	movs	r3, #0
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041f2:	f10a 0a01 	add.w	sl, sl, #1
 80041f6:	9304      	str	r3, [sp, #16]
 80041f8:	9307      	str	r3, [sp, #28]
 80041fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004200:	4654      	mov	r4, sl
 8004202:	2205      	movs	r2, #5
 8004204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004208:	484e      	ldr	r0, [pc, #312]	@ (8004344 <_svfiprintf_r+0x1e4>)
 800420a:	f7fb ffe1 	bl	80001d0 <memchr>
 800420e:	9a04      	ldr	r2, [sp, #16]
 8004210:	b9d8      	cbnz	r0, 800424a <_svfiprintf_r+0xea>
 8004212:	06d0      	lsls	r0, r2, #27
 8004214:	bf44      	itt	mi
 8004216:	2320      	movmi	r3, #32
 8004218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800421c:	0711      	lsls	r1, r2, #28
 800421e:	bf44      	itt	mi
 8004220:	232b      	movmi	r3, #43	@ 0x2b
 8004222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004226:	f89a 3000 	ldrb.w	r3, [sl]
 800422a:	2b2a      	cmp	r3, #42	@ 0x2a
 800422c:	d015      	beq.n	800425a <_svfiprintf_r+0xfa>
 800422e:	9a07      	ldr	r2, [sp, #28]
 8004230:	4654      	mov	r4, sl
 8004232:	2000      	movs	r0, #0
 8004234:	f04f 0c0a 	mov.w	ip, #10
 8004238:	4621      	mov	r1, r4
 800423a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800423e:	3b30      	subs	r3, #48	@ 0x30
 8004240:	2b09      	cmp	r3, #9
 8004242:	d94b      	bls.n	80042dc <_svfiprintf_r+0x17c>
 8004244:	b1b0      	cbz	r0, 8004274 <_svfiprintf_r+0x114>
 8004246:	9207      	str	r2, [sp, #28]
 8004248:	e014      	b.n	8004274 <_svfiprintf_r+0x114>
 800424a:	eba0 0308 	sub.w	r3, r0, r8
 800424e:	fa09 f303 	lsl.w	r3, r9, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	46a2      	mov	sl, r4
 8004258:	e7d2      	b.n	8004200 <_svfiprintf_r+0xa0>
 800425a:	9b03      	ldr	r3, [sp, #12]
 800425c:	1d19      	adds	r1, r3, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	9103      	str	r1, [sp, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	bfbb      	ittet	lt
 8004266:	425b      	neglt	r3, r3
 8004268:	f042 0202 	orrlt.w	r2, r2, #2
 800426c:	9307      	strge	r3, [sp, #28]
 800426e:	9307      	strlt	r3, [sp, #28]
 8004270:	bfb8      	it	lt
 8004272:	9204      	strlt	r2, [sp, #16]
 8004274:	7823      	ldrb	r3, [r4, #0]
 8004276:	2b2e      	cmp	r3, #46	@ 0x2e
 8004278:	d10a      	bne.n	8004290 <_svfiprintf_r+0x130>
 800427a:	7863      	ldrb	r3, [r4, #1]
 800427c:	2b2a      	cmp	r3, #42	@ 0x2a
 800427e:	d132      	bne.n	80042e6 <_svfiprintf_r+0x186>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	9203      	str	r2, [sp, #12]
 8004288:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800428c:	3402      	adds	r4, #2
 800428e:	9305      	str	r3, [sp, #20]
 8004290:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004354 <_svfiprintf_r+0x1f4>
 8004294:	7821      	ldrb	r1, [r4, #0]
 8004296:	2203      	movs	r2, #3
 8004298:	4650      	mov	r0, sl
 800429a:	f7fb ff99 	bl	80001d0 <memchr>
 800429e:	b138      	cbz	r0, 80042b0 <_svfiprintf_r+0x150>
 80042a0:	9b04      	ldr	r3, [sp, #16]
 80042a2:	eba0 000a 	sub.w	r0, r0, sl
 80042a6:	2240      	movs	r2, #64	@ 0x40
 80042a8:	4082      	lsls	r2, r0
 80042aa:	4313      	orrs	r3, r2
 80042ac:	3401      	adds	r4, #1
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b4:	4824      	ldr	r0, [pc, #144]	@ (8004348 <_svfiprintf_r+0x1e8>)
 80042b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042ba:	2206      	movs	r2, #6
 80042bc:	f7fb ff88 	bl	80001d0 <memchr>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d036      	beq.n	8004332 <_svfiprintf_r+0x1d2>
 80042c4:	4b21      	ldr	r3, [pc, #132]	@ (800434c <_svfiprintf_r+0x1ec>)
 80042c6:	bb1b      	cbnz	r3, 8004310 <_svfiprintf_r+0x1b0>
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	3307      	adds	r3, #7
 80042cc:	f023 0307 	bic.w	r3, r3, #7
 80042d0:	3308      	adds	r3, #8
 80042d2:	9303      	str	r3, [sp, #12]
 80042d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d6:	4433      	add	r3, r6
 80042d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042da:	e76a      	b.n	80041b2 <_svfiprintf_r+0x52>
 80042dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80042e0:	460c      	mov	r4, r1
 80042e2:	2001      	movs	r0, #1
 80042e4:	e7a8      	b.n	8004238 <_svfiprintf_r+0xd8>
 80042e6:	2300      	movs	r3, #0
 80042e8:	3401      	adds	r4, #1
 80042ea:	9305      	str	r3, [sp, #20]
 80042ec:	4619      	mov	r1, r3
 80042ee:	f04f 0c0a 	mov.w	ip, #10
 80042f2:	4620      	mov	r0, r4
 80042f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f8:	3a30      	subs	r2, #48	@ 0x30
 80042fa:	2a09      	cmp	r2, #9
 80042fc:	d903      	bls.n	8004306 <_svfiprintf_r+0x1a6>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0c6      	beq.n	8004290 <_svfiprintf_r+0x130>
 8004302:	9105      	str	r1, [sp, #20]
 8004304:	e7c4      	b.n	8004290 <_svfiprintf_r+0x130>
 8004306:	fb0c 2101 	mla	r1, ip, r1, r2
 800430a:	4604      	mov	r4, r0
 800430c:	2301      	movs	r3, #1
 800430e:	e7f0      	b.n	80042f2 <_svfiprintf_r+0x192>
 8004310:	ab03      	add	r3, sp, #12
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	462a      	mov	r2, r5
 8004316:	4b0e      	ldr	r3, [pc, #56]	@ (8004350 <_svfiprintf_r+0x1f0>)
 8004318:	a904      	add	r1, sp, #16
 800431a:	4638      	mov	r0, r7
 800431c:	f3af 8000 	nop.w
 8004320:	1c42      	adds	r2, r0, #1
 8004322:	4606      	mov	r6, r0
 8004324:	d1d6      	bne.n	80042d4 <_svfiprintf_r+0x174>
 8004326:	89ab      	ldrh	r3, [r5, #12]
 8004328:	065b      	lsls	r3, r3, #25
 800432a:	f53f af2d 	bmi.w	8004188 <_svfiprintf_r+0x28>
 800432e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004330:	e72c      	b.n	800418c <_svfiprintf_r+0x2c>
 8004332:	ab03      	add	r3, sp, #12
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	462a      	mov	r2, r5
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <_svfiprintf_r+0x1f0>)
 800433a:	a904      	add	r1, sp, #16
 800433c:	4638      	mov	r0, r7
 800433e:	f000 f879 	bl	8004434 <_printf_i>
 8004342:	e7ed      	b.n	8004320 <_svfiprintf_r+0x1c0>
 8004344:	08004c4c 	.word	0x08004c4c
 8004348:	08004c56 	.word	0x08004c56
 800434c:	00000000 	.word	0x00000000
 8004350:	080040a9 	.word	0x080040a9
 8004354:	08004c52 	.word	0x08004c52

08004358 <_printf_common>:
 8004358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800435c:	4616      	mov	r6, r2
 800435e:	4698      	mov	r8, r3
 8004360:	688a      	ldr	r2, [r1, #8]
 8004362:	690b      	ldr	r3, [r1, #16]
 8004364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004368:	4293      	cmp	r3, r2
 800436a:	bfb8      	it	lt
 800436c:	4613      	movlt	r3, r2
 800436e:	6033      	str	r3, [r6, #0]
 8004370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004374:	4607      	mov	r7, r0
 8004376:	460c      	mov	r4, r1
 8004378:	b10a      	cbz	r2, 800437e <_printf_common+0x26>
 800437a:	3301      	adds	r3, #1
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	0699      	lsls	r1, r3, #26
 8004382:	bf42      	ittt	mi
 8004384:	6833      	ldrmi	r3, [r6, #0]
 8004386:	3302      	addmi	r3, #2
 8004388:	6033      	strmi	r3, [r6, #0]
 800438a:	6825      	ldr	r5, [r4, #0]
 800438c:	f015 0506 	ands.w	r5, r5, #6
 8004390:	d106      	bne.n	80043a0 <_printf_common+0x48>
 8004392:	f104 0a19 	add.w	sl, r4, #25
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	6832      	ldr	r2, [r6, #0]
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	42ab      	cmp	r3, r5
 800439e:	dc26      	bgt.n	80043ee <_printf_common+0x96>
 80043a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	3b00      	subs	r3, #0
 80043a8:	bf18      	it	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	0692      	lsls	r2, r2, #26
 80043ae:	d42b      	bmi.n	8004408 <_printf_common+0xb0>
 80043b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043b4:	4641      	mov	r1, r8
 80043b6:	4638      	mov	r0, r7
 80043b8:	47c8      	blx	r9
 80043ba:	3001      	adds	r0, #1
 80043bc:	d01e      	beq.n	80043fc <_printf_common+0xa4>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	6922      	ldr	r2, [r4, #16]
 80043c2:	f003 0306 	and.w	r3, r3, #6
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	bf02      	ittt	eq
 80043ca:	68e5      	ldreq	r5, [r4, #12]
 80043cc:	6833      	ldreq	r3, [r6, #0]
 80043ce:	1aed      	subeq	r5, r5, r3
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	bf0c      	ite	eq
 80043d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d8:	2500      	movne	r5, #0
 80043da:	4293      	cmp	r3, r2
 80043dc:	bfc4      	itt	gt
 80043de:	1a9b      	subgt	r3, r3, r2
 80043e0:	18ed      	addgt	r5, r5, r3
 80043e2:	2600      	movs	r6, #0
 80043e4:	341a      	adds	r4, #26
 80043e6:	42b5      	cmp	r5, r6
 80043e8:	d11a      	bne.n	8004420 <_printf_common+0xc8>
 80043ea:	2000      	movs	r0, #0
 80043ec:	e008      	b.n	8004400 <_printf_common+0xa8>
 80043ee:	2301      	movs	r3, #1
 80043f0:	4652      	mov	r2, sl
 80043f2:	4641      	mov	r1, r8
 80043f4:	4638      	mov	r0, r7
 80043f6:	47c8      	blx	r9
 80043f8:	3001      	adds	r0, #1
 80043fa:	d103      	bne.n	8004404 <_printf_common+0xac>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004404:	3501      	adds	r5, #1
 8004406:	e7c6      	b.n	8004396 <_printf_common+0x3e>
 8004408:	18e1      	adds	r1, r4, r3
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	2030      	movs	r0, #48	@ 0x30
 800440e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004412:	4422      	add	r2, r4
 8004414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800441c:	3302      	adds	r3, #2
 800441e:	e7c7      	b.n	80043b0 <_printf_common+0x58>
 8004420:	2301      	movs	r3, #1
 8004422:	4622      	mov	r2, r4
 8004424:	4641      	mov	r1, r8
 8004426:	4638      	mov	r0, r7
 8004428:	47c8      	blx	r9
 800442a:	3001      	adds	r0, #1
 800442c:	d0e6      	beq.n	80043fc <_printf_common+0xa4>
 800442e:	3601      	adds	r6, #1
 8004430:	e7d9      	b.n	80043e6 <_printf_common+0x8e>
	...

08004434 <_printf_i>:
 8004434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	7e0f      	ldrb	r7, [r1, #24]
 800443a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800443c:	2f78      	cmp	r7, #120	@ 0x78
 800443e:	4691      	mov	r9, r2
 8004440:	4680      	mov	r8, r0
 8004442:	460c      	mov	r4, r1
 8004444:	469a      	mov	sl, r3
 8004446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800444a:	d807      	bhi.n	800445c <_printf_i+0x28>
 800444c:	2f62      	cmp	r7, #98	@ 0x62
 800444e:	d80a      	bhi.n	8004466 <_printf_i+0x32>
 8004450:	2f00      	cmp	r7, #0
 8004452:	f000 80d2 	beq.w	80045fa <_printf_i+0x1c6>
 8004456:	2f58      	cmp	r7, #88	@ 0x58
 8004458:	f000 80b9 	beq.w	80045ce <_printf_i+0x19a>
 800445c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004464:	e03a      	b.n	80044dc <_printf_i+0xa8>
 8004466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800446a:	2b15      	cmp	r3, #21
 800446c:	d8f6      	bhi.n	800445c <_printf_i+0x28>
 800446e:	a101      	add	r1, pc, #4	@ (adr r1, 8004474 <_printf_i+0x40>)
 8004470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004474:	080044cd 	.word	0x080044cd
 8004478:	080044e1 	.word	0x080044e1
 800447c:	0800445d 	.word	0x0800445d
 8004480:	0800445d 	.word	0x0800445d
 8004484:	0800445d 	.word	0x0800445d
 8004488:	0800445d 	.word	0x0800445d
 800448c:	080044e1 	.word	0x080044e1
 8004490:	0800445d 	.word	0x0800445d
 8004494:	0800445d 	.word	0x0800445d
 8004498:	0800445d 	.word	0x0800445d
 800449c:	0800445d 	.word	0x0800445d
 80044a0:	080045e1 	.word	0x080045e1
 80044a4:	0800450b 	.word	0x0800450b
 80044a8:	0800459b 	.word	0x0800459b
 80044ac:	0800445d 	.word	0x0800445d
 80044b0:	0800445d 	.word	0x0800445d
 80044b4:	08004603 	.word	0x08004603
 80044b8:	0800445d 	.word	0x0800445d
 80044bc:	0800450b 	.word	0x0800450b
 80044c0:	0800445d 	.word	0x0800445d
 80044c4:	0800445d 	.word	0x0800445d
 80044c8:	080045a3 	.word	0x080045a3
 80044cc:	6833      	ldr	r3, [r6, #0]
 80044ce:	1d1a      	adds	r2, r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6032      	str	r2, [r6, #0]
 80044d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044dc:	2301      	movs	r3, #1
 80044de:	e09d      	b.n	800461c <_printf_i+0x1e8>
 80044e0:	6833      	ldr	r3, [r6, #0]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	6031      	str	r1, [r6, #0]
 80044e8:	0606      	lsls	r6, r0, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0xbc>
 80044ec:	681d      	ldr	r5, [r3, #0]
 80044ee:	e003      	b.n	80044f8 <_printf_i+0xc4>
 80044f0:	0645      	lsls	r5, r0, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0xb8>
 80044f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	da03      	bge.n	8004504 <_printf_i+0xd0>
 80044fc:	232d      	movs	r3, #45	@ 0x2d
 80044fe:	426d      	negs	r5, r5
 8004500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004504:	4859      	ldr	r0, [pc, #356]	@ (800466c <_printf_i+0x238>)
 8004506:	230a      	movs	r3, #10
 8004508:	e011      	b.n	800452e <_printf_i+0xfa>
 800450a:	6821      	ldr	r1, [r4, #0]
 800450c:	6833      	ldr	r3, [r6, #0]
 800450e:	0608      	lsls	r0, r1, #24
 8004510:	f853 5b04 	ldr.w	r5, [r3], #4
 8004514:	d402      	bmi.n	800451c <_printf_i+0xe8>
 8004516:	0649      	lsls	r1, r1, #25
 8004518:	bf48      	it	mi
 800451a:	b2ad      	uxthmi	r5, r5
 800451c:	2f6f      	cmp	r7, #111	@ 0x6f
 800451e:	4853      	ldr	r0, [pc, #332]	@ (800466c <_printf_i+0x238>)
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	bf14      	ite	ne
 8004524:	230a      	movne	r3, #10
 8004526:	2308      	moveq	r3, #8
 8004528:	2100      	movs	r1, #0
 800452a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800452e:	6866      	ldr	r6, [r4, #4]
 8004530:	60a6      	str	r6, [r4, #8]
 8004532:	2e00      	cmp	r6, #0
 8004534:	bfa2      	ittt	ge
 8004536:	6821      	ldrge	r1, [r4, #0]
 8004538:	f021 0104 	bicge.w	r1, r1, #4
 800453c:	6021      	strge	r1, [r4, #0]
 800453e:	b90d      	cbnz	r5, 8004544 <_printf_i+0x110>
 8004540:	2e00      	cmp	r6, #0
 8004542:	d04b      	beq.n	80045dc <_printf_i+0x1a8>
 8004544:	4616      	mov	r6, r2
 8004546:	fbb5 f1f3 	udiv	r1, r5, r3
 800454a:	fb03 5711 	mls	r7, r3, r1, r5
 800454e:	5dc7      	ldrb	r7, [r0, r7]
 8004550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004554:	462f      	mov	r7, r5
 8004556:	42bb      	cmp	r3, r7
 8004558:	460d      	mov	r5, r1
 800455a:	d9f4      	bls.n	8004546 <_printf_i+0x112>
 800455c:	2b08      	cmp	r3, #8
 800455e:	d10b      	bne.n	8004578 <_printf_i+0x144>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	07df      	lsls	r7, r3, #31
 8004564:	d508      	bpl.n	8004578 <_printf_i+0x144>
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	6861      	ldr	r1, [r4, #4]
 800456a:	4299      	cmp	r1, r3
 800456c:	bfde      	ittt	le
 800456e:	2330      	movle	r3, #48	@ 0x30
 8004570:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004574:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004578:	1b92      	subs	r2, r2, r6
 800457a:	6122      	str	r2, [r4, #16]
 800457c:	f8cd a000 	str.w	sl, [sp]
 8004580:	464b      	mov	r3, r9
 8004582:	aa03      	add	r2, sp, #12
 8004584:	4621      	mov	r1, r4
 8004586:	4640      	mov	r0, r8
 8004588:	f7ff fee6 	bl	8004358 <_printf_common>
 800458c:	3001      	adds	r0, #1
 800458e:	d14a      	bne.n	8004626 <_printf_i+0x1f2>
 8004590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004594:	b004      	add	sp, #16
 8004596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	f043 0320 	orr.w	r3, r3, #32
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	4833      	ldr	r0, [pc, #204]	@ (8004670 <_printf_i+0x23c>)
 80045a4:	2778      	movs	r7, #120	@ 0x78
 80045a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	6831      	ldr	r1, [r6, #0]
 80045ae:	061f      	lsls	r7, r3, #24
 80045b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80045b4:	d402      	bmi.n	80045bc <_printf_i+0x188>
 80045b6:	065f      	lsls	r7, r3, #25
 80045b8:	bf48      	it	mi
 80045ba:	b2ad      	uxthmi	r5, r5
 80045bc:	6031      	str	r1, [r6, #0]
 80045be:	07d9      	lsls	r1, r3, #31
 80045c0:	bf44      	itt	mi
 80045c2:	f043 0320 	orrmi.w	r3, r3, #32
 80045c6:	6023      	strmi	r3, [r4, #0]
 80045c8:	b11d      	cbz	r5, 80045d2 <_printf_i+0x19e>
 80045ca:	2310      	movs	r3, #16
 80045cc:	e7ac      	b.n	8004528 <_printf_i+0xf4>
 80045ce:	4827      	ldr	r0, [pc, #156]	@ (800466c <_printf_i+0x238>)
 80045d0:	e7e9      	b.n	80045a6 <_printf_i+0x172>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	f023 0320 	bic.w	r3, r3, #32
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	e7f6      	b.n	80045ca <_printf_i+0x196>
 80045dc:	4616      	mov	r6, r2
 80045de:	e7bd      	b.n	800455c <_printf_i+0x128>
 80045e0:	6833      	ldr	r3, [r6, #0]
 80045e2:	6825      	ldr	r5, [r4, #0]
 80045e4:	6961      	ldr	r1, [r4, #20]
 80045e6:	1d18      	adds	r0, r3, #4
 80045e8:	6030      	str	r0, [r6, #0]
 80045ea:	062e      	lsls	r6, r5, #24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	d501      	bpl.n	80045f4 <_printf_i+0x1c0>
 80045f0:	6019      	str	r1, [r3, #0]
 80045f2:	e002      	b.n	80045fa <_printf_i+0x1c6>
 80045f4:	0668      	lsls	r0, r5, #25
 80045f6:	d5fb      	bpl.n	80045f0 <_printf_i+0x1bc>
 80045f8:	8019      	strh	r1, [r3, #0]
 80045fa:	2300      	movs	r3, #0
 80045fc:	6123      	str	r3, [r4, #16]
 80045fe:	4616      	mov	r6, r2
 8004600:	e7bc      	b.n	800457c <_printf_i+0x148>
 8004602:	6833      	ldr	r3, [r6, #0]
 8004604:	1d1a      	adds	r2, r3, #4
 8004606:	6032      	str	r2, [r6, #0]
 8004608:	681e      	ldr	r6, [r3, #0]
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	2100      	movs	r1, #0
 800460e:	4630      	mov	r0, r6
 8004610:	f7fb fdde 	bl	80001d0 <memchr>
 8004614:	b108      	cbz	r0, 800461a <_printf_i+0x1e6>
 8004616:	1b80      	subs	r0, r0, r6
 8004618:	6060      	str	r0, [r4, #4]
 800461a:	6863      	ldr	r3, [r4, #4]
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	2300      	movs	r3, #0
 8004620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004624:	e7aa      	b.n	800457c <_printf_i+0x148>
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	4632      	mov	r2, r6
 800462a:	4649      	mov	r1, r9
 800462c:	4640      	mov	r0, r8
 800462e:	47d0      	blx	sl
 8004630:	3001      	adds	r0, #1
 8004632:	d0ad      	beq.n	8004590 <_printf_i+0x15c>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	079b      	lsls	r3, r3, #30
 8004638:	d413      	bmi.n	8004662 <_printf_i+0x22e>
 800463a:	68e0      	ldr	r0, [r4, #12]
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	4298      	cmp	r0, r3
 8004640:	bfb8      	it	lt
 8004642:	4618      	movlt	r0, r3
 8004644:	e7a6      	b.n	8004594 <_printf_i+0x160>
 8004646:	2301      	movs	r3, #1
 8004648:	4632      	mov	r2, r6
 800464a:	4649      	mov	r1, r9
 800464c:	4640      	mov	r0, r8
 800464e:	47d0      	blx	sl
 8004650:	3001      	adds	r0, #1
 8004652:	d09d      	beq.n	8004590 <_printf_i+0x15c>
 8004654:	3501      	adds	r5, #1
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	9903      	ldr	r1, [sp, #12]
 800465a:	1a5b      	subs	r3, r3, r1
 800465c:	42ab      	cmp	r3, r5
 800465e:	dcf2      	bgt.n	8004646 <_printf_i+0x212>
 8004660:	e7eb      	b.n	800463a <_printf_i+0x206>
 8004662:	2500      	movs	r5, #0
 8004664:	f104 0619 	add.w	r6, r4, #25
 8004668:	e7f5      	b.n	8004656 <_printf_i+0x222>
 800466a:	bf00      	nop
 800466c:	08004c5d 	.word	0x08004c5d
 8004670:	08004c6e 	.word	0x08004c6e

08004674 <__sflush_r>:
 8004674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467c:	0716      	lsls	r6, r2, #28
 800467e:	4605      	mov	r5, r0
 8004680:	460c      	mov	r4, r1
 8004682:	d454      	bmi.n	800472e <__sflush_r+0xba>
 8004684:	684b      	ldr	r3, [r1, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	dc02      	bgt.n	8004690 <__sflush_r+0x1c>
 800468a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	dd48      	ble.n	8004722 <__sflush_r+0xae>
 8004690:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004692:	2e00      	cmp	r6, #0
 8004694:	d045      	beq.n	8004722 <__sflush_r+0xae>
 8004696:	2300      	movs	r3, #0
 8004698:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800469c:	682f      	ldr	r7, [r5, #0]
 800469e:	6a21      	ldr	r1, [r4, #32]
 80046a0:	602b      	str	r3, [r5, #0]
 80046a2:	d030      	beq.n	8004706 <__sflush_r+0x92>
 80046a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	0759      	lsls	r1, r3, #29
 80046aa:	d505      	bpl.n	80046b8 <__sflush_r+0x44>
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	1ad2      	subs	r2, r2, r3
 80046b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046b2:	b10b      	cbz	r3, 80046b8 <__sflush_r+0x44>
 80046b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046b6:	1ad2      	subs	r2, r2, r3
 80046b8:	2300      	movs	r3, #0
 80046ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046bc:	6a21      	ldr	r1, [r4, #32]
 80046be:	4628      	mov	r0, r5
 80046c0:	47b0      	blx	r6
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	d106      	bne.n	80046d6 <__sflush_r+0x62>
 80046c8:	6829      	ldr	r1, [r5, #0]
 80046ca:	291d      	cmp	r1, #29
 80046cc:	d82b      	bhi.n	8004726 <__sflush_r+0xb2>
 80046ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004778 <__sflush_r+0x104>)
 80046d0:	410a      	asrs	r2, r1
 80046d2:	07d6      	lsls	r6, r2, #31
 80046d4:	d427      	bmi.n	8004726 <__sflush_r+0xb2>
 80046d6:	2200      	movs	r2, #0
 80046d8:	6062      	str	r2, [r4, #4]
 80046da:	04d9      	lsls	r1, r3, #19
 80046dc:	6922      	ldr	r2, [r4, #16]
 80046de:	6022      	str	r2, [r4, #0]
 80046e0:	d504      	bpl.n	80046ec <__sflush_r+0x78>
 80046e2:	1c42      	adds	r2, r0, #1
 80046e4:	d101      	bne.n	80046ea <__sflush_r+0x76>
 80046e6:	682b      	ldr	r3, [r5, #0]
 80046e8:	b903      	cbnz	r3, 80046ec <__sflush_r+0x78>
 80046ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80046ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046ee:	602f      	str	r7, [r5, #0]
 80046f0:	b1b9      	cbz	r1, 8004722 <__sflush_r+0xae>
 80046f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046f6:	4299      	cmp	r1, r3
 80046f8:	d002      	beq.n	8004700 <__sflush_r+0x8c>
 80046fa:	4628      	mov	r0, r5
 80046fc:	f7ff fc8a 	bl	8004014 <_free_r>
 8004700:	2300      	movs	r3, #0
 8004702:	6363      	str	r3, [r4, #52]	@ 0x34
 8004704:	e00d      	b.n	8004722 <__sflush_r+0xae>
 8004706:	2301      	movs	r3, #1
 8004708:	4628      	mov	r0, r5
 800470a:	47b0      	blx	r6
 800470c:	4602      	mov	r2, r0
 800470e:	1c50      	adds	r0, r2, #1
 8004710:	d1c9      	bne.n	80046a6 <__sflush_r+0x32>
 8004712:	682b      	ldr	r3, [r5, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0c6      	beq.n	80046a6 <__sflush_r+0x32>
 8004718:	2b1d      	cmp	r3, #29
 800471a:	d001      	beq.n	8004720 <__sflush_r+0xac>
 800471c:	2b16      	cmp	r3, #22
 800471e:	d11e      	bne.n	800475e <__sflush_r+0xea>
 8004720:	602f      	str	r7, [r5, #0]
 8004722:	2000      	movs	r0, #0
 8004724:	e022      	b.n	800476c <__sflush_r+0xf8>
 8004726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800472a:	b21b      	sxth	r3, r3
 800472c:	e01b      	b.n	8004766 <__sflush_r+0xf2>
 800472e:	690f      	ldr	r7, [r1, #16]
 8004730:	2f00      	cmp	r7, #0
 8004732:	d0f6      	beq.n	8004722 <__sflush_r+0xae>
 8004734:	0793      	lsls	r3, r2, #30
 8004736:	680e      	ldr	r6, [r1, #0]
 8004738:	bf08      	it	eq
 800473a:	694b      	ldreq	r3, [r1, #20]
 800473c:	600f      	str	r7, [r1, #0]
 800473e:	bf18      	it	ne
 8004740:	2300      	movne	r3, #0
 8004742:	eba6 0807 	sub.w	r8, r6, r7
 8004746:	608b      	str	r3, [r1, #8]
 8004748:	f1b8 0f00 	cmp.w	r8, #0
 800474c:	dde9      	ble.n	8004722 <__sflush_r+0xae>
 800474e:	6a21      	ldr	r1, [r4, #32]
 8004750:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004752:	4643      	mov	r3, r8
 8004754:	463a      	mov	r2, r7
 8004756:	4628      	mov	r0, r5
 8004758:	47b0      	blx	r6
 800475a:	2800      	cmp	r0, #0
 800475c:	dc08      	bgt.n	8004770 <__sflush_r+0xfc>
 800475e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004766:	81a3      	strh	r3, [r4, #12]
 8004768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800476c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004770:	4407      	add	r7, r0
 8004772:	eba8 0800 	sub.w	r8, r8, r0
 8004776:	e7e7      	b.n	8004748 <__sflush_r+0xd4>
 8004778:	dfbffffe 	.word	0xdfbffffe

0800477c <_fflush_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	690b      	ldr	r3, [r1, #16]
 8004780:	4605      	mov	r5, r0
 8004782:	460c      	mov	r4, r1
 8004784:	b913      	cbnz	r3, 800478c <_fflush_r+0x10>
 8004786:	2500      	movs	r5, #0
 8004788:	4628      	mov	r0, r5
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	b118      	cbz	r0, 8004796 <_fflush_r+0x1a>
 800478e:	6a03      	ldr	r3, [r0, #32]
 8004790:	b90b      	cbnz	r3, 8004796 <_fflush_r+0x1a>
 8004792:	f7ff fb57 	bl	8003e44 <__sinit>
 8004796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f3      	beq.n	8004786 <_fflush_r+0xa>
 800479e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047a0:	07d0      	lsls	r0, r2, #31
 80047a2:	d404      	bmi.n	80047ae <_fflush_r+0x32>
 80047a4:	0599      	lsls	r1, r3, #22
 80047a6:	d402      	bmi.n	80047ae <_fflush_r+0x32>
 80047a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047aa:	f7ff fc22 	bl	8003ff2 <__retarget_lock_acquire_recursive>
 80047ae:	4628      	mov	r0, r5
 80047b0:	4621      	mov	r1, r4
 80047b2:	f7ff ff5f 	bl	8004674 <__sflush_r>
 80047b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047b8:	07da      	lsls	r2, r3, #31
 80047ba:	4605      	mov	r5, r0
 80047bc:	d4e4      	bmi.n	8004788 <_fflush_r+0xc>
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	059b      	lsls	r3, r3, #22
 80047c2:	d4e1      	bmi.n	8004788 <_fflush_r+0xc>
 80047c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047c6:	f7ff fc15 	bl	8003ff4 <__retarget_lock_release_recursive>
 80047ca:	e7dd      	b.n	8004788 <_fflush_r+0xc>

080047cc <__sread>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	460c      	mov	r4, r1
 80047d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d4:	f000 f9c0 	bl	8004b58 <_read_r>
 80047d8:	2800      	cmp	r0, #0
 80047da:	bfab      	itete	ge
 80047dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047de:	89a3      	ldrhlt	r3, [r4, #12]
 80047e0:	181b      	addge	r3, r3, r0
 80047e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047e6:	bfac      	ite	ge
 80047e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047ea:	81a3      	strhlt	r3, [r4, #12]
 80047ec:	bd10      	pop	{r4, pc}

080047ee <__swrite>:
 80047ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f2:	461f      	mov	r7, r3
 80047f4:	898b      	ldrh	r3, [r1, #12]
 80047f6:	05db      	lsls	r3, r3, #23
 80047f8:	4605      	mov	r5, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	4616      	mov	r6, r2
 80047fe:	d505      	bpl.n	800480c <__swrite+0x1e>
 8004800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004804:	2302      	movs	r3, #2
 8004806:	2200      	movs	r2, #0
 8004808:	f000 f994 	bl	8004b34 <_lseek_r>
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	4632      	mov	r2, r6
 800481a:	463b      	mov	r3, r7
 800481c:	4628      	mov	r0, r5
 800481e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004822:	f000 b9ab 	b.w	8004b7c <_write_r>

08004826 <__sseek>:
 8004826:	b510      	push	{r4, lr}
 8004828:	460c      	mov	r4, r1
 800482a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800482e:	f000 f981 	bl	8004b34 <_lseek_r>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	bf15      	itete	ne
 8004838:	6560      	strne	r0, [r4, #84]	@ 0x54
 800483a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800483e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004842:	81a3      	strheq	r3, [r4, #12]
 8004844:	bf18      	it	ne
 8004846:	81a3      	strhne	r3, [r4, #12]
 8004848:	bd10      	pop	{r4, pc}

0800484a <__sclose>:
 800484a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484e:	f000 b93f 	b.w	8004ad0 <_close_r>

08004852 <_realloc_r>:
 8004852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004856:	4680      	mov	r8, r0
 8004858:	4615      	mov	r5, r2
 800485a:	460c      	mov	r4, r1
 800485c:	b921      	cbnz	r1, 8004868 <_realloc_r+0x16>
 800485e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004862:	4611      	mov	r1, r2
 8004864:	f7ff b9a2 	b.w	8003bac <_malloc_r>
 8004868:	b92a      	cbnz	r2, 8004876 <_realloc_r+0x24>
 800486a:	f7ff fbd3 	bl	8004014 <_free_r>
 800486e:	2400      	movs	r4, #0
 8004870:	4620      	mov	r0, r4
 8004872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004876:	f000 f993 	bl	8004ba0 <_malloc_usable_size_r>
 800487a:	4285      	cmp	r5, r0
 800487c:	4606      	mov	r6, r0
 800487e:	d802      	bhi.n	8004886 <_realloc_r+0x34>
 8004880:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004884:	d8f4      	bhi.n	8004870 <_realloc_r+0x1e>
 8004886:	4629      	mov	r1, r5
 8004888:	4640      	mov	r0, r8
 800488a:	f7ff f98f 	bl	8003bac <_malloc_r>
 800488e:	4607      	mov	r7, r0
 8004890:	2800      	cmp	r0, #0
 8004892:	d0ec      	beq.n	800486e <_realloc_r+0x1c>
 8004894:	42b5      	cmp	r5, r6
 8004896:	462a      	mov	r2, r5
 8004898:	4621      	mov	r1, r4
 800489a:	bf28      	it	cs
 800489c:	4632      	movcs	r2, r6
 800489e:	f7ff fbaa 	bl	8003ff6 <memcpy>
 80048a2:	4621      	mov	r1, r4
 80048a4:	4640      	mov	r0, r8
 80048a6:	f7ff fbb5 	bl	8004014 <_free_r>
 80048aa:	463c      	mov	r4, r7
 80048ac:	e7e0      	b.n	8004870 <_realloc_r+0x1e>

080048ae <__swbuf_r>:
 80048ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b0:	460e      	mov	r6, r1
 80048b2:	4614      	mov	r4, r2
 80048b4:	4605      	mov	r5, r0
 80048b6:	b118      	cbz	r0, 80048c0 <__swbuf_r+0x12>
 80048b8:	6a03      	ldr	r3, [r0, #32]
 80048ba:	b90b      	cbnz	r3, 80048c0 <__swbuf_r+0x12>
 80048bc:	f7ff fac2 	bl	8003e44 <__sinit>
 80048c0:	69a3      	ldr	r3, [r4, #24]
 80048c2:	60a3      	str	r3, [r4, #8]
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	071a      	lsls	r2, r3, #28
 80048c8:	d501      	bpl.n	80048ce <__swbuf_r+0x20>
 80048ca:	6923      	ldr	r3, [r4, #16]
 80048cc:	b943      	cbnz	r3, 80048e0 <__swbuf_r+0x32>
 80048ce:	4621      	mov	r1, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 f82b 	bl	800492c <__swsetup_r>
 80048d6:	b118      	cbz	r0, 80048e0 <__swbuf_r+0x32>
 80048d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80048dc:	4638      	mov	r0, r7
 80048de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	6922      	ldr	r2, [r4, #16]
 80048e4:	1a98      	subs	r0, r3, r2
 80048e6:	6963      	ldr	r3, [r4, #20]
 80048e8:	b2f6      	uxtb	r6, r6
 80048ea:	4283      	cmp	r3, r0
 80048ec:	4637      	mov	r7, r6
 80048ee:	dc05      	bgt.n	80048fc <__swbuf_r+0x4e>
 80048f0:	4621      	mov	r1, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	f7ff ff42 	bl	800477c <_fflush_r>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d1ed      	bne.n	80048d8 <__swbuf_r+0x2a>
 80048fc:	68a3      	ldr	r3, [r4, #8]
 80048fe:	3b01      	subs	r3, #1
 8004900:	60a3      	str	r3, [r4, #8]
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	701e      	strb	r6, [r3, #0]
 800490a:	6962      	ldr	r2, [r4, #20]
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	429a      	cmp	r2, r3
 8004910:	d004      	beq.n	800491c <__swbuf_r+0x6e>
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	07db      	lsls	r3, r3, #31
 8004916:	d5e1      	bpl.n	80048dc <__swbuf_r+0x2e>
 8004918:	2e0a      	cmp	r6, #10
 800491a:	d1df      	bne.n	80048dc <__swbuf_r+0x2e>
 800491c:	4621      	mov	r1, r4
 800491e:	4628      	mov	r0, r5
 8004920:	f7ff ff2c 	bl	800477c <_fflush_r>
 8004924:	2800      	cmp	r0, #0
 8004926:	d0d9      	beq.n	80048dc <__swbuf_r+0x2e>
 8004928:	e7d6      	b.n	80048d8 <__swbuf_r+0x2a>
	...

0800492c <__swsetup_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4b29      	ldr	r3, [pc, #164]	@ (80049d4 <__swsetup_r+0xa8>)
 8004930:	4605      	mov	r5, r0
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	460c      	mov	r4, r1
 8004936:	b118      	cbz	r0, 8004940 <__swsetup_r+0x14>
 8004938:	6a03      	ldr	r3, [r0, #32]
 800493a:	b90b      	cbnz	r3, 8004940 <__swsetup_r+0x14>
 800493c:	f7ff fa82 	bl	8003e44 <__sinit>
 8004940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004944:	0719      	lsls	r1, r3, #28
 8004946:	d422      	bmi.n	800498e <__swsetup_r+0x62>
 8004948:	06da      	lsls	r2, r3, #27
 800494a:	d407      	bmi.n	800495c <__swsetup_r+0x30>
 800494c:	2209      	movs	r2, #9
 800494e:	602a      	str	r2, [r5, #0]
 8004950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800495a:	e033      	b.n	80049c4 <__swsetup_r+0x98>
 800495c:	0758      	lsls	r0, r3, #29
 800495e:	d512      	bpl.n	8004986 <__swsetup_r+0x5a>
 8004960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004962:	b141      	cbz	r1, 8004976 <__swsetup_r+0x4a>
 8004964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004968:	4299      	cmp	r1, r3
 800496a:	d002      	beq.n	8004972 <__swsetup_r+0x46>
 800496c:	4628      	mov	r0, r5
 800496e:	f7ff fb51 	bl	8004014 <_free_r>
 8004972:	2300      	movs	r3, #0
 8004974:	6363      	str	r3, [r4, #52]	@ 0x34
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800497c:	81a3      	strh	r3, [r4, #12]
 800497e:	2300      	movs	r3, #0
 8004980:	6063      	str	r3, [r4, #4]
 8004982:	6923      	ldr	r3, [r4, #16]
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	f043 0308 	orr.w	r3, r3, #8
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	6923      	ldr	r3, [r4, #16]
 8004990:	b94b      	cbnz	r3, 80049a6 <__swsetup_r+0x7a>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800499c:	d003      	beq.n	80049a6 <__swsetup_r+0x7a>
 800499e:	4621      	mov	r1, r4
 80049a0:	4628      	mov	r0, r5
 80049a2:	f000 f83f 	bl	8004a24 <__smakebuf_r>
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	f013 0201 	ands.w	r2, r3, #1
 80049ae:	d00a      	beq.n	80049c6 <__swsetup_r+0x9a>
 80049b0:	2200      	movs	r2, #0
 80049b2:	60a2      	str	r2, [r4, #8]
 80049b4:	6962      	ldr	r2, [r4, #20]
 80049b6:	4252      	negs	r2, r2
 80049b8:	61a2      	str	r2, [r4, #24]
 80049ba:	6922      	ldr	r2, [r4, #16]
 80049bc:	b942      	cbnz	r2, 80049d0 <__swsetup_r+0xa4>
 80049be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80049c2:	d1c5      	bne.n	8004950 <__swsetup_r+0x24>
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
 80049c6:	0799      	lsls	r1, r3, #30
 80049c8:	bf58      	it	pl
 80049ca:	6962      	ldrpl	r2, [r4, #20]
 80049cc:	60a2      	str	r2, [r4, #8]
 80049ce:	e7f4      	b.n	80049ba <__swsetup_r+0x8e>
 80049d0:	2000      	movs	r0, #0
 80049d2:	e7f7      	b.n	80049c4 <__swsetup_r+0x98>
 80049d4:	2000016c 	.word	0x2000016c

080049d8 <__swhatbuf_r>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	460c      	mov	r4, r1
 80049dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e0:	2900      	cmp	r1, #0
 80049e2:	b096      	sub	sp, #88	@ 0x58
 80049e4:	4615      	mov	r5, r2
 80049e6:	461e      	mov	r6, r3
 80049e8:	da0d      	bge.n	8004a06 <__swhatbuf_r+0x2e>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80049f0:	f04f 0100 	mov.w	r1, #0
 80049f4:	bf14      	ite	ne
 80049f6:	2340      	movne	r3, #64	@ 0x40
 80049f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80049fc:	2000      	movs	r0, #0
 80049fe:	6031      	str	r1, [r6, #0]
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	b016      	add	sp, #88	@ 0x58
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	466a      	mov	r2, sp
 8004a08:	f000 f872 	bl	8004af0 <_fstat_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	dbec      	blt.n	80049ea <__swhatbuf_r+0x12>
 8004a10:	9901      	ldr	r1, [sp, #4]
 8004a12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a1a:	4259      	negs	r1, r3
 8004a1c:	4159      	adcs	r1, r3
 8004a1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a22:	e7eb      	b.n	80049fc <__swhatbuf_r+0x24>

08004a24 <__smakebuf_r>:
 8004a24:	898b      	ldrh	r3, [r1, #12]
 8004a26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a28:	079d      	lsls	r5, r3, #30
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	d507      	bpl.n	8004a40 <__smakebuf_r+0x1c>
 8004a30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	6123      	str	r3, [r4, #16]
 8004a38:	2301      	movs	r3, #1
 8004a3a:	6163      	str	r3, [r4, #20]
 8004a3c:	b003      	add	sp, #12
 8004a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a40:	ab01      	add	r3, sp, #4
 8004a42:	466a      	mov	r2, sp
 8004a44:	f7ff ffc8 	bl	80049d8 <__swhatbuf_r>
 8004a48:	9f00      	ldr	r7, [sp, #0]
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	4630      	mov	r0, r6
 8004a50:	f7ff f8ac 	bl	8003bac <_malloc_r>
 8004a54:	b948      	cbnz	r0, 8004a6a <__smakebuf_r+0x46>
 8004a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5a:	059a      	lsls	r2, r3, #22
 8004a5c:	d4ee      	bmi.n	8004a3c <__smakebuf_r+0x18>
 8004a5e:	f023 0303 	bic.w	r3, r3, #3
 8004a62:	f043 0302 	orr.w	r3, r3, #2
 8004a66:	81a3      	strh	r3, [r4, #12]
 8004a68:	e7e2      	b.n	8004a30 <__smakebuf_r+0xc>
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	6020      	str	r0, [r4, #0]
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a72:	81a3      	strh	r3, [r4, #12]
 8004a74:	9b01      	ldr	r3, [sp, #4]
 8004a76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a7a:	b15b      	cbz	r3, 8004a94 <__smakebuf_r+0x70>
 8004a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a80:	4630      	mov	r0, r6
 8004a82:	f000 f847 	bl	8004b14 <_isatty_r>
 8004a86:	b128      	cbz	r0, 8004a94 <__smakebuf_r+0x70>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	431d      	orrs	r5, r3
 8004a98:	81a5      	strh	r5, [r4, #12]
 8004a9a:	e7cf      	b.n	8004a3c <__smakebuf_r+0x18>

08004a9c <memmove>:
 8004a9c:	4288      	cmp	r0, r1
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	eb01 0402 	add.w	r4, r1, r2
 8004aa4:	d902      	bls.n	8004aac <memmove+0x10>
 8004aa6:	4284      	cmp	r4, r0
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	d807      	bhi.n	8004abc <memmove+0x20>
 8004aac:	1e43      	subs	r3, r0, #1
 8004aae:	42a1      	cmp	r1, r4
 8004ab0:	d008      	beq.n	8004ac4 <memmove+0x28>
 8004ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aba:	e7f8      	b.n	8004aae <memmove+0x12>
 8004abc:	4402      	add	r2, r0
 8004abe:	4601      	mov	r1, r0
 8004ac0:	428a      	cmp	r2, r1
 8004ac2:	d100      	bne.n	8004ac6 <memmove+0x2a>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ace:	e7f7      	b.n	8004ac0 <memmove+0x24>

08004ad0 <_close_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d06      	ldr	r5, [pc, #24]	@ (8004aec <_close_r+0x1c>)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	4608      	mov	r0, r1
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	f7fc ff82 	bl	80019e4 <_close>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_close_r+0x1a>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_close_r+0x1a>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	200004c0 	.word	0x200004c0

08004af0 <_fstat_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4d07      	ldr	r5, [pc, #28]	@ (8004b10 <_fstat_r+0x20>)
 8004af4:	2300      	movs	r3, #0
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	602b      	str	r3, [r5, #0]
 8004afe:	f7fc ff7d 	bl	80019fc <_fstat>
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	d102      	bne.n	8004b0c <_fstat_r+0x1c>
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	b103      	cbz	r3, 8004b0c <_fstat_r+0x1c>
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
 8004b0e:	bf00      	nop
 8004b10:	200004c0 	.word	0x200004c0

08004b14 <_isatty_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d06      	ldr	r5, [pc, #24]	@ (8004b30 <_isatty_r+0x1c>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	602b      	str	r3, [r5, #0]
 8004b20:	f7fc ff7c 	bl	8001a1c <_isatty>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_isatty_r+0x1a>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_isatty_r+0x1a>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	200004c0 	.word	0x200004c0

08004b34 <_lseek_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4d07      	ldr	r5, [pc, #28]	@ (8004b54 <_lseek_r+0x20>)
 8004b38:	4604      	mov	r4, r0
 8004b3a:	4608      	mov	r0, r1
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	2200      	movs	r2, #0
 8004b40:	602a      	str	r2, [r5, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f7fc ff75 	bl	8001a32 <_lseek>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_lseek_r+0x1e>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_lseek_r+0x1e>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	200004c0 	.word	0x200004c0

08004b58 <_read_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d07      	ldr	r5, [pc, #28]	@ (8004b78 <_read_r+0x20>)
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	4608      	mov	r0, r1
 8004b60:	4611      	mov	r1, r2
 8004b62:	2200      	movs	r2, #0
 8004b64:	602a      	str	r2, [r5, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7fc fef2 	bl	8001950 <_read>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_read_r+0x1e>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_read_r+0x1e>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	200004c0 	.word	0x200004c0

08004b7c <_write_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d07      	ldr	r5, [pc, #28]	@ (8004b9c <_write_r+0x20>)
 8004b80:	4604      	mov	r4, r0
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7fc fbc5 	bl	800131a <_write>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_write_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_write_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	200004c0 	.word	0x200004c0

08004ba0 <_malloc_usable_size_r>:
 8004ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba4:	1f18      	subs	r0, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bfbc      	itt	lt
 8004baa:	580b      	ldrlt	r3, [r1, r0]
 8004bac:	18c0      	addlt	r0, r0, r3
 8004bae:	4770      	bx	lr

08004bb0 <_init>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr

08004bbc <_fini>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	bf00      	nop
 8004bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc2:	bc08      	pop	{r3}
 8004bc4:	469e      	mov	lr, r3
 8004bc6:	4770      	bx	lr
